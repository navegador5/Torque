!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U();else if("function"==typeof define&&define.amd)define([],U);else{var F=U();for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(window,(function(){return function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}return F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)F.d(B,I,function(U){return Q[U]}.bind(null,I));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=9)}([function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Util = void 0;\r\n// 常用工具函数\r\nexports.Util = {\r\n    _id: 0,\r\n    /**\r\n     * 生成一个id（整数类型）\r\n     */\r\n    id() {\r\n        return this._id++;\r\n    },\r\n    /**\r\n     * 根据两个id生成一个复合id（字符串类型）: 'id1.id2'\r\n     * @param id1\r\n     * @param id2\r\n     */\r\n    compositeId(id1, id2) {\r\n        if (id1 < id2) {\r\n            return id1 + '.' + id2;\r\n        }\r\n        else {\r\n            return id2 + '.' + id1;\r\n        }\r\n    },\r\n    /**\r\n     * 对象合并\r\n     * @param originOpt 源对象\r\n     * @param destOpt 目标对象\r\n     */\r\n    merge(originOpt, destOpt) {\r\n        if (!originOpt || !destOpt)\r\n            return;\r\n        for (let key in destOpt) {\r\n            if (typeof destOpt[key] === 'object' &&\r\n                !Array.isArray(destOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.merge(originOpt[key], destOpt[key]);\r\n            }\r\n            else {\r\n                if ((destOpt[key] !== null || destOpt[key] !== undefined) && originOpt[key] !== undefined) {\r\n                    originOpt[key] = destOpt[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 对象扩展\r\n     * @param originOpt 源对象\r\n     * @param extendOpt 扩展对象\r\n     */\r\n    extend(originOpt, extendOpt) {\r\n        if (!originOpt || !extendOpt)\r\n            return;\r\n        for (let key in extendOpt) {\r\n            if (typeof extendOpt[key] === 'object' &&\r\n                !Array.isArray(extendOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.extend(originOpt[key], extendOpt[key]);\r\n            }\r\n            else {\r\n                if (extendOpt[key] !== null || extendOpt[key] !== undefined)\r\n                    originOpt[key] = extendOpt[key];\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 从列表移除某个元素\r\n     * @param list 列表\r\n     * @param item 要移除的元素\r\n     */\r\n    remove(list, item) {\r\n        list.splice(list.findIndex(i => i['id'] === item['id']), 1);\r\n    },\r\n    /**\r\n     * 角度转弧度\r\n     * @param angle 角度\r\n     */\r\n    angle2Radian(angle) {\r\n        return (angle / 180) * Math.PI;\r\n    },\r\n    /**\r\n     * 弧度转角度\r\n     * @param radian 弧度\r\n     */\r\n    radian2Angle(radian) {\r\n        return radian / Math.PI * 180;\r\n    },\r\n    /**\r\n     * 返回页面加载完毕开始到当前的时间（微秒级，performance api）\r\n     */\r\n    now() {\r\n        return window.performance.now();\r\n    },\r\n    /**\r\n     * 直接插入排序\r\n     * @param list 要排序的列表\r\n     * @param fn 比较函数\r\n     */\r\n    insertSort(list, fn) {\r\n        let len = list.length, i, j, temp;\r\n        for (i = 1; i < len; i++) {\r\n            temp = list[i];\r\n            for (j = i - 1; j >= 0 && fn(list[j], temp) > 0; j--) {\r\n                list[j + 1] = list[j];\r\n            }\r\n            list[j + 1] = temp;\r\n        }\r\n    },\r\n    /**\r\n     * 对给定的value，收窄在min和max范围内\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     */\r\n    clamp(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    },\r\n    /**\r\n     * 返回一个数的正负号\r\n     * @param value\r\n     */\r\n    sign(value) {\r\n        return value < 0 ? -1 : 1;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports._tempVector4 = exports._tempVector3 = exports._tempVector2 = exports._tempVector1 = exports.Vector = void 0;\r\n// 二维向量 {x, y}\r\nclass Vector {\r\n    constructor(x, y) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        if (x !== undefined && y !== undefined) {\r\n            this.set(x, y);\r\n        }\r\n    }\r\n    //-------------操作----------------\r\n    /**\r\n     * 设置值\r\n     * @param x\r\n     * @param y\r\n     */\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * 相加\r\n     * @param v\r\n     */\r\n    add(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x + v.x;\r\n        out.y = this.y + v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 相减\r\n     * @param v\r\n     */\r\n    sub(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x - v.x;\r\n        out.y = this.y - v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 点积\r\n     * @param v\r\n     */\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    /**\r\n     * 叉积\r\n     * @param v\r\n     */\r\n    cro(v) {\r\n        return this.x * v.y - v.x * this.y;\r\n    }\r\n    /**\r\n     * 与标量进行叉积\r\n     * @param n\r\n     */\r\n    croNum(n, out) {\r\n        out = out || new Vector();\r\n        out.x = -n * this.y;\r\n        out.y = n * this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 投影\r\n     * @param v\r\n     */\r\n    pro(v) {\r\n        return this.dot(v) / v.len();\r\n    }\r\n    /**\r\n     * 法向\r\n     */\r\n    nor(out) {\r\n        out = out || new Vector();\r\n        out.x = this.y;\r\n        out.y = -this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 求模\r\n     */\r\n    len() {\r\n        return Math.hypot(this.x, this.y);\r\n    }\r\n    /**\r\n     * 平方模（节省求平方根操作）\r\n     */\r\n    len_s() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    /**\r\n     * 单位化\r\n     */\r\n    nol() {\r\n        let len = this.len();\r\n        if (len === 0) {\r\n            return new Vector();\r\n        }\r\n        this.x = this.x / len;\r\n        this.y = this.y / len;\r\n        return this;\r\n    }\r\n    /**\r\n     * 缩放\r\n     * @param n\r\n     */\r\n    scl(n, out) {\r\n        out = out || new Vector();\r\n        out.x = n * this.x;\r\n        out.y = n * this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 反向\r\n     */\r\n    inv(out) {\r\n        out = out || new Vector();\r\n        out.x = -this.x;\r\n        out.y = -this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 判断两向量是否相等\r\n     * @param v\r\n     */\r\n    eql(v) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    /**\r\n     * 求两向量夹角(弧度制)\r\n     * @param v\r\n     */\r\n    ang(v) {\r\n        return Math.acos(this.dot(v) / (this.len() * v.len()));\r\n    }\r\n    /**\r\n     * 克隆向量\r\n     */\r\n    col() {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n    /**\r\n     * 绕某点旋转向量\r\n     * @param radian 角度（弧度制）\r\n     * @param point 绕的点\r\n     */\r\n    rot(radian, point, out) {\r\n        point = point || new Vector();\r\n        out = out || new Vector();\r\n        let cos = Math.cos(radian), sin = Math.sin(radian), dx = this.x - point.x, dy = this.y - point.y;\r\n        out.x = point.x + (dx * cos - dy * sin);\r\n        out.y = point.y + (dx * sin + dy * cos);\r\n        return out;\r\n    }\r\n    /**\r\n     * 求一个向量（点）按照direction方向，延长len长度后的坐标\r\n     * @param direction\r\n     * @param len\r\n     */\r\n    loc(direction, len, out) {\r\n        out = out || new Vector();\r\n        direction = direction.nol();\r\n        out.x = this.x + direction.x * len;\r\n        out.y = this.y + direction.y * len;\r\n        return out;\r\n    }\r\n}\r\nexports.Vector = Vector;\r\n;\r\nexports._tempVector1 = new Vector();\r\nexports._tempVector2 = new Vector();\r\nexports._tempVector3 = new Vector();\r\nexports._tempVector4 = new Vector();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Vertices = exports.Poly = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst bound_1 = __webpack_require__(5);\r\nconst util_1 = __webpack_require__(0);\r\n// 一个顶点信息包\r\nclass Poly {\r\n    constructor(body, vertexList) {\r\n        this.id = util_1.Util.id();\r\n        this.body = body;\r\n        this.vertexList = vertexList;\r\n        this.axes = exports.Vertices.getAxes(vertexList);\r\n        this.centroid = exports.Vertices.getCentroid(vertexList);\r\n        this.bound = exports.Vertices.getBound(vertexList);\r\n    }\r\n}\r\nexports.Poly = Poly;\r\n;\r\n// 顶点操作工具\r\nexports.Vertices = {\r\n    /**\r\n     * 创造顶点信息包\r\n     * @param body 顶点所属的刚体\r\n     * @param vertices 顶点集\r\n     */\r\n    create(body, vertexList) {\r\n        return new Poly(body, vertexList);\r\n    },\r\n    /**\r\n     * 获取多边形中心点\r\n     * @param vertexList\r\n     */\r\n    getCenter(vertexList) {\r\n        let range = this.getRange(vertexList), centerX = (range.max.x + range.min.x) / 2, centerY = (range.max.y + range.min.y) / 2;\r\n        return new vector_1.Vector(centerX, centerY);\r\n    },\r\n    /**\r\n     * 获取多边形质心\r\n     * @param vertexList\r\n     */\r\n    getCentroid(vertexList) {\r\n        let area = this.getArea(vertexList), centroid = new vector_1.Vector(0, 0), cross = 0, temp, j;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            j = (i + 1) % vertexList.length;\r\n            cross = vertexList[i].cro(vertexList[j]);\r\n            temp = vertexList[i].add(vertexList[j]).scl(cross);\r\n            centroid.add(temp, centroid);\r\n        }\r\n        return centroid.scl(1 / (6 * area), centroid);\r\n    },\r\n    /**\r\n     * 获取多边形面积\r\n     * @param vertexList\r\n     */\r\n    getArea(vertexList) {\r\n        let area = 0, j = vertexList.length - 1;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            area += (vertexList[j].x - vertexList[i].x) * (vertexList[j].y + vertexList[i].y);\r\n            j = i;\r\n        }\r\n        return area / 2;\r\n    },\r\n    /**\r\n     * 获取多边形的转动惯量\r\n     * 公式来自：https://blog.csdn.net/weixin_34194702/article/details/93587529\r\n     * @param vertexList\r\n     * @param mass 质量\r\n     * @param position\r\n     */\r\n    getInertia(vertexList, mass, position) {\r\n        let numerator = 0, denominator = 0, v = vertexList, cur, next, cross;\r\n        for (let n = 0; n < v.length; n++) {\r\n            cur = v[n].sub(position, cur);\r\n            next = v[(n + 1) % v.length].sub(position, next);\r\n            cross = Math.abs(cur.cro(next));\r\n            numerator += cross * (cur.dot(cur) + cur.dot(next) + next.dot(next));\r\n            denominator += cross;\r\n        }\r\n        return (mass / 6) * (numerator / denominator);\r\n    },\r\n    /**\r\n     * 求顶点围成的所有面的轴\r\n     * @param vertexList\r\n     */\r\n    getAxes(vertexList) {\r\n        let v = vertexList, axis, axes = [], i, j;\r\n        for (i = 0; i < v.length; i++) {\r\n            j = (i + 1) % v.length;\r\n            axis = v[j].sub(v[i]).nor().nol();\r\n            axes.push({\r\n                value: axis,\r\n                opposite: null,\r\n                origin: vertexList,\r\n                supportVertexIndex: null,\r\n                oppositeVertexIndex: null,\r\n                edge: {\r\n                    start: v[i],\r\n                    end: v[j]\r\n                }\r\n            });\r\n        }\r\n        return axes;\r\n    },\r\n    /**\r\n     * 获取顶点集的范围\r\n     * @param vertexList\r\n     */\r\n    getRange(vertexList) {\r\n        let xList = vertexList.map(v => v.x), yList = vertexList.map(v => v.y);\r\n        return {\r\n            min: new vector_1.Vector(Math.min.apply(Math, xList), Math.min.apply(Math, yList)),\r\n            max: new vector_1.Vector(Math.max.apply(Math, xList), Math.max.apply(Math, yList))\r\n        };\r\n    },\r\n    /**\r\n     * 获取顶点集形成的包围盒\r\n     * @param vertexList\r\n     */\r\n    getBound(vertexList) {\r\n        let range = exports.Vertices.getRange(vertexList);\r\n        return new bound_1.Bound(range.min, range.max);\r\n    },\r\n    /**\r\n     * 使用斜率筛去共线的轴\r\n     * @param axes 要筛选的轴\r\n     */\r\n    uniqueAxes(axes) {\r\n        let axisVector, tmpAxes = [], axesTable = {}, i, gradient;\r\n        for (i = 0; i < axes.length; i++) {\r\n            axisVector = axes[i].value;\r\n            gradient = (axisVector.y === 0) ? Infinity : (axisVector.x / axisVector.y);\r\n            // 限制精度\r\n            gradient = gradient.toFixed(3).toString();\r\n            axesTable[gradient] = axes[i];\r\n        }\r\n        Object.keys(axesTable).map(item => {\r\n            tmpAxes.push(axesTable[item]);\r\n        });\r\n        return tmpAxes;\r\n    },\r\n    /**\r\n     * 旋转顶点\r\n     * @param poly 多边形\r\n     * @param radian 弧度\r\n     * @param point 绕点\r\n     */\r\n    rotate(poly, radian, point) {\r\n        let vertexList = poly.vertexList, axes = poly.axes, i;\r\n        // 转动顶点\r\n        for (i = 0; i < vertexList.length; i++) {\r\n            vertexList[i].rot(radian, point, vertexList[i]);\r\n        }\r\n        // 转动轴\r\n        for (i = 0; i < axes.length; i++) {\r\n            axes[i].value.rot(radian, null, axes[i].value);\r\n        }\r\n        // 更新几何中心\r\n        poly.centroid.rot(radian, point, poly.centroid);\r\n        // 更新包围盒\r\n        poly.bound.update(poly.vertexList);\r\n    },\r\n    /**\r\n     * 位移顶点\r\n     * @param poly 多边形\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(poly, dx, dy) {\r\n        let v = poly.vertexList, i;\r\n        // 位移顶点\r\n        for (i = 0; i < v.length; i++) {\r\n            v[i].x += dx;\r\n            v[i].y += dy;\r\n        }\r\n        poly.centroid.x += dx;\r\n        poly.centroid.y += dy;\r\n        // 位移包围盒\r\n        poly.bound.translate(dx, dy);\r\n    },\r\n    /**\r\n     * 将凹多边形分解为多个子凸多边形\r\n     * @param poly\r\n     */\r\n    divide(poly) {\r\n        // 将拆分出来的多边形保存到这个数组\r\n        let parts = [], v = poly.vertexList.slice(0), partA, partB, vertexListA, vertexListB, axes = poly.axes.slice(0), axesA = [], axesB = [], xAxis, vTest, vDiv, dividePointA, dividePointB, len = v.length, i, j, cur, next, next2, flag = false;\r\n        for (i = 0; i < len; i++) {\r\n            cur = i;\r\n            next = (i + 1) % len;\r\n            next2 = (i + 2) % len;\r\n            xAxis = v[next].sub(v[cur]);\r\n            vTest = v[next2].sub(v[cur]);\r\n            if (xAxis.cro(vTest) < 0) {\r\n                for (j = i + 3; j < len; j++) {\r\n                    vDiv = v[j].sub(v[cur]);\r\n                    if (xAxis.cro(vDiv) > 0) {\r\n                        flag = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (flag)\r\n                    break;\r\n            }\r\n        }\r\n        // 获取两个分割点\r\n        dividePointA = v[next],\r\n            dividePointB = v[j];\r\n        // 拆分为两个多边形vertexListA和vertexListB\r\n        vertexListB = v.splice(next2, j - next2);\r\n        vertexListA = v;\r\n        vertexListB.unshift(dividePointA);\r\n        vertexListB.push(dividePointB);\r\n        // 将轴分别提取到两个图形中\r\n        for (i = 0; i < axes.length; i++) {\r\n            if (i >= next && i < j) {\r\n                axesB.push(axes[i]);\r\n            }\r\n            else {\r\n                axesA.push(axes[i]);\r\n            }\r\n        }\r\n        axesB.push(null);\r\n        axesA.splice(next, 0, null);\r\n        partA = exports.Vertices.create(poly.body, vertexListA);\r\n        partB = exports.Vertices.create(poly.body, vertexListB);\r\n        partA.axes = axesA;\r\n        partB.axes = axesB;\r\n        // 检测拆分出来的两个多边形是否是凹多边形，若果是，继续递归拆分\r\n        if (this.isConcave(vertexListA)) {\r\n            parts.push(...this.divide(partA));\r\n        }\r\n        else {\r\n            parts.push(partA);\r\n        }\r\n        if (this.isConcave(vertexListB)) {\r\n            parts.push(...this.divide(partB));\r\n        }\r\n        else {\r\n            parts.push(partB);\r\n        }\r\n        return parts;\r\n    },\r\n    /**\r\n     * 判断是否包含顶点（射线法）\r\n     * 参考：https://www.cnblogs.com/anningwang/p/7581545.html\r\n     * @param vertexList\r\n     * @param point 检测的顶点\r\n     */\r\n    isContains(vertexList, point) {\r\n        let v = vertexList, cur, next, len = vertexList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            cur = v[i], next = v[(i + 1) % len];\r\n            if ((point.x - cur.x) * (next.y - cur.y) + (point.y - cur.y) * (cur.x - next.x) > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    /**\r\n     * 判断是否为凹多边形\r\n     * @param vertexList\r\n     */\r\n    isConcave(vertexList) {\r\n        let v = vertexList, \r\n        // 上两向量间的叉积\r\n        prevCor, \r\n        // 当前两向量的叉积\r\n        curCor, \r\n        // 上一顶点到当前顶点的向量\r\n        prev2Cur, \r\n        // 当前顶点到下一顶点的向量\r\n        cur2Next, len = v.length, i, j, k;\r\n        for (i = 1; i < len; i++) {\r\n            j = i - 1;\r\n            k = (i + 1) % len;\r\n            prev2Cur = v[i].sub(v[j]);\r\n            cur2Next = v[k].sub(v[i]);\r\n            // 计算向量叉积\r\n            curCor = prev2Cur.cro(cur2Next) >= 0 ? 1 : -1;\r\n            if (prevCor !== undefined && prevCor !== curCor) {\r\n                return true;\r\n            }\r\n            prevCor = curCor;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * 转换到世界坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2World(point, vertexList) {\r\n        return vertexList.map(v => v.add(point, v));\r\n    },\r\n    /**\r\n     * 转换到本地坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2Local(point, vertexList) {\r\n        return vertexList.map(v => v.sub(point, v));\r\n    },\r\n    /**\r\n     * 求多边形在某个轴的投影\r\n     * @param vertexList\r\n     * @param axis 投影轴\r\n     */\r\n    projection(vertexList, axis) {\r\n        let projection, minProjection = Infinity, maxProjection = -Infinity;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            projection = vertexList[i].dot(axis);\r\n            if (projection < minProjection) {\r\n                minProjection = projection;\r\n            }\r\n            if (projection > maxProjection) {\r\n                maxProjection = projection;\r\n            }\r\n        }\r\n        return {\r\n            min: minProjection,\r\n            max: maxProjection\r\n        };\r\n    },\r\n    /**\r\n     * 计算顶点集中离给定点最近的顶点\r\n     * @param point 给定点\r\n     * @param vertexList 顶点集\r\n     */\r\n    getClosestVertex(point, vertexList) {\r\n        let v = vertexList, i, min = Infinity, length, index, len = v.length;\r\n        for (i = 0; i < len; i++) {\r\n            length = v[i].sub(point).len();\r\n            if (length < min) {\r\n                min = length;\r\n                index = i;\r\n            }\r\n        }\r\n        return vertexList[index];\r\n    },\r\n    /**\r\n     * 寻找顶点集中所有凹点\r\n     * @param vertexList\r\n     */\r\n    findCaves(vertexList) {\r\n        let caves = [], v = vertexList, prevVertex, curVertex, nextVertex, len = v.length, i;\r\n        for (i = 1; i < len; i++) {\r\n            prevVertex = v[i - 1];\r\n            curVertex = v[i];\r\n            nextVertex = v[(i + 1) % len];\r\n            // 利用叉乘判断\r\n            if (curVertex.sub(prevVertex).cro(nextVertex.sub(curVertex)) < 0) {\r\n                caves.push(curVertex);\r\n            }\r\n        }\r\n        return caves;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ContactConstraint = exports.Contact = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\n// 接触约束\r\nclass Contact {\r\n    constructor(vertex, depth) {\r\n        this.position = vertex;\r\n        this.shareNormal = 0;\r\n        this.shareTangent = 0;\r\n        this.inverseMass = 0;\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.depth = depth;\r\n        this.bias = 0;\r\n    }\r\n}\r\nexports.Contact = Contact;\r\n/**\r\n * 碰撞求解器\r\n */\r\nclass ContactConstraint {\r\n    constructor() {\r\n        this.iterations = 20;\r\n        this.slop = 0.02;\r\n        this.biasFactor = 0.2;\r\n    }\r\n    /**\r\n     * 创建一个接触约束\r\n     * @param vertex\r\n     * @param depth\r\n     */\r\n    create(vertex, depth) {\r\n        return new Contact(vertex, depth);\r\n    }\r\n    /**\r\n     * 求解接触约束\r\n     * @param manifolds\r\n     * @param dt\r\n     */\r\n    solve(manifolds, dt) {\r\n        this.preSolveVelocity(manifolds, dt);\r\n        for (let i = 0; i < this.iterations; i++) {\r\n            this.solveVelocity(manifolds, dt);\r\n        }\r\n    }\r\n    /**\r\n     * 预处理\r\n     * @param manifolds 碰撞流形\r\n     * @param dt 步长\r\n     */\r\n    preSolveVelocity(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, i, j;\r\n        for (i = 0; i < manifolds.length; ++i) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                // 接触点到刚体A质心的距离\r\n                contact.offsetA = contact.position.sub(bodyA.position),\r\n                    // 接触点到刚体B质心的距离\r\n                    contact.offsetB = contact.position.sub(bodyB.position);\r\n                let invMassNormal = manifold.inverseMass, invMassTangent = manifold.inverseMass, r1 = contact.offsetA, r2 = contact.offsetB, rn1 = contact.offsetA.dot(normal), rn2 = contact.offsetB.dot(normal), rt1 = contact.offsetA.dot(tangent), rt2 = contact.offsetB.dot(tangent);\r\n                // 计算 J(M^-1)(J^T).\r\n                invMassNormal += bodyA.invInertia * (r1.dot(r1) - rn1 * rn1);\r\n                invMassNormal += bodyB.invInertia * (r2.dot(r2) - rn2 * rn2);\r\n                invMassTangent += bodyA.invInertia * (r1.dot(r1) - rt1 * rt1);\r\n                invMassTangent += bodyB.invInertia * (r2.dot(r2) - rt2 * rt2);\r\n                // 保存 J(M^-1)(J^T)得倒数\r\n                contact.shareNormal = 1 / invMassNormal;\r\n                contact.shareTangent = 1 / invMassTangent;\r\n                contact.bias = this.biasFactor * (1 / dt) * Math.max(0, contact.depth - this.slop);\r\n                // warm start\r\n                if (contact.normalImpulse !== 0 || contact.tangentImpulse !== 0) {\r\n                    let p = vector_1._tempVector3;\r\n                    p.x = normal.x * contact.normalImpulse + tangent.x * contact.tangentImpulse;\r\n                    p.y = normal.y * contact.normalImpulse + tangent.y * contact.tangentImpulse;\r\n                    bodyA.applyImpulse(p, contact.offsetA, dt);\r\n                    bodyB.applyImpulse(p.inv(p), contact.offsetB, dt);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 正式处理\r\n     * 使用sequential impulse进行快速收敛\r\n     * 参考：https://kevinyu.net/2018/01/17/understanding-constraint-solver-in-physics-engine/\r\n     * @param manifolds\r\n     * @private dt\r\n     */\r\n    solveVelocity(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, normalImpulse, tangentImpulse, maxFriction, velocityPointA, // 刚体A质心相对碰撞点的速度\r\n        velocityPointB, // 刚体B质心相对碰撞点的速度\r\n        relativeVelocity, // 相对速度\r\n        relativeNormalVelocity, relativeTangentVelocity, impulse = vector_1._tempVector3, i, j;\r\n        for (i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算法向相对速度\r\n                relativeNormalVelocity = normal.dot(relativeVelocity);\r\n                // 计算法向冲量\r\n                normalImpulse = manifold.restitution * (relativeNormalVelocity + contact.bias) * contact.shareNormal;\r\n                // sequential impulse方法，收敛法向冲量\r\n                let oldNormalImpulse = contact.normalImpulse;\r\n                contact.normalImpulse = Math.max(contact.normalImpulse + normalImpulse, 0);\r\n                normalImpulse = contact.normalImpulse - oldNormalImpulse;\r\n                // 应用冲量\r\n                impulse.x = normal.x * normalImpulse;\r\n                impulse.y = normal.y * normalImpulse;\r\n                bodyA.applyImpulse(impulse, contact.offsetA, dt);\r\n                bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB, dt);\r\n                // --------------------------------------------------------------------------------------------\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算切向相对速度\r\n                relativeTangentVelocity = tangent.dot(relativeVelocity);\r\n                // 计算切向冲量\r\n                tangentImpulse = relativeTangentVelocity * contact.shareTangent;\r\n                // 计算最大摩擦力\r\n                maxFriction = manifold.friction * contact.normalImpulse;\r\n                // sequential impulse方法，收敛切向冲量\r\n                let oldTangentImpulse = contact.tangentImpulse;\r\n                contact.tangentImpulse = util_1.Util.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\r\n                tangentImpulse = contact.tangentImpulse - oldTangentImpulse;\r\n                // 应用冲量\r\n                impulse.x = tangent.x * tangentImpulse;\r\n                impulse.y = tangent.y * tangentImpulse;\r\n                bodyA.applyImpulse(impulse, contact.offsetA, dt);\r\n                bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB, dt);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ContactConstraint = ContactConstraint;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Arcs = exports.Arc = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\nconst bound_1 = __webpack_require__(5);\r\nconst _tempDynamicAxis = {\r\n    value: null,\r\n    opposite: null,\r\n    origin: null,\r\n    supportVertexIndex: null,\r\n    oppositeVertexIndex: null,\r\n    edge: null\r\n};\r\n// 一个圆形信息包\r\nclass Arc {\r\n    constructor(body, centroid, radius) {\r\n        this.id = body.id;\r\n        this.body = body;\r\n        this.centroid = centroid;\r\n        this.radius = radius;\r\n        this.bound = exports.Arcs.getBound(centroid, radius);\r\n    }\r\n}\r\nexports.Arc = Arc;\r\nexports.Arcs = {\r\n    /**\r\n     * 创造圆形信息包\r\n     * @param body\r\n     */\r\n    create(body) {\r\n        return new Arc(body, body.position.col(), body.radius);\r\n    },\r\n    /**\r\n     * 获取两个圆的圆心间的距离\r\n     * @param circleA\r\n     * @param circleB\r\n     */\r\n    distance(circleA, circleB) {\r\n        return circleA.centroid.sub(circleB.centroid).len();\r\n    },\r\n    /**\r\n     * 获取圆形和顶点集间的轴\r\n     * @param vertices 顶点信息\r\n     */\r\n    getAxes(circle, poly) {\r\n        let closestVertex = vertices_1.Vertices.getClosestVertex(circle.centroid, poly.vertexList);\r\n        _tempDynamicAxis.value = closestVertex.sub(circle.centroid).nol();\r\n        return _tempDynamicAxis;\r\n    },\r\n    getBound(centroid, radius) {\r\n        let min = new vector_1.Vector(centroid.x - radius, centroid.y - radius), max = new vector_1.Vector(centroid.x + radius, centroid.y + radius);\r\n        return new bound_1.Bound(min, max);\r\n    },\r\n    /**\r\n     * 获取圆形在给定轴上的投影\r\n     * @param axis\r\n     */\r\n    projection(circle, axis) {\r\n        let len = circle.centroid.pro(axis);\r\n        return {\r\n            min: len - circle.radius,\r\n            max: len + circle.radius\r\n        };\r\n    },\r\n    /**\r\n     * 查看圆形是否包含某个点\r\n     * @param circle\r\n     * @param point\r\n     */\r\n    isContains(circle, point) {\r\n        return circle.radius ** 2 - circle.centroid.sub(point).len_s() > 0;\r\n    },\r\n    /**\r\n     * 位移圆形\r\n     * @param arc\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(arc, dx, dy) {\r\n        arc.centroid.x += dx;\r\n        arc.centroid.y += dy;\r\n        // 位移包围盒\r\n        arc.bound.translate(dx, dy);\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FyY3MudHM/MjcyZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBd0M7QUFFeEMsMENBQWtEO0FBQ2xELHVDQUEyQztBQUczQyxNQUFNLGdCQUFnQixHQUFTO0lBQzNCLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsSUFBSTtJQUNaLGtCQUFrQixFQUFFLElBQUk7SUFDeEIsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QixJQUFJLEVBQUUsSUFBSTtDQUNiLENBQUM7QUFHRixVQUFVO0FBQ1YsTUFBYSxHQUFHO0lBT1osWUFBWSxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxNQUFjO1FBQ3RELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLFlBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQWRELGtCQWNDO0FBS1ksWUFBSSxHQUFHO0lBQ2hCOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxJQUFZO1FBQ2YsT0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBWSxFQUFFLE9BQVk7UUFDL0IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxNQUFXLEVBQUUsSUFBVTtRQUMzQixJQUFJLGFBQWEsR0FBRyxtQkFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWhGLGdCQUFnQixDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsRSxPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7SUFFRCxRQUFRLENBQUMsUUFBZ0IsRUFBRSxNQUFjO1FBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksZUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQzFELEdBQUcsR0FBRyxJQUFJLGVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRS9ELE9BQU8sSUFBSSxhQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVk7UUFDaEMsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEMsT0FBTztZQUNILEdBQUcsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU07WUFDeEIsR0FBRyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTTtTQUMzQixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsTUFBVyxFQUFFLEtBQWE7UUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUFDLEdBQVEsRUFBRSxFQUFVLEVBQUUsRUFBVTtRQUN0QyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXJCLFFBQVE7UUFDUixHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNKLENBQUMiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tIFwiLi4vYm9keS9jaXJjbGVcIjtcclxuaW1wb3J0IHsgQXhpcywgUG9seSwgVmVydGljZXMgfSBmcm9tIFwiLi92ZXJ0aWNlc1wiO1xyXG5pbXBvcnQgeyBCb3VuZCB9IGZyb20gXCIuLi9jb2xsaXNpb24vYm91bmRcIjtcclxuXHJcblxyXG5jb25zdCBfdGVtcER5bmFtaWNBeGlzOiBBeGlzID0ge1xyXG4gICAgdmFsdWU6IG51bGwsXHJcbiAgICBvcHBvc2l0ZTogbnVsbCxcclxuICAgIG9yaWdpbjogbnVsbCxcclxuICAgIHN1cHBvcnRWZXJ0ZXhJbmRleDogbnVsbCxcclxuICAgIG9wcG9zaXRlVmVydGV4SW5kZXg6IG51bGwsXHJcbiAgICBlZGdlOiBudWxsXHJcbn07XHJcblxyXG5cclxuLy8g5LiA5Liq5ZyG5b2i5L+h5oGv5YyFXHJcbmV4cG9ydCBjbGFzcyBBcmMge1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIGNlbnRyb2lkOiBWZWN0b3I7XHJcbiAgICByYWRpdXM6IG51bWJlcjtcclxuICAgIGJvZHk6IENpcmNsZTtcclxuICAgIGJvdW5kOiBCb3VuZDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihib2R5OiBDaXJjbGUsIGNlbnRyb2lkOiBWZWN0b3IsIHJhZGl1czogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGJvZHkuaWQ7XHJcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcclxuICAgICAgICB0aGlzLmNlbnRyb2lkID0gY2VudHJvaWQ7XHJcbiAgICAgICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XHJcbiAgICAgICAgdGhpcy5ib3VuZCA9IEFyY3MuZ2V0Qm91bmQoY2VudHJvaWQsIHJhZGl1cyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBBcmNzID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDlnIblvaLkv6Hmga/ljIVcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICBjcmVhdGUoYm9keTogQ2lyY2xlKTogQXJjIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFyYyhib2R5LCBib2R5LnBvc2l0aW9uLmNvbCgpLCBib2R5LnJhZGl1cyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5Lik5Liq5ZyG55qE5ZyG5b+D6Ze055qE6Led56a7XHJcbiAgICAgKiBAcGFyYW0gY2lyY2xlQSBcclxuICAgICAqIEBwYXJhbSBjaXJjbGVCIFxyXG4gICAgICovXHJcbiAgICBkaXN0YW5jZShjaXJjbGVBOiBBcmMsIGNpcmNsZUI6IEFyYyk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIGNpcmNsZUEuY2VudHJvaWQuc3ViKGNpcmNsZUIuY2VudHJvaWQpLmxlbigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWchuW9ouWSjOmhtueCuembhumXtOeahOi9tFxyXG4gICAgICogQHBhcmFtIHZlcnRpY2VzIOmhtueCueS/oeaBr1xyXG4gICAgICovXHJcbiAgICBnZXRBeGVzKGNpcmNsZTogQXJjLCBwb2x5OiBQb2x5KTogQXhpcyB7XHJcbiAgICAgICAgbGV0IGNsb3Nlc3RWZXJ0ZXggPSBWZXJ0aWNlcy5nZXRDbG9zZXN0VmVydGV4KGNpcmNsZS5jZW50cm9pZCwgcG9seS52ZXJ0ZXhMaXN0KTtcclxuXHJcbiAgICAgICAgX3RlbXBEeW5hbWljQXhpcy52YWx1ZSA9IGNsb3Nlc3RWZXJ0ZXguc3ViKGNpcmNsZS5jZW50cm9pZCkubm9sKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBfdGVtcER5bmFtaWNBeGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXRCb3VuZChjZW50cm9pZDogVmVjdG9yLCByYWRpdXM6IG51bWJlcik6IEJvdW5kIHtcclxuICAgICAgICBsZXQgbWluID0gbmV3IFZlY3RvcihjZW50cm9pZC54IC0gcmFkaXVzLCBjZW50cm9pZC55IC0gcmFkaXVzKSxcclxuICAgICAgICAgICAgbWF4ID0gbmV3IFZlY3RvcihjZW50cm9pZC54ICsgcmFkaXVzLCBjZW50cm9pZC55ICsgcmFkaXVzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBCb3VuZChtaW4sIG1heCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5ZyG5b2i5Zyo57uZ5a6a6L205LiK55qE5oqV5b2xXHJcbiAgICAgKiBAcGFyYW0gYXhpcyBcclxuICAgICAqL1xyXG4gICAgcHJvamVjdGlvbihjaXJjbGU6IEFyYywgYXhpczogVmVjdG9yKToge21pbjogbnVtYmVyLCBtYXg6IG51bWJlcn0ge1xyXG4gICAgICAgIGxldCBsZW4gPSBjaXJjbGUuY2VudHJvaWQucHJvKGF4aXMpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtaW46IGxlbiAtIGNpcmNsZS5yYWRpdXMsXHJcbiAgICAgICAgICAgIG1heDogbGVuICsgY2lyY2xlLnJhZGl1c1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p+l55yL5ZyG5b2i5piv5ZCm5YyF5ZCr5p+Q5Liq54K5XHJcbiAgICAgKiBAcGFyYW0gY2lyY2xlIFxyXG4gICAgICogQHBhcmFtIHBvaW50IFxyXG4gICAgICovXHJcbiAgICBpc0NvbnRhaW5zKGNpcmNsZTogQXJjLCBwb2ludDogVmVjdG9yKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGNpcmNsZS5yYWRpdXMgKiogMiAtIGNpcmNsZS5jZW50cm9pZC5zdWIocG9pbnQpLmxlbl9zKCkgPiAwOyBcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkvY3np7vlnIblvaJcclxuICAgICAqIEBwYXJhbSBhcmNcclxuICAgICAqIEBwYXJhbSBkeFxyXG4gICAgICogQHBhcmFtIGR5XHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZShhcmM6IEFyYywgZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xyXG4gICAgICAgIGFyYy5jZW50cm9pZC54ICs9IGR4O1xyXG4gICAgICAgIGFyYy5jZW50cm9pZC55ICs9IGR5O1xyXG5cclxuICAgICAgICAvLyDkvY3np7vljIXlm7Tnm5JcclxuICAgICAgICBhcmMuYm91bmQudHJhbnNsYXRlKGR4LCBkeSk7XHJcbiAgICB9XHJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Bound = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\n// AABB包围盒（速度扩展的）\r\nclass Bound {\r\n    constructor(min, max) {\r\n        this.min = new vector_1.Vector();\r\n        this.max = new vector_1.Vector();\r\n        this.set(min, max);\r\n    }\r\n    /**\r\n     * 设置包围盒范围\r\n     *\r\n     *  min ----------|\r\n     *   |            |\r\n     *   |            |\r\n     *   | --------- max\r\n     *\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    set(min, max) {\r\n        this.min.x = min.x;\r\n        this.min.y = min.y;\r\n        this.max.x = max.x;\r\n        this.max.y = max.y;\r\n    }\r\n    /**\r\n     * 位移包围盒\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(dx, dy) {\r\n        this.min.x += dx;\r\n        this.min.y += dy;\r\n        this.max.x += dx;\r\n        this.max.y += dy;\r\n    }\r\n    /**\r\n     * 更新包围盒（通常发生在刚体发生旋转，min和max都要重新计算）\r\n     * @param vertexList\r\n     */\r\n    update(vertexList) {\r\n        let range = vertices_1.Vertices.getRange(vertexList);\r\n        this.min.x = range.min.x;\r\n        this.min.y = range.min.y;\r\n        this.max.x = range.max.x;\r\n        this.max.y = range.max.y;\r\n    }\r\n    /**\r\n     * 两包围盒求交集\r\n     * @param b\r\n     */\r\n    intersect(b) {\r\n        let x, y, maxX, maxY, overlapsX, overlapsY;\r\n        x = Math.max(this.min.x, b.min.x);\r\n        maxX = Math.min(this.max.x, b.max.x);\r\n        y = Math.max(this.min.y, b.min.y);\r\n        maxY = Math.min(this.max.y, b.max.y);\r\n        overlapsX = maxX - x;\r\n        overlapsY = maxY - y;\r\n        if (overlapsX < 0 || overlapsY < 0)\r\n            return null;\r\n        vector_1._tempVector1.x = x;\r\n        vector_1._tempVector1.y = y;\r\n        vector_1._tempVector2.x = x + overlapsX;\r\n        vector_1._tempVector2.y = y + overlapsY;\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 求多个包围盒的并集\r\n     * @param arg\r\n     */\r\n    union(bound) {\r\n        let min = vector_1._tempVector1, max = vector_1._tempVector2;\r\n        min.x = Math.min(this.min.x, bound.min.x);\r\n        min.y = Math.min(this.min.x, bound.min.x);\r\n        max.x = Math.max(this.max.y, bound.max.y);\r\n        max.y = Math.max(this.max.y, bound.max.y);\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 判断与另一个包围盒是否相交\r\n     * @param bound\r\n     */\r\n    isIntersect(bound) {\r\n        return (this.min.x < bound.max.x && this.max.x > bound.min.x) && (this.min.y < bound.max.y && bound.min.y < this.max.y);\r\n    }\r\n    /**\r\n     * 求一个包围盒是否包含另一个包围盒\r\n     * @param bound\r\n     */\r\n    isContains(bound) {\r\n        return this.min.x <= bound.min.x &&\r\n            this.min.y <= bound.min.y &&\r\n            this.max.x >= bound.max.x &&\r\n            this.max.y >= bound.max.y;\r\n    }\r\n    /**\r\n     * 查看点是否在包围盒中\r\n     * @param point\r\n     */\r\n    contains(point) {\r\n        return point.x >= this.min.x &&\r\n            point.x <= this.max.x &&\r\n            point.y >= this.min.y &&\r\n            point.y <= this.max.y;\r\n    }\r\n}\r\nexports.Bound = Bound;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Manifold = exports.Collision = void 0;\r\nconst util_1 = __webpack_require__(0);\r\n/**\r\n * 一个碰撞结构，包含了碰撞的所有信息\r\n */\r\nclass Collision {\r\n    constructor() {\r\n        // 分离轴\r\n        this.axis = {\r\n            value: null,\r\n            oppositeVertexIndex: null,\r\n            supportVertexIndex: null,\r\n            opposite: null,\r\n            origin: null,\r\n            edge: null\r\n        };\r\n    }\r\n}\r\nexports.Collision = Collision;\r\n;\r\n/**\r\n * 碰撞流形\r\n * 主要用于记录相互碰撞的刚体和进行碰撞缓存\r\n */\r\nclass Manifold {\r\n    constructor(collision, timeStamp) {\r\n        this.bodyA = collision.bodyA;\r\n        this.bodyB = collision.bodyB;\r\n        this.partA = collision.partA;\r\n        this.partB = collision.partB;\r\n        this.id = util_1.Util.compositeId(this.partA.id, this.partB.id);\r\n        this.collision = collision;\r\n        this.isActive = true;\r\n        this.confirmedActive = true;\r\n        this.timeCreated = timeStamp;\r\n        this.timeUpdated = timeStamp;\r\n        this.friction = 0;\r\n        this.restitution = 0;\r\n        this.inverseMass = 0;\r\n        this.update(collision, timeStamp);\r\n    }\r\n    /**\r\n     * 更新流形\r\n     * @param collision 碰撞信息\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(collision, timeStamp) {\r\n        this.collision = collision;\r\n        // 如果该碰撞对真的发生了碰撞\r\n        if (collision.collide) {\r\n            let bodyA, bodyB;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            this.friction = Math.sqrt(bodyA.friction * bodyB.friction);\r\n            this.restitution = (bodyA.restitution + bodyB.restitution) / 2;\r\n            this.inverseMass = bodyA.invMass + bodyB.invMass;\r\n            this.toggleActive(true, timeStamp);\r\n        }\r\n        // 否则\r\n        else {\r\n            this.isActive && this.toggleActive(false, timeStamp);\r\n        }\r\n    }\r\n    /**\r\n     * 更改流形激活状态\r\n     * @param active 激活状态\r\n     * @param timeStamp 时间戳\r\n     */\r\n    toggleActive(active, timeStamp) {\r\n        this.isActive = active;\r\n        if (active) {\r\n            this.timeUpdated = timeStamp;\r\n        }\r\n    }\r\n}\r\nexports.Manifold = Manifold;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL21hbmlmb2xkLnRzP2JiZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsc0NBQXNDO0FBYXRDOztHQUVHO0FBRUgsTUFBYSxTQUFTO0lBQXRCO1FBU0ksTUFBTTtRQUNOLFNBQUksR0FBUztZQUNULEtBQUssRUFBRSxJQUFJO1lBQ1gsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUM7SUFXTixDQUFDO0NBQUE7QUE1QkQsOEJBNEJDO0FBQUEsQ0FBQztBQUdGOzs7R0FHRztBQUNILE1BQWEsUUFBUTtJQTJCakIsWUFBWSxTQUFvQixFQUFFLFNBQWlCO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsRUFBRSxHQUFHLFdBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFvQixFQUFFLFNBQWlCO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBRTNCLGdCQUFnQjtRQUNoQixJQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxLQUFXLEVBQUUsS0FBVyxDQUFDO1lBRTdCLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3hCLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1lBRWpELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsS0FBSzthQUNBO1lBQ0QsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsWUFBWSxDQUFDLE1BQWUsRUFBRSxTQUFpQjtRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUV2QixJQUFHLE1BQU0sRUFBRTtZQUNQLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztDQUNKO0FBcEZELDRCQW9GQyIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQXhpcywgUG9seSwgVmVydGV4TGlzdCB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgQXJjIH0gZnJvbSBcIi4uL2NvbW1vbi9hcmNzXCI7XHJcbmltcG9ydCB7IENvbnRhY3QgfSBmcm9tIFwiLi4vY29uc3RyYWludC9jb250YWN0XCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIOeisOaSnuS/oeaBr++8jOeisOaSnua1geW9ou+8jOaOpeinpueCuVxyXG4gKi9cclxuXHJcbmV4cG9ydCB0eXBlIEdlb21ldHJ5ID0gUG9seSB8IEFyYztcclxuXHJcblxyXG4vKipcclxuICog5LiA5Liq56Kw5pKe57uT5p6E77yM5YyF5ZCr5LqG56Kw5pKe55qE5omA5pyJ5L+h5oGvXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxpc2lvbiB7XHJcbiAgICAvLyDnorDmkp7liJrkvZNBXHJcbiAgICBib2R5QTogQm9keTtcclxuICAgIC8vIOeisOaSnuWImuS9k0JcclxuICAgIGJvZHlCOiBCb2R5O1xyXG4gICAgLy8g56Kw5pKe5a2Q5Zu+5b2iQVxyXG4gICAgcGFydEE6IEdlb21ldHJ5O1xyXG4gICAgLy8g56Kw5pKe5a2Q5Zu+5b2iQlxyXG4gICAgcGFydEI6IEdlb21ldHJ5O1xyXG4gICAgLy8g5YiG56a76L20XHJcbiAgICBheGlzOiBBeGlzID0ge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIG9wcG9zaXRlVmVydGV4SW5kZXg6IG51bGwsXHJcbiAgICAgICAgc3VwcG9ydFZlcnRleEluZGV4OiBudWxsLFxyXG4gICAgICAgIG9wcG9zaXRlOiBudWxsLFxyXG4gICAgICAgIG9yaWdpbjogbnVsbCxcclxuICAgICAgICBlZGdlOiBudWxsXHJcbiAgICB9O1xyXG4gICAgLy8g56Kw5pKe5rOV57q/XHJcbiAgICBub3JtYWw6IFZlY3RvcjtcclxuICAgIC8vIOeisOaSnuWIh+e6v1xyXG4gICAgdGFuZ2VudDogVmVjdG9yO1xyXG4gICAgLy8g5o6l6Kem54K5XHJcbiAgICBjb250YWN0czogQ29udGFjdFtdO1xyXG4gICAgLy8g5a+55L2N5aSa6L655b2i5Zyo5rOV57q/5pa55ZCR5LiK5pyA5o6l6L+R5pys5aSa6L655b2i55qE6aG254K555qE5LiL5qCHXHJcbiAgICBvcHBvc2l0ZUNsb3Nlc3RJbmRleDogbnVtYmVyO1xyXG4gICAgLy8g5piv5ZCm5Y+R55Sf5LqG56Kw5pKeXHJcbiAgICBjb2xsaWRlOiBib29sZWFuO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiDnorDmkp7mtYHlvaJcclxuICog5Li76KaB55So5LqO6K6w5b2V55u45LqS56Kw5pKe55qE5Yia5L2T5ZKM6L+b6KGM56Kw5pKe57yT5a2YXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWFuaWZvbGQge1xyXG4gICAgLy8gaWRcclxuICAgIGlkOiBzdHJpbmc7XHJcblxyXG4gICAgYm9keUE6IEJvZHk7XHJcbiAgICBib2R5QjogQm9keTtcclxuICAgIHBhcnRBOiBHZW9tZXRyeTtcclxuICAgIHBhcnRCOiBHZW9tZXRyeTtcclxuICAgIC8vIOeisOaSnuS/oeaBr1xyXG4gICAgY29sbGlzaW9uOiBDb2xsaXNpb247XHJcbiAgICAvLyDmv4DmtLvnirbmgIFcclxuICAgIC8vIOa/gOa0u+eKtuaAgeeahOaEj+aAneWNs+S4iuS4gOasoeabtOaWsOaXtua1geW9ouaYr+WQpuWPkeeUn+eisOaSnu+8jOiLpeaYr++8jOWImeihqOekuuivpea1geW9ouWcqOa/gOa0u+eKtuaAgVxyXG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XHJcbiAgICAvLyDnoa7orqTmv4DmtLvnirbmgIFcclxuICAgIC8vIOehruiupOa/gOa0u+eKtuaAgeaEj+aAneWNs+aYr+W9k+WJjeabtOaWsOaXtua1geW9ouaYr+WQpua/gOa0u1xyXG4gICAgY29uZmlybWVkQWN0aXZlOiBib29sZWFuO1xyXG4gICAgLy8g5rWB5b2i5Yib5bu65pe26Ze0XHJcbiAgICB0aW1lQ3JlYXRlZDogbnVtYmVyO1xyXG4gICAgLy8g5rWB5b2i5pu05paw5pe26Ze0XHJcbiAgICB0aW1lVXBkYXRlZDogbnVtYmVyO1xyXG4gICAgLy8g5pGp5pOm5YqbXHJcbiAgICBmcmljdGlvbjogbnVtYmVyO1xyXG4gICAgLy8g5oGi5aSN57O75pWwXHJcbiAgICByZXN0aXR1dGlvbjogbnVtYmVyO1xyXG4gICAgLy8g6LSo6YeP5ZKM5YCS5pWwXHJcbiAgICBpbnZlcnNlTWFzczogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbGxpc2lvbjogQ29sbGlzaW9uLCB0aW1lU3RhbXA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuYm9keUEgPSBjb2xsaXNpb24uYm9keUE7XHJcbiAgICAgICAgdGhpcy5ib2R5QiA9IGNvbGxpc2lvbi5ib2R5QjtcclxuICAgICAgICB0aGlzLnBhcnRBID0gY29sbGlzaW9uLnBhcnRBO1xyXG4gICAgICAgIHRoaXMucGFydEIgPSBjb2xsaXNpb24ucGFydEI7XHJcbiAgICAgICAgdGhpcy5pZCA9IFV0aWwuY29tcG9zaXRlSWQodGhpcy5wYXJ0QS5pZCwgdGhpcy5wYXJ0Qi5pZCk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb24gPSBjb2xsaXNpb247XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb25maXJtZWRBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudGltZUNyZWF0ZWQgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgdGhpcy50aW1lVXBkYXRlZCA9IHRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLmZyaWN0aW9uID0gMDtcclxuICAgICAgICB0aGlzLnJlc3RpdHV0aW9uID0gMDtcclxuICAgICAgICB0aGlzLmludmVyc2VNYXNzID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoY29sbGlzaW9uLCB0aW1lU3RhbXApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05paw5rWB5b2iXHJcbiAgICAgKiBAcGFyYW0gY29sbGlzaW9uIOeisOaSnuS/oeaBr1xyXG4gICAgICogQHBhcmFtIHRpbWVTdGFtcCDml7bpl7TmiLNcclxuICAgICAqL1xyXG4gICAgdXBkYXRlKGNvbGxpc2lvbjogQ29sbGlzaW9uLCB0aW1lU3RhbXA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uID0gY29sbGlzaW9uO1xyXG5cclxuICAgICAgICAvLyDlpoLmnpzor6XnorDmkp7lr7nnnJ/nmoTlj5HnlJ/kuobnorDmkp5cclxuICAgICAgICBpZihjb2xsaXNpb24uY29sbGlkZSkge1xyXG4gICAgICAgICAgICBsZXQgYm9keUE6IEJvZHksIGJvZHlCOiBCb2R5O1xyXG5cclxuICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUE7XHJcbiAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mcmljdGlvbiA9IE1hdGguc3FydChib2R5QS5mcmljdGlvbiAqIGJvZHlCLmZyaWN0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5yZXN0aXR1dGlvbiA9IChib2R5QS5yZXN0aXR1dGlvbiArIGJvZHlCLnJlc3RpdHV0aW9uKSAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMuaW52ZXJzZU1hc3MgPSBib2R5QS5pbnZNYXNzICsgYm9keUIuaW52TWFzcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQWN0aXZlKHRydWUsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWQpuWImVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzQWN0aXZlICYmIHRoaXMudG9nZ2xlQWN0aXZlKGZhbHNlLCB0aW1lU3RhbXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaUuea1geW9oua/gOa0u+eKtuaAgVxyXG4gICAgICogQHBhcmFtIGFjdGl2ZSDmv4DmtLvnirbmgIFcclxuICAgICAqIEBwYXJhbSB0aW1lU3RhbXAg5pe26Ze05oizXHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZUFjdGl2ZShhY3RpdmU6IGJvb2xlYW4sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGFjdGl2ZTtcclxuXHJcbiAgICAgICAgaWYoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZVVwZGF0ZWQgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 刚体基类：所有刚体继承自Body\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Body = exports.bodyType = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\n/**\r\n * 刚体类型\r\n * 圆形：0\r\n * 多边形：1\r\n * 复合体：4\r\n */\r\nvar bodyType;\r\n(function (bodyType) {\r\n    bodyType[bodyType["circle"] = 0] = "circle";\r\n    bodyType[bodyType["polygon"] = 1] = "polygon";\r\n    bodyType[bodyType["composite"] = 3] = "composite";\r\n})(bodyType = exports.bodyType || (exports.bodyType = {}));\r\n;\r\nclass Body {\r\n    constructor(opt, type) {\r\n        this.id = util_1.Util.id();\r\n        this.stringId = this.id.toString();\r\n        this.type = type;\r\n        this.engine = null;\r\n        this.data = null;\r\n        this.origin = new vector_1.Vector(0, 0);\r\n        this.position = new vector_1.Vector(0, 0);\r\n        this.rotation = 0;\r\n        this.velocity = new vector_1.Vector(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.motion = 0;\r\n        this.mass = 10;\r\n        this.area = 0;\r\n        this.density = 1;\r\n        this.inertia = 0;\r\n        this.invInertia = 0;\r\n        this.force = new vector_1.Vector(0, 0);\r\n        this.torque = 0;\r\n        this.friction = 0.4;\r\n        this.restitution = 0.9;\r\n        this.constraint = null;\r\n        this.static = false;\r\n        this.kinetic = false;\r\n        this.sleeping = false;\r\n        this.sleepCounter = 0;\r\n        this.mask = 1;\r\n        this.parts = [];\r\n        this.bound = null;\r\n        this.contactBodies = {};\r\n        this.methods = {\r\n            filter: (maskA, maskB) => { return true; },\r\n            beforeAppend: (body) => { },\r\n            afterAppend: (body) => { },\r\n            beforeRemove: (body) => { },\r\n            afterRemove: (body) => { },\r\n            sleepStart: (body) => { },\r\n            sleepEnd: (body) => { },\r\n            onCollide: (body) => { }\r\n        };\r\n        util_1.Util.extend(this, opt);\r\n        this.init(opt);\r\n        this.area = this.getArea();\r\n        this.density = this.getDensity();\r\n        this.invMass = this.getInvMass();\r\n        this.position = this.getCentroid();\r\n        this.inertia = this.getInertia();\r\n        this.invInertia = this.getInvInertia();\r\n        this.motion = this.velocity.len() ** 2 + this.angularVelocity ** 2;\r\n        // 设置渲染函数\r\n        this.setRender(() => { });\r\n    }\r\n    /**\r\n     * 初始化一些数据\r\n     */\r\n    init(opt) { }\r\n    // ------------------------------------------- getter---------------------------------------\r\n    /**\r\n     * 计算质量倒数\r\n     */\r\n    getInvMass() {\r\n        return (this.mass === 0 || this.static || this.kinetic) ? 0 : 1 / this.mass;\r\n    }\r\n    /**\r\n     * 计算转动惯量倒数\r\n     */\r\n    getInvInertia() {\r\n        return (this.inertia === 0 || this.static || this.kinetic) ? 0 : 1 / this.inertia;\r\n    }\r\n    /**\r\n     * 计算密度\r\n     */\r\n    getDensity() {\r\n        return this.mass / this.area;\r\n    }\r\n    /**\r\n     * 计算面积\r\n     * @override\r\n     */\r\n    getArea() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 计算质心\r\n     * @override\r\n     */\r\n    getCentroid() {\r\n        return null;\r\n    }\r\n    /**\r\n     * 计算转动惯量\r\n     * @override\r\n     */\r\n    getInertia() {\r\n        return 1;\r\n    }\r\n    // ------------------------------------------- setter ---------------------------------------\r\n    /**\r\n     * 设置线速度\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setVelocity(x, y) {\r\n        this.velocity.x = x;\r\n        this.velocity.y = y;\r\n    }\r\n    /**\r\n     * 设置角速度\r\n     * @param angularVelocity\r\n     */\r\n    setAngularVelocity(angularVelocity) {\r\n        this.angularVelocity = angularVelocity;\r\n    }\r\n    /**\r\n     * 设置位置\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setPosition(x, y) {\r\n        let dx = x - this.position.x, dy = y - this.position.y;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.translate(dx, dy);\r\n    }\r\n    /**\r\n     * 设置旋转角度\r\n     * @param rotation\r\n     */\r\n    setRotation(rotation) {\r\n        this.rotation = rotation;\r\n        this.rotate(rotation, this.position);\r\n    }\r\n    /**\r\n     * 设置是否静态\r\n     * @param static\r\n     */\r\n    setStatic(sta) {\r\n        this.static = sta;\r\n    }\r\n    /**\r\n     * 设置是否运动\r\n     * @param kin\r\n     */\r\n    setKinetic(kin) {\r\n        this.kinetic = kin;\r\n    }\r\n    /**\r\n     * 设置用户想要携带的信息数据\r\n     * @param data 数据\r\n     */\r\n    setData(data) {\r\n        if (data !== null && data !== undefined) {\r\n            this.data = data;\r\n        }\r\n    }\r\n    /**\r\n     * 设置渲染函数\r\n     * @param fn\r\n     */\r\n    setRender(fn) {\r\n        if (fn && typeof fn === \'function\')\r\n            this.render = fn;\r\n    }\r\n    // ------------------------------------------- 内部方法 ----------------------------------------\r\n    /**\r\n     * 位移刚体\r\n     * @override\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(dx, dy) { }\r\n    /**\r\n     * 旋转刚体\r\n     * @override\r\n     * @param angle 角度\r\n     * @param point 绕点\r\n     */\r\n    rotate(angle, point) { }\r\n    /**\r\n     * 应用冲量\r\n     * @param impulse 冲量\r\n     * @param offset 作用点（本地坐标系）\r\n     * @param dt 步长\r\n     */\r\n    applyImpulse(impulse, offset, dt) {\r\n        if (this.static || this.kinetic || this.sleeping)\r\n            return;\r\n        this.velocity.x += impulse.x * this.invMass;\r\n        this.velocity.y += impulse.y * this.invMass;\r\n        this.angularVelocity += this.invInertia * offset.cro(impulse);\r\n    }\r\n    /**\r\n     * 应用力\r\n     * @param force 力\r\n     * @param offset 作用点（本地坐标系）\r\n     */\r\n    applyForce(force, offset) {\r\n        if (this.static || this.kinetic)\r\n            return;\r\n        this.force.x += force.x;\r\n        this.force.y += force.y;\r\n        if (offset !== undefined) {\r\n            this.torque += offset.cro(this.force);\r\n        }\r\n    }\r\n    /**\r\n     * 积分受力\r\n     * @param dt\r\n     */\r\n    integrateForces(dt) {\r\n        if (this.static || this.kinetic || this.sleeping) {\r\n            return;\r\n        }\r\n        this.velocity.x += dt * this.force.x * this.invMass;\r\n        this.velocity.y += dt * this.force.y * this.invMass;\r\n        this.angularVelocity += dt * this.torque * this.invInertia;\r\n    }\r\n    /**\r\n     * 积分速度\r\n     * - 使用隐式欧拉积分\r\n     * @param dt\r\n     */\r\n    integrateVelocities(dt) {\r\n        if (this.static || this.sleeping) {\r\n            return;\r\n        }\r\n        let dx = dt * this.velocity.x, dy = dt * this.velocity.y, dr = dt * this.angularVelocity;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.rotation += dr;\r\n        //位移刚体\r\n        this.translate(dx, dy);\r\n        // 旋转刚体\r\n        if (dr !== 0) {\r\n            this.rotate(dr, this.position);\r\n        }\r\n        // 更新标量速度\r\n        let speed = Math.hypot(dx, dy), angularSpeed = Math.abs(dr);\r\n        //更新动量\r\n        this.motion = speed * speed + angularSpeed * angularSpeed;\r\n        this.force.x = 0;\r\n        this.force.y = 0;\r\n        this.torque = 0;\r\n    }\r\n    /**\r\n     * 在每一帧结束后重置部分数据\r\n     */\r\n    reset() {\r\n        this.force.x = 0;\r\n        this.force.y = 0;\r\n    }\r\n    // ------------------------------------------------ hook ------------------------------\r\n    /**\r\n     * 绑定沟子事件\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    on(eventName, fn) {\r\n        this.methods[eventName] = fn;\r\n    }\r\n    beforeAppend(engine) {\r\n        this.engine = engine;\r\n        if (this.static) {\r\n            this.sleeping = true;\r\n            this.engine.sleeping.sleep(this);\r\n        }\r\n        this.methods.beforeAppend(this);\r\n    }\r\n    afterAppend() { this.methods.afterAppend(this); }\r\n    beforeRemove() {\r\n        let sleeping = this.engine.sleeping, keys = Object.keys(this.contactBodies);\r\n        // 在删除一个刚体前，唤醒与之有碰撞的刚体\r\n        for (let i = 0; i < keys.length; i++) {\r\n            sleeping.wake(this.contactBodies[keys[i]]);\r\n        }\r\n        this.methods.beforeRemove(this);\r\n    }\r\n    afterRemove() { this.methods.afterRemove(this); }\r\n    sleepStart() { this.methods.sleepStart(this); }\r\n    sleepEnd() { this.methods.sleepEnd(this); }\r\n    onCollide(target) {\r\n        this.contactBodies[target.stringId] = target;\r\n        // 触发碰撞钩子\r\n        this.methods.onCollide(this);\r\n    }\r\n}\r\nexports.Body = Body;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9ib2R5LnRzPzdkMzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCx3Q0FBc0Q7QUFFdEQsc0NBQXNDO0FBTXRDOzs7OztHQUtHO0FBQ0gsSUFBWSxRQUlYO0FBSkQsV0FBWSxRQUFRO0lBQ2hCLDJDQUFVO0lBQ1YsNkNBQVc7SUFDWCxpREFBYTtBQUNqQixDQUFDLEVBSlcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFJbkI7QUFBQSxDQUFDO0FBdURGLE1BQWEsSUFBSTtJQXVFYixZQUFZLEdBQVksRUFBRSxJQUFZO1FBQ2xDLElBQUksQ0FBQyxFQUFFLEdBQUcsV0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFD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QUMsQ0FBQztTQUM5QztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxXQUFXLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpELFVBQVUsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0MsUUFBUSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUzQyxTQUFTLENBQUMsTUFBWTtRQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDN0MsU0FBUztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDSjtBQS9aRCxvQkErWkMiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDliJrkvZPln7rnsbvvvJrmiYDmnInliJrkvZPnu6fmib/oh6pCb2R5XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVmVjdG9yLCBfdGVtcFZlY3RvcjEgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgQm91bmQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2JvdW5kXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSBcIi4uL2NvcmUvZW5naW5lXCI7XHJcbmltcG9ydCB7IFBvbHlnb25PcHQgfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiDliJrkvZPnsbvlnotcclxuICog5ZyG5b2i77yaMFxyXG4gKiDlpJrovrnlvaLvvJoxXHJcbiAqIOWkjeWQiOS9k++8mjRcclxuICovXHJcbmV4cG9ydCBlbnVtIGJvZHlUeXBlIHtcclxuICAgIGNpcmNsZSA9IDAsXHJcbiAgICBwb2x5Z29uID0gMSxcclxuICAgIGNvbXBvc2l0ZSA9IDNcclxufTtcclxuXHJcblxyXG5cclxuXHJcbi8vIGJvZHnphY3nva7mjqXlj6NcclxuZXhwb3J0IGludGVyZmFjZSBCb2R5T3B0IHtcclxuICAgIC8vIOWumuS9jeWOn+eCuVxyXG4gICAgb3JpZ2luOiBWZWN0b3I7XHJcbiAgICAvLyDml4vovazop5LluqZcclxuICAgIHJvdGF0aW9uPzogbnVtYmVyO1xyXG5cclxuICAgIC8vIOWIneWni+mAn+W6plxyXG4gICAgdmVsb2NpdHk/OiBWZWN0b3I7XHJcbiAgICAvLyDliJ3lp4vop5LpgJ/luqZcclxuICAgIGFuZ3VsYXJWZWxvY2l0eT86IG51bWJlcjtcclxuICAgIC8vIOi0qOmHj1xyXG4gICAgbWFzcz86IG51bWJlcjtcclxuICAgIC8vIOWKqOaRqeaTpuWKm1xyXG4gICAgZHluYW1pY0ZyaWN0aW9uPzogbnVtYmVyO1xyXG4gICAgLy8g6Z2Z5pGp5pOm5YqbXHJcbiAgICBzdGF0aWNGcmljdGlvbj86IG51bWJlcjtcclxuICAgIC8vIOaBouWkjeezu+aVsFxyXG4gICAgcmVzdGl0dXRpb24/OiBudW1iZXI7XHJcbiAgICAvLyDnuqbmnZ9cclxuICAgIGNvbnN0cmFpbnQ/OiBWZWN0b3I7XHJcbiAgICAvLyDmmK/lkKblm7rlrppcclxuICAgIGZpeGVkPzogYm9vbGVhbjtcclxuICAgIC8vIOaQuuW4pueahOaVsOaNrlxyXG4gICAgZGF0YT86IGFueTtcclxuICAgIC8vIOeisOaSnueggVxyXG4gICAgbWFzaz86IG51bWJlcjtcclxuXHJcbiAgICAvLyDmlrnms5VcclxuICAgIG1ldGhvZHM/OiB7XHJcbiAgICAgICAgLy8g56Kw5pKe6L+H5ruk5ZmoXHJcbiAgICAgICAgZmlsdGVyOiAobWFza0E6IG51bWJlciwgbWFza0I6IG51bWJlcikgPT4gYm9vbGVhbjtcclxuICAgICAgICAvLyDmjILovb3liY1cclxuICAgICAgICBiZWZvcmVBcHBlbmQ6IChib2R5OiBCb2R5KSA9PiB2b2lkO1xyXG4gICAgICAgIC8vIOaMgui9veWQjlxyXG4gICAgICAgIGFmdGVyQXBwZW5kOiAoYm9keTogQm9keSkgPT4gdm9pZDtcclxuICAgICAgICAvLyDnp7vpmaTliY1cclxuICAgICAgICBiZWZvcmVSZW1vdmU6IChib2R5OiBCb2R5KSA9PiB2b2lkO1xyXG4gICAgICAgIC8vIOenu+mZpOWQjlxyXG4gICAgICAgIGFmdGVyUmVtb3ZlOiAoYm9keTogQm9keSkgPT4gdm9pZDtcclxuICAgICAgICAvLyDlvIDlp4vkvJHnnKBcclxuICAgICAgICBzbGVlcFN0YXJ0OiAoYm9keTogQm9keSkgPT4gdm9pZDtcclxuICAgICAgICAvLyDnu5PmnZ/kvJHnnKBcclxuICAgICAgICBzbGVlcEVuZDogKGJvZHk6IEJvZHkpID0+IHZvaWQ7XHJcbiAgICAgICAgLy8g5Y+R55Sf5LqG56Kw5pKeXHJcbiAgICAgICAgb25Db2xsaWRlOiAoYm9keTogQm9keSkgPT4gdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCb2R5IHtcclxuICAgIC8vIGlkXHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgLy8g5a2X56ym5Liy55qEaWRcclxuICAgIHN0cmluZ0lkOiBzdHJpbmc7XHJcbiAgICAvLyDnsbvlnotcclxuICAgIHR5cGU6IG51bWJlcjtcclxuICAgIC8vIOW8leaTjuWunuS+i1xyXG4gICAgZW5naW5lOiBFbmdpbmU7XHJcbiAgICAvLyDmkLrluKbnmoTku7vmhI/kv6Hmga9cclxuICAgIGRhdGE6IGFueTtcclxuICAgIC8vIOacrOWcsOWdkOagh+WOn+eCuVxyXG4gICAgb3JpZ2luOiBWZWN0b3I7XHJcbiAgICAvLyDkvY3nva5cclxuICAgIHBvc2l0aW9uOiBWZWN0b3I7ICAgXHJcbiAgICAvLyDmlrnlkJEgXHJcbiAgICByb3RhdGlvbjogbnVtYmVyO1xyXG5cclxuICAgIC8vIOmAn+W6plxyXG4gICAgdmVsb2NpdHk6IFZlY3RvcjtcclxuICAgIC8vIOinkumAn+W6plxyXG4gICAgYW5ndWxhclZlbG9jaXR5OiBudW1iZXI7XHJcbiAgICAvLyDliqjph49cclxuICAgIG1vdGlvbjogbnVtYmVyO1xyXG5cclxuICAgIC8vIOi0qOmHj1xyXG4gICAgbWFzczogbnVtYmVyO1xyXG4gICAgLy8g6LSo6YeP5YCS5pWwXHJcbiAgICBpbnZNYXNzOiBudW1iZXI7XHJcbiAgICAvLyDpnaLnp69cclxuICAgIGFyZWE6IG51bWJlcjtcclxuICAgIC8vIOWvhuW6plxyXG4gICAgZGVuc2l0eTogbnVtYmVyO1xyXG4gICAgLy8g6L2s5Yqo5oOv6YePXHJcbiAgICBpbmVydGlhOiBudW1iZXI7XHJcbiAgICAvLyDovazliqjmg6/ph4/lgJLmlbBcclxuICAgIGludkluZXJ0aWE6IG51bWJlcjtcclxuICAgIC8vIOS9nOeUqOWKm1xyXG4gICAgZm9yY2U6IFZlY3RvcjtcclxuICAgIC8vIOaJreefqVxyXG4gICAgdG9ycXVlOiBudW1iZXI7XHJcbiAgICAvLyDmkanmk6bns7vmlbBcclxuICAgIGZyaWN0aW9uOiBudW1iZXI7XHJcbiAgICAvLyDmgaLlpI3ns7vmlbBcclxuICAgIHJlc3RpdHV0aW9uOiBudW1iZXI7XHJcbiAgICAvLyDnuqbmnZ/ngrlcclxuICAgIGNvbnN0cmFpbnQ6IFZlY3RvcjtcclxuICAgIC8vIOmdmeaAgeeahFxyXG4gICAgc3RhdGljOiBib29sZWFuO1xyXG4gICAgLy8g6L+Q5Yqo55qEXHJcbiAgICBraW5ldGljOiBib29sZWFuO1xyXG4gICAgLy8g5LyR55ygXHJcbiAgICBzbGVlcGluZzogYm9vbGVhbjtcclxuICAgIC8vIOS8keecoOiuoeaVsOWZqFxyXG4gICAgc2xlZXBDb3VudGVyOiBudW1iZXI7XHJcbiAgICAvLyDnorDmkp7noIFcclxuICAgIG1hc2s6IG51bWJlcjtcclxuICAgIC8vIOWtkOWbvuW9olxyXG4gICAgcGFydHM7XHJcbiAgICAvLyDljIXlm7Tnm5JcclxuICAgIGJvdW5kOiBCb3VuZDtcclxuICAgIC8vIOS4juivpeWImuS9k+eisOaSnueahOWImuS9k+WIl+ihqFxyXG4gICAgY29udGFjdEJvZGllczogeyBba2V5OiBzdHJpbmddOiBCb2R5IH07XHJcblxyXG4gICAgLy8g5pa55rOVXHJcbiAgICBtZXRob2RzOiBCb2R5T3B0WydtZXRob2RzJ107XHJcblxyXG4gICAgLy8g5riy5p+T5Ye95pWwXHJcbiAgICByZW5kZXI6IEZ1bmN0aW9uO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IEJvZHlPcHQsIHR5cGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuaWQgPSBVdGlsLmlkKCk7XHJcbiAgICAgICAgdGhpcy5zdHJpbmdJZCA9IHRoaXMuaWQudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuZW5naW5lID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRhdGEgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub3JpZ2luID0gbmV3IFZlY3RvcigwLCAwKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlY3RvcigwLCAwKTtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gMDtcclxuICAgICAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IFZlY3RvcigwLCAwKTtcclxuICAgICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IDA7XHJcbiAgICAgICAgdGhpcy5tb3Rpb24gPSAwO1xyXG4gICAgICAgIHRoaXMubWFzcyA9IDEwO1xyXG4gICAgICAgIHRoaXMuYXJlYSA9IDA7XHJcbiAgICAgICAgdGhpcy5kZW5zaXR5ID0gMTtcclxuICAgICAgICB0aGlzLmluZXJ0aWEgPSAwO1xyXG4gICAgICAgIHRoaXMuaW52SW5lcnRpYSA9IDA7XHJcbiAgICAgICAgdGhpcy5mb3JjZSA9IG5ldyBWZWN0b3IoMCwgMCk7XHJcbiAgICAgICAgdGhpcy50b3JxdWUgPSAwO1xyXG4gICAgICAgIHRoaXMuZnJpY3Rpb24gPSAwLjQ7XHJcbiAgICAgICAgdGhpcy5yZXN0aXR1dGlvbiA9IDAuOTtcclxuICAgICAgICB0aGlzLmNvbnN0cmFpbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3RhdGljID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5raW5ldGljID0gZmFsc2VcclxuICAgICAgICB0aGlzLnNsZWVwaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zbGVlcENvdW50ZXIgPSAwO1xyXG4gICAgICAgIHRoaXMubWFzayA9IDE7XHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYm91bmQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29udGFjdEJvZGllcyA9IHt9O1xyXG5cclxuICAgICAgICB0aGlzLm1ldGhvZHMgPSB7XHJcbiAgICAgICAgICAgIGZpbHRlcjogKG1hc2tBOiBudW1iZXIsIG1hc2tCOiBudW1iZXIpID0+IHsgcmV0dXJuIHRydWU7IH0sXHJcbiAgICAgICAgICAgIGJlZm9yZUFwcGVuZDogKGJvZHk6IEJvZHkpID0+IHt9LFxyXG4gICAgICAgICAgICBhZnRlckFwcGVuZDogKGJvZHk6IEJvZHkpID0+IHt9LFxyXG4gICAgICAgICAgICBiZWZvcmVSZW1vdmU6IChib2R5OiBCb2R5KSA9PiB7fSxcclxuICAgICAgICAgICAgYWZ0ZXJSZW1vdmU6IChib2R5OiBCb2R5KSA9PiB7fSxcclxuICAgICAgICAgICAgc2xlZXBTdGFydDogKGJvZHk6IEJvZHkpID0+IHt9LFxyXG4gICAgICAgICAgICBzbGVlcEVuZDogKGJvZHk6IEJvZHkpID0+IHt9LFxyXG4gICAgICAgICAgICBvbkNvbGxpZGU6IChib2R5OiBCb2R5KSA9PiB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgVXRpbC5leHRlbmQodGhpcywgb3B0KTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KG9wdCk7XHJcbiAgICAgICAgdGhpcy5hcmVhID0gdGhpcy5nZXRBcmVhKCk7XHJcbiAgICAgICAgdGhpcy5kZW5zaXR5ID0gdGhpcy5nZXREZW5zaXR5KCk7XHJcbiAgICAgICAgdGhpcy5pbnZNYXNzID0gdGhpcy5nZXRJbnZNYXNzKCk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuZ2V0Q2VudHJvaWQoKTtcclxuICAgICAgICB0aGlzLmluZXJ0aWEgPSB0aGlzLmdldEluZXJ0aWEoKTtcclxuICAgICAgICB0aGlzLmludkluZXJ0aWEgPSB0aGlzLmdldEludkluZXJ0aWEoKTtcclxuICAgICAgICB0aGlzLm1vdGlvbiA9IHRoaXMudmVsb2NpdHkubGVuKCkgKiogMiArIHRoaXMuYW5ndWxhclZlbG9jaXR5ICoqIDI7XHJcblxyXG4gICAgICAgIC8vIOiuvue9rua4suafk+WHveaVsFxyXG4gICAgICAgIHRoaXMuc2V0UmVuZGVyKCgpID0+IHt9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMluS4gOS6m+aVsOaNrlxyXG4gICAgICovXHJcbiAgICBpbml0KG9wdDogUG9seWdvbk9wdCkge31cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldHRlci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X6LSo6YeP5YCS5pWwXHJcbiAgICAgKi9cclxuICAgIGdldEludk1hc3MoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubWFzcyA9PT0gMCB8fCB0aGlzLnN0YXRpYyB8fCB0aGlzLmtpbmV0aWMpPyAwOiAxIC8gdGhpcy5tYXNzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X6L2s5Yqo5oOv6YeP5YCS5pWwXHJcbiAgICAgKi9cclxuICAgIGdldEludkluZXJ0aWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaW5lcnRpYSA9PT0gMCB8fCB0aGlzLnN0YXRpYyB8fCB0aGlzLmtpbmV0aWMpPyAwOiAxIC8gdGhpcy5pbmVydGlhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X5a+G5bqmXHJcbiAgICAgKi9cclxuICAgIGdldERlbnNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXNzIC8gdGhpcy5hcmVhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X6Z2i56evXHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgZ2V0QXJlYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X6LSo5b+DXHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgZ2V0Q2VudHJvaWQoKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuoeeul+i9rOWKqOaDr+mHj1xyXG4gICAgICogQG92ZXJyaWRlXHJcbiAgICAgKi9cclxuICAgIGdldEluZXJ0aWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7nur/pgJ/luqZcclxuICAgICAqIEBwYXJhbSB4IFxyXG4gICAgICogQHBhcmFtIHkgXHJcbiAgICAgKi9cclxuICAgIHNldFZlbG9jaXR5KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy52ZWxvY2l0eS54ID0geDtcclxuICAgICAgICB0aGlzLnZlbG9jaXR5LnkgPSB5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u6KeS6YCf5bqmXHJcbiAgICAgKiBAcGFyYW0gYW5ndWxhclZlbG9jaXR5IFxyXG4gICAgICovXHJcbiAgICBzZXRBbmd1bGFyVmVsb2NpdHkoYW5ndWxhclZlbG9jaXR5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IGFuZ3VsYXJWZWxvY2l0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruS9jee9rlxyXG4gICAgICogQHBhcmFtIHggXHJcbiAgICAgKiBAcGFyYW0geSBcclxuICAgICAqL1xyXG4gICAgc2V0UG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZHggPSB4IC0gdGhpcy5wb3NpdGlvbi54LFxyXG4gICAgICAgICAgICBkeSA9IHkgLSB0aGlzLnBvc2l0aW9uLnk7XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSBkeDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgKz0gZHk7XHJcblxyXG4gICAgICAgIHRoaXMudHJhbnNsYXRlKGR4LCBkeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7ml4vovazop5LluqZcclxuICAgICAqIEBwYXJhbSByb3RhdGlvbiBcclxuICAgICAqL1xyXG4gICAgc2V0Um90YXRpb24ocm90YXRpb246IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICB0aGlzLnJvdGF0ZShyb3RhdGlvbiwgdGhpcy5wb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7mmK/lkKbpnZnmgIEgXHJcbiAgICAgKiBAcGFyYW0gc3RhdGljIFxyXG4gICAgICovXHJcbiAgICBzZXRTdGF0aWMoc3RhOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0aWMgPSBzdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7mmK/lkKbov5DliqhcclxuICAgICAqIEBwYXJhbSBraW5cclxuICAgICAqL1xyXG4gICAgc2V0S2luZXRpYyhraW46IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmtpbmV0aWMgPSBraW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7nlKjmiLfmg7PopoHmkLrluKbnmoTkv6Hmga/mlbDmja5cclxuICAgICAqIEBwYXJhbSBkYXRhIOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBzZXREYXRhKGRhdGE6IGFueSkge1xyXG4gICAgICAgIGlmKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5riy5p+T5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gZm4gXHJcbiAgICAgKi9cclxuICAgIHNldFJlbmRlcihmbjogKGJvZHk6IEJvZHksIGR0OiBudW1iZXIsIHRpbWVTdGFtcDogbnVtYmVyKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgaWYoZm4gJiYgdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB0aGlzLnJlbmRlciA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0g5YaF6YOo5pa55rOVIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS9jeenu+WImuS9k1xyXG4gICAgICogQG92ZXJyaWRlXHJcbiAgICAgKiBAcGFyYW0gZHhcclxuICAgICAqIEBwYXJhbSBkeVxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUoZHg6IG51bWJlciwgZHk6IG51bWJlcikge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXi+i9rOWImuS9k1xyXG4gICAgICogQG92ZXJyaWRlXHJcbiAgICAgKiBAcGFyYW0gYW5nbGUg6KeS5bqmXHJcbiAgICAgKiBAcGFyYW0gcG9pbnQg57uV54K5XHJcbiAgICAgKi9cclxuICAgIHJvdGF0ZShhbmdsZTogbnVtYmVyLCBwb2ludDogVmVjdG9yKSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bqU55So5Yay6YePXHJcbiAgICAgKiBAcGFyYW0gaW1wdWxzZSDlhrLph49cclxuICAgICAqIEBwYXJhbSBvZmZzZXQg5L2c55So54K577yI5pys5Zyw5Z2Q5qCH57O777yJXHJcbiAgICAgKiBAcGFyYW0gZHQg5q2l6ZW/XHJcbiAgICAgKi9cclxuICAgIGFwcGx5SW1wdWxzZShpbXB1bHNlOiBWZWN0b3IsIG9mZnNldDogVmVjdG9yLCBkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYodGhpcy5zdGF0aWMgfHwgdGhpcy5raW5ldGljIHx8IHRoaXMuc2xlZXBpbmcpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy52ZWxvY2l0eS54ICs9IGltcHVsc2UueCAqIHRoaXMuaW52TWFzcztcclxuICAgICAgICB0aGlzLnZlbG9jaXR5LnkgKz0gaW1wdWxzZS55ICogdGhpcy5pbnZNYXNzO1xyXG4gICAgICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ICs9IHRoaXMuaW52SW5lcnRpYSAqIG9mZnNldC5jcm8oaW1wdWxzZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bqU55So5YqbXHJcbiAgICAgKiBAcGFyYW0gZm9yY2Ug5YqbXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IOS9nOeUqOeCue+8iOacrOWcsOWdkOagh+ezu++8iVxyXG4gICAgICovXHJcbiAgICBhcHBseUZvcmNlKGZvcmNlOiBWZWN0b3IsIG9mZnNldD86IFZlY3Rvcikge1xyXG4gICAgICAgIGlmKHRoaXMuc3RhdGljIHx8IHRoaXMua2luZXRpYykgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLmZvcmNlLnggKz0gZm9yY2UueDtcclxuICAgICAgICB0aGlzLmZvcmNlLnkgKz0gZm9yY2UueTtcclxuXHJcbiAgICAgICAgaWYob2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy50b3JxdWUgKz0gb2Zmc2V0LmNybyh0aGlzLmZvcmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog56ev5YiG5Y+X5YqbXHJcbiAgICAgKiBAcGFyYW0gZHQgXHJcbiAgICAgKi9cclxuICAgIGludGVncmF0ZUZvcmNlcyhkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYodGhpcy5zdGF0aWMgfHwgdGhpcy5raW5ldGljIHx8IHRoaXMuc2xlZXBpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy52ZWxvY2l0eS54ICs9IGR0ICogdGhpcy5mb3JjZS54ICogdGhpcy5pbnZNYXNzO1xyXG4gICAgICAgIHRoaXMudmVsb2NpdHkueSArPSBkdCAqIHRoaXMuZm9yY2UueSAqIHRoaXMuaW52TWFzcztcclxuICAgICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSArPSBkdCAqIHRoaXMudG9ycXVlICogdGhpcy5pbnZJbmVydGlhOyBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOenr+WIhumAn+W6plxyXG4gICAgICogLSDkvb/nlKjpmpDlvI/mrKfmi4nnp6/liIZcclxuICAgICAqIEBwYXJhbSBkdCBcclxuICAgICAqL1xyXG4gICAgaW50ZWdyYXRlVmVsb2NpdGllcyhkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYodGhpcy5zdGF0aWMgfHwgdGhpcy5zbGVlcGluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZHggPSBkdCAqIHRoaXMudmVsb2NpdHkueCxcclxuICAgICAgICAgICAgZHkgPSBkdCAqIHRoaXMudmVsb2NpdHkueSxcclxuICAgICAgICAgICAgZHIgPSBkdCAqIHRoaXMuYW5ndWxhclZlbG9jaXR5O1xyXG5cclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggKz0gZHg7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IGR5O1xyXG4gICAgICAgIHRoaXMucm90YXRpb24gKz0gZHI7XHJcblxyXG4gICAgICAgIC8v5L2N56e75Yia5L2TXHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGUoZHgsIGR5KTtcclxuICAgICAgICAvLyDml4vovazliJrkvZNcclxuICAgICAgICBpZihkciAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZShkciwgdGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmm7TmlrDmoIfph4/pgJ/luqZcclxuICAgICAgICBsZXQgc3BlZWQgPSBNYXRoLmh5cG90KGR4LCBkeSksXHJcbiAgICAgICAgICAgIGFuZ3VsYXJTcGVlZCA9IE1hdGguYWJzKGRyKTtcclxuXHJcbiAgICAgICAgLy/mm7TmlrDliqjph49cclxuICAgICAgICB0aGlzLm1vdGlvbiA9IHNwZWVkICogc3BlZWQgKyBhbmd1bGFyU3BlZWQgKiBhbmd1bGFyU3BlZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuZm9yY2UueCA9IDA7XHJcbiAgICAgICAgdGhpcy5mb3JjZS55ID0gMDtcclxuICAgICAgICB0aGlzLnRvcnF1ZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnKjmr4/kuIDluKfnu5PmnZ/lkI7ph43nva7pg6jliIbmlbDmja5cclxuICAgICAqL1xyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JjZS54ID0gMDtcclxuICAgICAgICB0aGlzLmZvcmNlLnkgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBob29rIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uR5a6a5rKf5a2Q5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIFxyXG4gICAgICogQHBhcmFtIGZuIFxyXG4gICAgICovXHJcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgZm46IChib2R5OiBCb2R5KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5tZXRob2RzW2V2ZW50TmFtZV0gPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICBiZWZvcmVBcHBlbmQoZW5naW5lOiBFbmdpbmUpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5zdGF0aWMpIHtcclxuICAgICAgICAgICAgdGhpcy5zbGVlcGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLnNsZWVwaW5nLnNsZWVwKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5tZXRob2RzLmJlZm9yZUFwcGVuZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBhZnRlckFwcGVuZCgpIHsgdGhpcy5tZXRob2RzLmFmdGVyQXBwZW5kKHRoaXMpOyB9XHJcblxyXG4gICAgYmVmb3JlUmVtb3ZlKCkgeyBcclxuICAgICAgICBsZXQgc2xlZXBpbmcgPSB0aGlzLmVuZ2luZS5zbGVlcGluZywgICAgXHJcbiAgICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmNvbnRhY3RCb2RpZXMpO1xyXG5cclxuICAgICAgICAvLyDlnKjliKDpmaTkuIDkuKrliJrkvZPliY3vvIzllKTphpLkuI7kuYvmnInnorDmkp7nmoTliJrkvZNcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzbGVlcGluZy53YWtlKHRoaXMuY29udGFjdEJvZGllc1trZXlzW2ldXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm1ldGhvZHMuYmVmb3JlUmVtb3ZlKHRoaXMpOyBcclxuICAgIH1cclxuXHJcbiAgICBhZnRlclJlbW92ZSgpIHsgdGhpcy5tZXRob2RzLmFmdGVyUmVtb3ZlKHRoaXMpOyB9XHJcblxyXG4gICAgc2xlZXBTdGFydCgpIHsgdGhpcy5tZXRob2RzLnNsZWVwU3RhcnQodGhpcyk7IH1cclxuXHJcbiAgICBzbGVlcEVuZCgpIHsgdGhpcy5tZXRob2RzLnNsZWVwRW5kKHRoaXMpOyB9XHJcblxyXG4gICAgb25Db2xsaWRlKHRhcmdldDogQm9keSkge1xyXG4gICAgICAgIHRoaXMuY29udGFjdEJvZGllc1t0YXJnZXQuc3RyaW5nSWRdID0gdGFyZ2V0O1xyXG4gICAgICAgIC8vIOinpuWPkeeisOaSnumSqeWtkFxyXG4gICAgICAgIHRoaXMubWV0aG9kcy5vbkNvbGxpZGUodGhpcyk7XHJcbiAgICB9XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 多边形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Polygon = void 0;\r\nconst body_1 = __webpack_require__(7);\r\nconst vertices_1 = __webpack_require__(2);\r\nclass Polygon extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.polygon);\r\n        // 用户一开始便设置了旋转的情况\r\n        if (this.rotation) {\r\n            this.rotate(this.rotation, this.position);\r\n        }\r\n    }\r\n    init(opt) {\r\n        // 将向量转化为顶点\r\n        if (opt.vertices) {\r\n            this.vertexList = opt.vertices.slice(0);\r\n        }\r\n        // 顶点数 > 3才构成多边形\r\n        if (this.vertexList && this.vertexList.length < 3)\r\n            return;\r\n        this.parts = this.getParts();\r\n    }\r\n    /**\r\n     * 获取世界坐标\r\n     */\r\n    getPoly() {\r\n        return vertices_1.Vertices.create(this, vertices_1.Vertices.transform2World(this.origin, this.vertexList));\r\n    }\r\n    getArea() {\r\n        return Math.abs(vertices_1.Vertices.getArea(this.vertexList));\r\n    }\r\n    getCentroid() {\r\n        return vertices_1.Vertices.getCentroid(this.vertexList);\r\n    }\r\n    getInertia() {\r\n        return vertices_1.Vertices.getInertia(this.vertexList, this.mass, this.position);\r\n    }\r\n    translate(dx, dy) {\r\n        // 位移图形原点\r\n        this.origin.x += dx;\r\n        this.origin.y += dy;\r\n        // 位移多边形顶点\r\n        vertices_1.Vertices.translate(this.poly, dx, dy);\r\n        // 若多边形是凹多边形, 位移子多边形包围盒\r\n        if (this.isConcave) {\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                let part = this.parts[i];\r\n                part.centroid.x += dx;\r\n                part.centroid.y += dy;\r\n                part.bound.translate(dx, dy);\r\n            }\r\n        }\r\n    }\r\n    rotate(radian, point) {\r\n        // 旋转顶点\r\n        vertices_1.Vertices.rotate(this.poly, radian, point);\r\n        // 若多边形是凹多边形, 更新子多边形包围盒\r\n        if (this.isConcave) {\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                let part = this.parts[i];\r\n                part.centroid.rot(radian, point, part.centroid);\r\n                part.bound.update(part.vertexList);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 分割多边形\r\n     * 若是凹多边形，则先分割为多个凸多边形，然后凸多边形再分割为小三角形\r\n     * 若是凸多边形，则直接分割为小三角形\r\n     */\r\n    getParts() {\r\n        let parts = [], poly = this.getPoly();\r\n        // 若是凹多边形\r\n        if (vertices_1.Vertices.isConcave(poly.vertexList)) {\r\n            this.isConcave = true;\r\n            parts = vertices_1.Vertices.divide(poly);\r\n        }\r\n        // 若是凸多边形\r\n        else {\r\n            parts = [poly];\r\n        }\r\n        this.bound = poly.bound;\r\n        this.poly = poly;\r\n        return parts;\r\n    }\r\n}\r\nexports.Polygon = Polygon;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Torque = void 0;\r\nconst interface_1 = __webpack_require__(10);\r\nconst bodiesFactory_1 = __webpack_require__(22);\r\nconst vector_1 = __webpack_require__(1);\r\ninterface_1.TorqueWorld['body'] = new bodiesFactory_1.BodiesFactory();\r\ninterface_1.TorqueWorld['math'] = {\r\n    vector: (x, y) => new vector_1.Vector(x, y)\r\n};\r\nexports.Torque = interface_1.TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdG9ycXVlLnRzP2JhZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQStDO0FBQy9DLGdEQUFxRDtBQUNyRCx3Q0FBdUM7QUFFdkMsdUJBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztBQUMxQyx1QkFBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHO0lBQ2xCLE1BQU0sRUFBRSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDckQsQ0FBQztBQUVXLGNBQU0sR0FBRyx1QkFBVyxDQUFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb3JxdWVXb3JsZCB9IGZyb20gXCIuL2NvcmUvaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IEJvZGllc0ZhY3RvcnkgfSBmcm9tIFwiLi9jb3JlL2JvZGllc0ZhY3RvcnlcIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4vbWF0aC92ZWN0b3JcIjtcclxuXHJcblRvcnF1ZVdvcmxkWydib2R5J10gPSBuZXcgQm9kaWVzRmFjdG9yeSgpO1xyXG5Ub3JxdWVXb3JsZFsnbWF0aCddID0ge1xyXG4gICAgdmVjdG9yOiAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IG5ldyBWZWN0b3IoeCwgeSlcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUb3JxdWUgPSBUb3JxdWVXb3JsZDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TorqueWorld = void 0;\r\nconst util_1 = __webpack_require__(0);\r\nconst engine_1 = __webpack_require__(11);\r\n// Torque主类\r\nclass TorqueWorld {\r\n    constructor(width, height, opt) {\r\n        this.engine = new engine_1.Engine(width, height, opt);\r\n    }\r\n    /**\r\n     * 增加刚体\r\n     * @param body\r\n     */\r\n    append(body) {\r\n        if (Array.isArray(body)) {\r\n            body.map(b => this.append(b));\r\n        }\r\n        else {\r\n            body.beforeAppend(this.engine);\r\n            this.engine.bodies.push(body);\r\n            body.afterAppend();\r\n        }\r\n    }\r\n    /**\r\n     * 移除刚体\r\n     * @param body\r\n     */\r\n    remove(body) {\r\n        body.beforeRemove();\r\n        util_1.Util.remove(this.engine.bodies, body);\r\n        body.afterRemove();\r\n    }\r\n    /**\r\n     * 清空引擎\r\n     */\r\n    clear() {\r\n        this.engine.bodies.map(body => this.remove(body));\r\n        this.engine.manifoldTable.clear();\r\n    }\r\n    /**\r\n     * 克隆刚体\r\n     * @param body\r\n     */\r\n    clone(body) {\r\n        return null;\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setEngineOption(opt) {\r\n        this.engine.setOption(opt);\r\n    }\r\n    /**\r\n     * 绑定沟子事件\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    on(eventName, fn) {\r\n        this.engine.methods[eventName] = fn;\r\n    }\r\n    /**\r\n     * 开始运行\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        this.engine.timeStepper.start(frameNumLimit);\r\n    }\r\n    /**\r\n     * 暂停运行\r\n     */\r\n    pause() {\r\n        this.engine.timeStepper.pause();\r\n    }\r\n    /**\r\n     * 获取帧率\r\n     */\r\n    getFPS() {\r\n        return this.engine.timeStepper.getFPS();\r\n    }\r\n}\r\nexports.TorqueWorld = TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9pbnRlcmZhY2UudHM/MjY1ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBc0M7QUFDdEMseUNBQTZDO0FBSTdDLFdBQVc7QUFDWCxNQUFhLFdBQVc7SUFHcEIsWUFBWSxLQUFhLEVBQUUsTUFBYyxFQUFFLEdBQWU7UUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsSUFBbUI7UUFDdEIsSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7YUFDSTtZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLElBQVU7UUFDYixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsV0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLElBQVU7UUFDWixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZUFBZSxDQUFDLEdBQWM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxFQUFFLENBQUMsU0FBaUIsRUFBRSxFQUE0QjtRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxhQUFzQjtRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQXJGRCxrQ0FxRkMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IEVuZ2luZSwgRW5naW5lT3B0IH0gZnJvbSBcIi4vZW5naW5lXCI7XHJcblxyXG5cclxuXHJcbi8vIFRvcnF1ZeS4u+exu1xyXG5leHBvcnQgY2xhc3MgVG9ycXVlV29ybGQge1xyXG4gICAgcHJpdmF0ZSBlbmdpbmU6IEVuZ2luZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3B0PzogRW5naW5lT3B0KSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBuZXcgRW5naW5lKHdpZHRoLCBoZWlnaHQsIG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlop7liqDliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICBhcHBlbmQoYm9keTogQm9keSB8IEJvZHlbXSkge1xyXG4gICAgICAgIGlmKEFycmF5LmlzQXJyYXkoYm9keSkpIHtcclxuICAgICAgICAgICAgYm9keS5tYXAoYiA9PiB0aGlzLmFwcGVuZChiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBib2R5LmJlZm9yZUFwcGVuZCh0aGlzLmVuZ2luZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLmJvZGllcy5wdXNoKGJvZHkpO1xyXG4gICAgICAgICAgICBib2R5LmFmdGVyQXBwZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICByZW1vdmUoYm9keTogQm9keSkge1xyXG4gICAgICAgIGJvZHkuYmVmb3JlUmVtb3ZlKCk7XHJcbiAgICAgICAgVXRpbC5yZW1vdmUodGhpcy5lbmdpbmUuYm9kaWVzLCBib2R5KTtcclxuICAgICAgICBib2R5LmFmdGVyUmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXnqbrlvJXmk45cclxuICAgICAqL1xyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUuYm9kaWVzLm1hcChib2R5ID0+IHRoaXMucmVtb3ZlKGJvZHkpKTtcclxuICAgICAgICB0aGlzLmVuZ2luZS5tYW5pZm9sZFRhYmxlLmNsZWFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhYvpmobliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICBjbG9uZShib2R5OiBCb2R5KTogQm9keSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lvJXmk47lj4LmlbBcclxuICAgICAqIEBwYXJhbSBvcHQgXHJcbiAgICAgKi9cclxuICAgIHNldEVuZ2luZU9wdGlvbihvcHQ6IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnNldE9wdGlvbihvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uR5a6a5rKf5a2Q5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIFxyXG4gICAgICogQHBhcmFtIGZuIFxyXG4gICAgICovXHJcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgZm46IChlbmdpbmU6IEVuZ2luZSkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLm1ldGhvZHNbZXZlbnROYW1lXSA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byA5aeL6L+Q6KGMXHJcbiAgICAgKiBAcGFyYW0gZnJhbWVOdW1MaW1pdCDpmZDliLbov5DooYzlpJrlsJHluKflgZzkuItcclxuICAgICAqL1xyXG4gICAgc3RhcnQoZnJhbWVOdW1MaW1pdD86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnRpbWVTdGVwcGVyLnN0YXJ0KGZyYW1lTnVtTGltaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pqC5YGc6L+Q6KGMXHJcbiAgICAgKi9cclxuICAgIHBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnRpbWVTdGVwcGVyLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bluKfnjodcclxuICAgICAqL1xyXG4gICAgZ2V0RlBTKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLnRpbWVTdGVwcGVyLmdldEZQUygpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Engine = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\nconst timeStepper_1 = __webpack_require__(12);\r\nconst detector_1 = __webpack_require__(13);\r\nconst sleeping_1 = __webpack_require__(20);\r\nconst manifoldTable_1 = __webpack_require__(21);\r\nconst contact_1 = __webpack_require__(3);\r\nlet TimeList = [], TestFlag = false;\r\nlet test = document.getElementById('test');\r\nif (test) {\r\n    test.addEventListener('click', () => {\r\n        TestFlag = true;\r\n    });\r\n}\r\n// 主引擎\r\nclass Engine {\r\n    constructor(width, height, opt) {\r\n        this.testFlag = false;\r\n        this.timeList = [];\r\n        // 引力缩放因子\r\n        this.gravityScaler = 50;\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        this.gravity = new vector_1.Vector(0, 9);\r\n        this.enableSleeping = true;\r\n        this.enableCollisionDetection = true;\r\n        this.enableCollisionResolve = true;\r\n        this.methods = {\r\n            tickStart: () => { },\r\n            tickEnd: () => { },\r\n            beforeUpdate: () => { },\r\n            afterUpdate: () => { },\r\n            beforeRender: () => { },\r\n            afterRender: () => { },\r\n            start: () => { },\r\n            pause: () => { },\r\n            collisionStart: (manifolds) => { },\r\n            collisionActive: (manifolds) => { },\r\n            collisionEnd: (manifolds) => { }\r\n        };\r\n        util_1.Util.merge(this, opt);\r\n        this.bodies = [];\r\n        this.timeStepper = new timeStepper_1.TimeStepper(this, opt);\r\n        this.detector = new detector_1.Detector(this, opt);\r\n        this.manifoldTable = new manifoldTable_1.ManifoldTable(opt);\r\n        this.contactConstraint = new contact_1.ContactConstraint();\r\n        this.sleeping = new sleeping_1.Sleeping(opt);\r\n    }\r\n    /**\r\n     * 引擎更新\r\n     * @param dt 步长\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(dt, timeStamp) {\r\n        let broadPhasePair = [], collisions = [];\r\n        if (this.enableSleeping) {\r\n            // 更新刚体的休眠/唤醒状态\r\n            this.sleeping.update(this.bodies);\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            let body = this.bodies[i];\r\n            body.force.x += this.gravity.x * body.mass * this.gravityScaler;\r\n            body.force.y += this.gravity.y * body.mass * this.gravityScaler;\r\n            // 应用受力\r\n            body.applyForce(body.force);\r\n            // 积分受力\r\n            body.integrateForces(dt);\r\n        }\r\n        // 解决所有约束\r\n        // this.resolver.solveConstraint();\r\n        // 是否开启碰撞检测\r\n        if (this.enableCollisionDetection) {\r\n            // 粗阶段检测\r\n            broadPhasePair = this.detector.broadPhase.detect(this.bodies);\r\n            let start = performance.now();\r\n            // 细阶段检测\r\n            collisions = this.detector.narrowPhase.detect(broadPhasePair);\r\n            let end = performance.now(), range = 60;\r\n            if (TestFlag) {\r\n                if (TimeList.length < range) {\r\n                    TimeList.push(end - start);\r\n                }\r\n                else {\r\n                    let total = TimeList.reduce((t, cur) => {\r\n                        return t + cur;\r\n                    });\r\n                    console.log(total / range);\r\n                    TestFlag = false;\r\n                    TimeList.length = 0;\r\n                }\r\n            }\r\n            // console.log(collisions);\r\n            this.manifoldTable.update(collisions, timeStamp);\r\n            // 移除缓存表超时的碰撞对\r\n            this.manifoldTable.filter(timeStamp);\r\n            // 是否开启了碰撞求解\r\n            if (this.enableCollisionResolve) {\r\n                // 若发现有休眠的刚体发生碰撞，则唤醒\r\n                if (this.enableSleeping)\r\n                    this.sleeping.afterCollision(this.manifoldTable.list);\r\n                // 求解碰撞约束\r\n                this.contactConstraint.solve(this.manifoldTable.list, dt);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            // 积分速度\r\n            this.bodies[i].integrateVelocities(dt);\r\n            this.bodies[i].reset();\r\n        }\r\n        this.manifoldTable.collisionStart.length && this.collisionStart();\r\n        this.manifoldTable.collisionActive.length && this.collisionActive();\r\n        this.manifoldTable.collisionEnd.length && this.collisionEnd();\r\n    }\r\n    /**\r\n     * 渲染物理引擎\r\n     * @param dt\r\n     */\r\n    render(dt) {\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            // 睡眠或者静态的刚体不用每一帧都渲染\r\n            if (this.bodies[i].sleeping || this.bodies[i].static) {\r\n                continue;\r\n            }\r\n            // 渲染刚体\r\n            this.bodies[i].render(this.bodies[i], dt);\r\n        }\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setOption(opt) {\r\n        util_1.Util.merge(this, opt);\r\n        util_1.Util.merge(this.timeStepper, opt);\r\n    }\r\n    // ----------------------------------------------- hook --------------------------\r\n    tickStart() { this.methods.tickStart(); }\r\n    tickEnd() { this.methods.tickEnd(); }\r\n    beforeUpdate() { this.methods.beforeUpdate(); }\r\n    afterUpdate() { this.methods.afterUpdate(); }\r\n    beforeRender() { this.methods.beforeRender(); }\r\n    afterRender() { this.methods.afterRender(); }\r\n    start() { this.methods.start(); }\r\n    pause() { this.methods.pause(); }\r\n    collisionStart() { this.methods.collisionEnd(this.manifoldTable.collisionStart); }\r\n    collisionActive() { this.methods.collisionEnd(this.manifoldTable.collisionActive); }\r\n    collisionEnd() { this.methods.collisionEnd(this.manifoldTable.collisionEnd); }\r\n}\r\nexports.Engine = Engine;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9lbmdpbmUudHM/OTViYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFDeEMsc0NBQXNDO0FBQ3RDLDhDQUE0QztBQUM1QywyQ0FBaUQ7QUFDakQsMkNBQXNDO0FBQ3RDLGdEQUEyRDtBQUczRCx5Q0FBMEQ7QUE2QzFELElBQUksUUFBUSxHQUFHLEVBQUUsRUFDYixRQUFRLEdBQUcsS0FBSyxDQUFDO0FBRXJCLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFM0MsSUFBRyxJQUFJLEVBQUU7SUFDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNoQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0NBQ047QUFHRCxNQUFNO0FBQ04sTUFBYSxNQUFNO0lBcUNmLFlBQVksS0FBYSxFQUFFLE1BQWMsRUFBRSxHQUFlO1FBbkMxRCxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCLGFBQVEsR0FBYSxFQUFFLENBQUM7UUE2QnhCLFNBQVM7UUFDVCxrQkFBYSxHQUFXLEVBQUUsQ0FBQztRQUt2QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBRTFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWhDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUM7UUFDckMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQztRQUVuQyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ1gsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7WUFDbkIsT0FB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QUFLLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpDLE9BQU8sS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVyQyxZQUFZLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFL0MsV0FBVyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRTdDLFlBQVksS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUvQyxXQUFXLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFN0MsS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWpDLEtBQUssS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVqQyxjQUFjLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEYsZUFBZSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBGLFlBQVksS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRjtBQS9NRCx3QkErTUMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5pbXBvcnQgeyBUaW1lU3RlcHBlciB9IGZyb20gXCIuL3RpbWVTdGVwcGVyXCI7XHJcbmltcG9ydCB7IERldGVjdG9yIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9kZXRlY3RvclwiO1xyXG5pbXBvcnQgeyBTbGVlcGluZyB9IGZyb20gXCIuL3NsZWVwaW5nXCI7XHJcbmltcG9ydCB7IE1hbmlmb2xkVGFibGUgfSBmcm9tIFwiLi4vY29sbGlzaW9uL21hbmlmb2xkVGFibGVcIjtcclxuaW1wb3J0IHsgQ29sbGlzaW9uLCBNYW5pZm9sZCB9IGZyb20gXCIuLi9jb2xsaXNpb24vbWFuaWZvbGRcIjtcclxuaW1wb3J0IHsgYnJvYWRQaGFzZVBhaXIgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2Jyb2FkUGhhc2VcIjtcclxuaW1wb3J0IHsgQ29udGFjdENvbnN0cmFpbnQgfSBmcm9tIFwiLi4vY29uc3RyYWludC9jb250YWN0XCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIOS4u+W8leaTjlxyXG4gKi9cclxuXHJcblxyXG5cclxuLy8g5byV5pOO55u45YWz6YWN572u6aG5XHJcbmV4cG9ydCBpbnRlcmZhY2UgRW5naW5lT3B0IHtcclxuICAgIC8vIOW4p+eOh1xyXG4gICAgZnBzOiBudW1iZXI7XHJcbiAgICAvLyDmmK/lkKblm7rlrprmraXplb9cclxuICAgIGRlbHRhRml4ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgLy8g5piv5ZCm5byA5ZCv56Kw5pKe5qOA5rWLXHJcbiAgICBlbmFibGVDb2xsbGlzaW9uRGV0ZWN0aW9uOiBib29sZWFuO1xyXG4gICAgLy8g5piv5ZCm5byA5ZCv56Kw5pKe5rGC6KejXHJcbiAgICBlbmFibGVDb2xsaXNpb25SZXNvbHZlOiBib29sZWFuO1xyXG4gICAgLy8g5piv5ZCm5byA5ZCv5LyR55ygXHJcbiAgICBlbmFibGVTbGVlcGluZzogYm9vbGVhbjtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+e8k+WtmFxyXG4gICAgZW5hYmxlQ2FjaGU6IGJvb2xlYW47XHJcblxyXG4gICAgLy8g6YeN5YqbXHJcbiAgICBncmF2aXR5OiBWZWN0b3I7XHJcblxyXG4gICAgLy8g5pa55rOVXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgdGlja1N0YXJ0OiAoKSA9PiB2b2lkOyBcclxuICAgICAgICB0aWNrRW5kOiAoKSA9PiB2b2lkO1xyXG4gICAgICAgIGJlZm9yZVVwZGF0ZTogKCkgPT4gdm9pZDtcclxuICAgICAgICBhZnRlclVwZGF0ZTogKCkgPT4gdm9pZDtcclxuICAgICAgICBiZWZvcmVSZW5kZXI6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgYWZ0ZXJSZW5kZXI6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgc3RhcnQ6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgcGF1c2U6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgY29sbGlzaW9uU3RhcnQ6IChtYW5pZm9sZHM6IE1hbmlmb2xkW10pID0+IHZvaWQ7XHJcbiAgICAgICAgY29sbGlzaW9uQWN0aXZlOiAobWFuaWZvbGRzOiBNYW5pZm9sZFtdKSA9PiB2b2lkO1xyXG4gICAgICAgIGNvbGxpc2lvbkVuZDogKG1hbmlmb2xkczogTWFuaWZvbGRbXSkgPT4gdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmxldCBUaW1lTGlzdCA9IFtdLFxyXG4gICAgVGVzdEZsYWcgPSBmYWxzZTtcclxuXHJcbmxldCB0ZXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3QnKTtcclxuXHJcbmlmKHRlc3QpIHtcclxuICAgIHRlc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgVGVzdEZsYWcgPSB0cnVlO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG4vLyDkuLvlvJXmk45cclxuZXhwb3J0IGNsYXNzIEVuZ2luZSB7XHJcblxyXG4gICAgdGVzdEZsYWc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHRpbWVMaXN0OiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIC8vIOaooeaLn+eql+WPo+WuveW6plxyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIC8vIOaooeaLn+eql+WPo+mrmOW6plxyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgLy8g5piv5ZCm5byA5ZCv5LyR55yg5py65Yi2XHJcbiAgICBlbmFibGVTbGVlcGluZzogYm9vbGVhbjtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+eisOaSnuajgOa1i1xyXG4gICAgZW5hYmxlQ29sbGlzaW9uRGV0ZWN0aW9uOiBib29sZWFuO1xyXG4gICAgLy8g5piv5ZCm5byA5ZCv56Kw5pKe5rGC6KejXHJcbiAgICBlbmFibGVDb2xsaXNpb25SZXNvbHZlOiBib29sZWFuO1xyXG5cclxuICAgIC8vIOmHjeWKm1xyXG4gICAgZ3Jhdml0eTogVmVjdG9yO1xyXG5cclxuICAgIC8vIOWImuS9k+WIl+ihqFxyXG4gICAgYm9kaWVzOiBCb2R5W107XHJcbiAgICAvLyDml7bpl7TmraXov63ku6PlmahcclxuICAgIHRpbWVTdGVwcGVyOiBUaW1lU3RlcHBlcjtcclxuICAgIC8vIOeisOaSnuajgOa1i+WZqFxyXG4gICAgZGV0ZWN0b3I6IERldGVjdG9yO1xyXG4gICAgLy8g5rWB5b2i6KGoXHJcbiAgICBtYW5pZm9sZFRhYmxlOiBNYW5pZm9sZFRhYmxlO1xyXG4gICAgLy8g5o6l6Kem57qm5p2fXHJcbiAgICBjb250YWN0Q29uc3RyYWludDogQ29udGFjdENvbnN0cmFpbnQ7XHJcbiAgICAvLyDkvJHnnKDnrqHnkIblmahcclxuICAgIHNsZWVwaW5nOiBTbGVlcGluZztcclxuICAgIC8vIOW8leWKm+e8qeaUvuWboOWtkFxyXG4gICAgZ3Jhdml0eVNjYWxlcjogbnVtYmVyID0gNTA7XHJcbiAgICAvLyDmlrnms5VcclxuICAgIG1ldGhvZHM6IEVuZ2luZU9wdFsnbWV0aG9kcyddO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvcHQ/OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGggfHwgMDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBWZWN0b3IoMCwgOSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW5hYmxlU2xlZXBpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlQ29sbGlzaW9uRGV0ZWN0aW9uID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVuYWJsZUNvbGxpc2lvblJlc29sdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLm1ldGhvZHMgPSB7XHJcbiAgICAgICAgICAgIHRpY2tTdGFydDogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIHRpY2tFbmQ6ICgpID0+IHt9LFxyXG4gICAgICAgICAgICBiZWZvcmVVcGRhdGU6ICgpID0+IHt9LFxyXG4gICAgICAgICAgICBhZnRlclVwZGF0ZTogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIGJlZm9yZVJlbmRlcjogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIGFmdGVyUmVuZGVyOiAoKSA9PiB7fSxcclxuICAgICAgICAgICAgc3RhcnQ6ICgpID0+IHt9LFxyXG4gICAgICAgICAgICBwYXVzZTogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIGNvbGxpc2lvblN0YXJ0OiAobWFuaWZvbGRzOiBNYW5pZm9sZFtdKSA9PiB7fSxcclxuICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlOiAobWFuaWZvbGRzOiBNYW5pZm9sZFtdKSA9PiB7fSxcclxuICAgICAgICAgICAgY29sbGlzaW9uRW5kOiAobWFuaWZvbGRzOiBNYW5pZm9sZFtdKSA9PiB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgVXRpbC5tZXJnZSh0aGlzLCBvcHQpO1xyXG5cclxuICAgICAgICB0aGlzLmJvZGllcyA9IFtdO1xyXG4gICAgICAgIHRoaXMudGltZVN0ZXBwZXIgPSBuZXcgVGltZVN0ZXBwZXIodGhpcywgb3B0KTtcclxuICAgICAgICB0aGlzLmRldGVjdG9yID0gbmV3IERldGVjdG9yKHRoaXMsIG9wdCk7XHJcbiAgICAgICAgdGhpcy5tYW5pZm9sZFRhYmxlID0gbmV3IE1hbmlmb2xkVGFibGUob3B0KTtcclxuICAgICAgICB0aGlzLmNvbnRhY3RDb25zdHJhaW50ID0gbmV3IENvbnRhY3RDb25zdHJhaW50KCk7XHJcbiAgICAgICAgdGhpcy5zbGVlcGluZyA9IG5ldyBTbGVlcGluZyhvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDlvJXmk47mm7TmlrBcclxuICAgICAqIEBwYXJhbSBkdCDmraXplb9cclxuICAgICAqIEBwYXJhbSB0aW1lU3RhbXAg5pe26Ze05oizXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZShkdDogbnVtYmVyLCB0aW1lU3RhbXA6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBicm9hZFBoYXNlUGFpcjogYnJvYWRQaGFzZVBhaXJbXSA9IFtdLFxyXG4gICAgICAgICAgICBjb2xsaXNpb25zOiBDb2xsaXNpb25bXSA9IFtdO1xyXG5cclxuICAgICAgICBpZih0aGlzLmVuYWJsZVNsZWVwaW5nKSB7XHJcbiAgICAgICAgICAgIC8vIOabtOaWsOWImuS9k+eahOS8keecoC/llKTphpLnirbmgIFcclxuICAgICAgICAgICAgdGhpcy5zbGVlcGluZy51cGRhdGUodGhpcy5ib2RpZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBib2R5ID0gdGhpcy5ib2RpZXNbaV07XHJcblxyXG4gICAgICAgICAgICBib2R5LmZvcmNlLnggKz0gdGhpcy5ncmF2aXR5LnggKiBib2R5Lm1hc3MgKiB0aGlzLmdyYXZpdHlTY2FsZXI7XHJcbiAgICAgICAgICAgIGJvZHkuZm9yY2UueSArPSB0aGlzLmdyYXZpdHkueSAqIGJvZHkubWFzcyAqIHRoaXMuZ3Jhdml0eVNjYWxlcjtcclxuXHJcbiAgICAgICAgICAgIC8vIOW6lOeUqOWPl+WKm1xyXG4gICAgICAgICAgICBib2R5LmFwcGx5Rm9yY2UoYm9keS5mb3JjZSk7XHJcbiAgICAgICAgICAgIC8vIOenr+WIhuWPl+WKm1xyXG4gICAgICAgICAgICBib2R5LmludGVncmF0ZUZvcmNlcyhkdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDop6PlhrPmiYDmnInnuqbmnZ9cclxuICAgICAgICAvLyB0aGlzLnJlc29sdmVyLnNvbHZlQ29uc3RyYWludCgpO1xyXG5cclxuICAgICAgICAvLyDmmK/lkKblvIDlkK/norDmkp7mo4DmtYtcclxuICAgICAgICBpZih0aGlzLmVuYWJsZUNvbGxpc2lvbkRldGVjdGlvbikge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g57KX6Zi25q615qOA5rWLXHJcbiAgICAgICAgICAgIGJyb2FkUGhhc2VQYWlyID0gdGhpcy5kZXRlY3Rvci5icm9hZFBoYXNlLmRldGVjdCh0aGlzLmJvZGllcyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOe7humYtuauteajgOa1i1xyXG4gICAgICAgICAgICBjb2xsaXNpb25zID0gdGhpcy5kZXRlY3Rvci5uYXJyb3dQaGFzZS5kZXRlY3QoYnJvYWRQaGFzZVBhaXIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGVuZCA9IHBlcmZvcm1hbmNlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSA2MDtcclxuXHJcbiAgICAgICAgICAgIGlmKFRlc3RGbGFnKSB7XHJcbiAgICAgICAgICAgICAgICBpZihUaW1lTGlzdC5sZW5ndGggPCByYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFRpbWVMaXN0LnB1c2goZW5kIC0gc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gVGltZUxpc3QucmVkdWNlKCh0LCBjdXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgKyBjdXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0b3RhbCAvIHJhbmdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgVGVzdEZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBUaW1lTGlzdC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb2xsaXNpb25zKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS51cGRhdGUoY29sbGlzaW9ucywgdGltZVN0YW1wKTtcclxuICAgICAgICAgICAgLy8g56e76Zmk57yT5a2Y6KGo6LaF5pe255qE56Kw5pKe5a+5XHJcbiAgICAgICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS5maWx0ZXIodGltZVN0YW1wKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOaYr+WQpuW8gOWQr+S6hueisOaSnuaxguino1xyXG4gICAgICAgICAgICBpZih0aGlzLmVuYWJsZUNvbGxpc2lvblJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiLpeWPkeeOsOacieS8keecoOeahOWImuS9k+WPkeeUn+eisOaSnu+8jOWImeWUpOmGklxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlU2xlZXBpbmcpXHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLnNsZWVwaW5nLmFmdGVyQ29sbGlzaW9uKHRoaXMubWFuaWZvbGRUYWJsZS5saXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmsYLop6PnorDmkp7nuqbmnZ9cclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdENvbnN0cmFpbnQuc29sdmUodGhpcy5tYW5pZm9sZFRhYmxlLmxpc3QsIGR0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOenr+WIhumAn+W6plxyXG4gICAgICAgICAgICB0aGlzLmJvZGllc1tpXS5pbnRlZ3JhdGVWZWxvY2l0aWVzKGR0KTtcclxuICAgICAgICAgICAgdGhpcy5ib2RpZXNbaV0ucmVzZXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25TdGFydC5sZW5ndGggJiYgdGhpcy5jb2xsaXNpb25TdGFydCgpO1xyXG4gICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25BY3RpdmUubGVuZ3RoICYmIHRoaXMuY29sbGlzaW9uQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5tYW5pZm9sZFRhYmxlLmNvbGxpc2lvbkVuZC5sZW5ndGggJiYgdGhpcy5jb2xsaXNpb25FbmQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4suafk+eJqeeQhuW8leaTjlxyXG4gICAgICogQHBhcmFtIGR0IFxyXG4gICAgICovXHJcbiAgICByZW5kZXIoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmJvZGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyDnnaHnnKDmiJbogIXpnZnmgIHnmoTliJrkvZPkuI3nlKjmr4/kuIDluKfpg73muLLmn5NcclxuICAgICAgICAgICAgaWYodGhpcy5ib2RpZXNbaV0uc2xlZXBpbmcgfHwgdGhpcy5ib2RpZXNbaV0uc3RhdGljKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g5riy5p+T5Yia5L2TXHJcbiAgICAgICAgICAgIHRoaXMuYm9kaWVzW2ldLnJlbmRlcih0aGlzLmJvZGllc1tpXSwgZHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruW8leaTjuWPguaVsFxyXG4gICAgICogQHBhcmFtIG9wdCBcclxuICAgICAqL1xyXG4gICAgc2V0T3B0aW9uKG9wdDogRW5naW5lT3B0KSB7XHJcbiAgICAgICAgVXRpbC5tZXJnZSh0aGlzLCBvcHQpO1xyXG4gICAgICAgIFV0aWwubWVyZ2UodGhpcy50aW1lU3RlcHBlciwgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBob29rIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgdGlja1N0YXJ0KCkgeyB0aGlzLm1ldGhvZHMudGlja1N0YXJ0KCk7IH0gXHJcblxyXG4gICAgdGlja0VuZCgpIHsgdGhpcy5tZXRob2RzLnRpY2tFbmQoKTsgfVxyXG5cclxuICAgIGJlZm9yZVVwZGF0ZSgpIHsgdGhpcy5tZXRob2RzLmJlZm9yZVVwZGF0ZSgpOyB9XHJcblxyXG4gICAgYWZ0ZXJVcGRhdGUoKSB7IHRoaXMubWV0aG9kcy5hZnRlclVwZGF0ZSgpOyB9XHJcblxyXG4gICAgYmVmb3JlUmVuZGVyKCkgeyB0aGlzLm1ldGhvZHMuYmVmb3JlUmVuZGVyKCk7IH1cclxuXHJcbiAgICBhZnRlclJlbmRlcigpIHsgdGhpcy5tZXRob2RzLmFmdGVyUmVuZGVyKCk7IH1cclxuXHJcbiAgICBzdGFydCgpIHsgdGhpcy5tZXRob2RzLnN0YXJ0KCk7IH1cclxuXHJcbiAgICBwYXVzZSgpIHsgdGhpcy5tZXRob2RzLnBhdXNlKCk7IH1cclxuXHJcbiAgICBjb2xsaXNpb25TdGFydCgpIHsgdGhpcy5tZXRob2RzLmNvbGxpc2lvbkVuZCh0aGlzLm1hbmlmb2xkVGFibGUuY29sbGlzaW9uU3RhcnQpOyB9XHJcblxyXG4gICAgY29sbGlzaW9uQWN0aXZlKCkgeyB0aGlzLm1ldGhvZHMuY29sbGlzaW9uRW5kKHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25BY3RpdmUpOyB9XHJcblxyXG4gICAgY29sbGlzaW9uRW5kKCkgeyB0aGlzLm1ldGhvZHMuY29sbGlzaW9uRW5kKHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25FbmQpOyB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TimeStepper = void 0;\r\nconst util_1 = __webpack_require__(0);\r\n/**\r\n * 时间步迭代器\r\n */\r\nclass TimeStepper {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.status = false;\r\n        this.fps = opt.fps || 60;\r\n        this.deltaFixed = opt.deltaFixed === undefined ? true : opt.deltaFixed;\r\n        this.deltaRecordLimit = 60;\r\n        util_1.Util.merge(this, opt);\r\n        this.dt = 1 / this.fps;\r\n        this.dtMin = this.dt;\r\n        this.dtMax = this.dt * 2;\r\n        this.frameCounter = 0;\r\n        this.frameStamp = 0;\r\n        this.prevTime = 0;\r\n        this.frameTotal = 0;\r\n        this.frameNumLimit = -1;\r\n        this.deltaRecorder = [];\r\n    }\r\n    /**\r\n     * 一次tick，也就是一次模拟\r\n     * @param timeStamp 当前时间戳\r\n     */\r\n    tick(timeStamp = 0) {\r\n        let dt;\r\n        // 固定dt\r\n        if (this.deltaFixed === false) {\r\n            // 动态计算dt\r\n            dt = (timeStamp - this.prevTime) / 1000 || this.dt;\r\n            this.prevTime = timeStamp;\r\n            // 根据过去的变化步长情况，优化当前步长，使引擎稳定\r\n            this.deltaRecorder.push(dt);\r\n            this.deltaRecorder = this.deltaRecorder.slice(-this.deltaRecordLimit);\r\n            dt = util_1.Util.clamp(Math.min.apply(Math, this.deltaRecorder), this.dtMin, this.dtMax);\r\n            // 更新dt\r\n            this.dt = dt;\r\n        }\r\n        // 动态计算fps\r\n        this.frameCounter += 1;\r\n        if (timeStamp - this.frameStamp >= 1000) {\r\n            this.fps = this.frameCounter * ((timeStamp - this.frameStamp) / 1000);\r\n            this.frameStamp = timeStamp;\r\n            this.frameCounter = 0;\r\n        }\r\n        this.engine.tickStart();\r\n        // 更新物理引擎\r\n        this.engine.beforeUpdate();\r\n        this.engine.update(this.dt, timeStamp);\r\n        this.engine.afterUpdate();\r\n        // 渲染物理引擎\r\n        this.engine.beforeRender();\r\n        this.engine.render(this.dt);\r\n        this.engine.afterRender();\r\n        this.engine.tickEnd();\r\n        this.frameTotal++;\r\n        if (this.frameNumLimit > 0 && this.frameTotal >= this.frameNumLimit) {\r\n            this.pause();\r\n            return;\r\n        }\r\n        this.raf = window.requestAnimationFrame(this.tick.bind(this));\r\n    }\r\n    /**\r\n     * 开始模拟\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        if (this.status)\r\n            return;\r\n        if (frameNumLimit && frameNumLimit > 0) {\r\n            this.frameNumLimit = frameNumLimit;\r\n        }\r\n        this.status = true;\r\n        this.engine.start();\r\n        this.tick();\r\n    }\r\n    /**\r\n     * 暂停模拟\r\n     */\r\n    pause() {\r\n        if (!this.status)\r\n            return;\r\n        this.status = false;\r\n        this.frameTotal = 0;\r\n        this.engine.pause();\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n    /**\r\n     * 获取帧率\r\n     */\r\n    getFPS() {\r\n        return this.fps;\r\n    }\r\n}\r\nexports.TimeStepper = TimeStepper;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Detector = void 0;\r\nconst broadPhase_1 = __webpack_require__(14);\r\nconst narrowPhase_1 = __webpack_require__(15);\r\n/**\r\n * 碰撞检测\r\n */\r\nclass Detector {\r\n    constructor(engine, opt) {\r\n        this.broadPhase = new broadPhase_1.BroadPhase(engine, opt);\r\n        this.narrowPhase = new narrowPhase_1.NarrowPhase(engine, opt);\r\n    }\r\n}\r\nexports.Detector = Detector;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2RldGVjdG9yLnRzPzhiODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTBDO0FBQzFDLDhDQUE0QztBQUc1Qzs7R0FFRztBQUlILE1BQWEsUUFBUTtJQU1qQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSx1QkFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBVkQsNEJBVUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcm9hZFBoYXNlIH0gZnJvbSBcIi4vYnJvYWRQaGFzZVwiO1xyXG5pbXBvcnQgeyBOYXJyb3dQaGFzZSB9IGZyb20gXCIuL25hcnJvd1BoYXNlXCI7XHJcbmltcG9ydCB7IEVuZ2luZSwgRW5naW5lT3B0IH0gZnJvbSBcIi4uL2NvcmUvZW5naW5lXCI7XHJcblxyXG4vKipcclxuICog56Kw5pKe5qOA5rWLXHJcbiAqL1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGV0ZWN0b3Ige1xyXG4gICAgLy8g57KX5qOA5p+lXHJcbiAgICBicm9hZFBoYXNlOiBCcm9hZFBoYXNlO1xyXG4gICAgLy8g57uG5qOA5rWLXHJcbiAgICBuYXJyb3dQaGFzZTogTmFycm93UGhhc2U7ICAgXHJcblxyXG4gICAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIG9wdDogRW5naW5lT3B0KSB7XHJcbiAgICAgICAgdGhpcy5icm9hZFBoYXNlID0gbmV3IEJyb2FkUGhhc2UoZW5naW5lLCBvcHQpO1xyXG4gICAgICAgIHRoaXMubmFycm93UGhhc2UgPSBuZXcgTmFycm93UGhhc2UoZW5naW5lLCBvcHQpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BroadPhase = void 0;\r\nconst util_1 = __webpack_require__(0);\r\nclass BroadPhase {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * 检测\r\n     * @param bodies 所有刚体\r\n     */\r\n    detect(bodies) {\r\n        return this.sweepAndPrune(bodies);\r\n    }\r\n    /**\r\n     * 查看刚体是否出了可视区\r\n     * @param bound\r\n     */\r\n    isBodyOutWindow(bound) {\r\n        return bound.max.y < 0 || bound.min.x > this.engine.width || bound.min.y > this.engine.height || bound.max.x < 0;\r\n    }\r\n    /**\r\n     * 查看两个刚体是否允许发生碰撞\r\n     * @param bodyA\r\n     * @param bodyB\r\n     */\r\n    canCollide(bodyA, bodyB) {\r\n        // 若bodies[i]的碰撞过滤器过滤了bodies[i]，不进行检测\r\n        if (!bodyA.methods.filter(bodyA.mask, bodyB.mask) || !bodyB.methods.filter(bodyB.mask, bodyA.mask))\r\n            return false;\r\n        // 若刚体已经移出可视区了，跳过\r\n        if (this.isBodyOutWindow(bodyA.bound) || this.isBodyOutWindow(bodyB.bound))\r\n            return false;\r\n        // 两个静态刚体 ，跳过\r\n        if ((bodyA.static || bodyA.kinetic) && (bodyB.static || bodyB.kinetic))\r\n            return false;\r\n        // 两个睡眠刚体，跳过\r\n        if (bodyA.sleeping && bodyB.sleeping)\r\n            return false;\r\n        return true;\r\n    }\r\n    /**\r\n     * Sweep & Prune\r\n     * @param bodies\r\n     */\r\n    sweepAndPrune(bodies) {\r\n        let broadPhasePairList = [], i, j, len = bodies.length;\r\n        // 包围盒在x轴上排序 （直接插入排序）\r\n        // 第一次排序时包围盒趋向于无序，这时复杂度为O(n^2) \r\n        // 而因为时间相干性，在之后的每帧包围盒趋向有序，此时直接插入排序效率最高，为O(nlogn)\r\n        util_1.Util.insertSort(bodies, (bodyA, bodyB) => bodyA.bound.min.x - bodyB.bound.min.x);\r\n        for (i = 0; i < len; i++) {\r\n            for (j = i + 1; j < len; j++) {\r\n                let boundA = bodies[i].bound, boundB = bodies[j].bound;\r\n                // 已经不可能发生碰撞了，跳出循环\r\n                if (boundA.max.x < boundB.min.x)\r\n                    break;\r\n                // 若A，B不可以发生碰撞，返回\r\n                if (!this.canCollide(bodies[i], bodies[j]))\r\n                    continue;\r\n                // 一个个对比包围盒是否相交\r\n                if (boundA.min.y < boundB.max.y && boundB.min.y < boundA.max.y) {\r\n                    broadPhasePairList.push({\r\n                        bodyA: bodies[i],\r\n                        bodyB: bodies[j],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return broadPhasePairList;\r\n    }\r\n}\r\nexports.BroadPhase = BroadPhase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2Jyb2FkUGhhc2UudHM/ZWRmYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBc0M7QUFrQnRDLE1BQWEsVUFBVTtJQUduQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsTUFBYztRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNLLGVBQWUsQ0FBQyxLQUFZO1FBQ2hDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNySCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLFVBQVUsQ0FBQyxLQUFXLEVBQUUsS0FBVztRQUN2QyxxQ0FBcUM7UUFDckMsSUFBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFaEgsaUJBQWlCO1FBQ2pCLElBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFeEYsYUFBYTtRQUNiLElBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXBGLFlBQVk7UUFDWixJQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVE7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssYUFBYSxDQUFDLE1BQWM7UUFDaEMsSUFBSSxrQkFBa0IsR0FBcUIsRUFBRSxFQUN6QyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRTlCLHFCQUFxQjtRQUNyQiwrQkFBK0I7UUFDL0IsZ0RBQWdEO1FBQ2hELFdBQUksQ0FBQyxVQUFVLENBQU8sTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZGLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JCLEtBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDekIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFDeEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBRTdCLGtCQUFrQjtnQkFDbEIsSUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQUUsTUFBTTtnQkFFdEMsaUJBQWlCO2dCQUNqQixJQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFFLFNBQVM7Z0JBRXBELGVBQWU7Z0JBQ2YsSUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDM0Qsa0JBQWtCLENBQUMsSUFBSSxDQUFDO3dCQUNwQixLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDaEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ25CLENBQUMsQ0FBQztpQkFDTjthQUNKO1NBQ0o7UUFFRCxPQUFPLGtCQUFrQixDQUFDO0lBQzlCLENBQUM7Q0FDSjtBQWhGRCxnQ0FnRkMiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IEJvdW5kIH0gZnJvbSBcIi4vYm91bmRcIjtcclxuaW1wb3J0IHsgRW5naW5lLCBFbmdpbmVPcHQgfSBmcm9tIFwiLi4vY29yZS9lbmdpbmVcIjtcclxuXHJcbi8qKlxyXG4gKiDnspfmo4DmtYvpmLbmrrXvvIzkvb/nlKhTd2VlcCAmIFBydW5l566X5rOVXHJcbiAqIOWPguiAg++8mmh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vYXJ0aWNsZS8xMC4xMDA3L3MwMDM3MS0wMTMtMDg4MC03XHJcbiAqL1xyXG5cclxuXHJcbi8vIOeyl+ajgOa1i+mYtuauteeUn+aIkOeahOe7k+aenOWvuee7k+aehFxyXG5leHBvcnQgdHlwZSBicm9hZFBoYXNlUGFpciA9IHtcclxuICAgIGJvZHlBOiBCb2R5O1xyXG4gICAgYm9keUI6IEJvZHk7XHJcbn07XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCcm9hZFBoYXNlIHtcclxuICAgIGVuZ2luZTogRW5naW5lO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVuZ2luZTogRW5naW5lLCBvcHQ6IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qOA5rWLXHJcbiAgICAgKiBAcGFyYW0gYm9kaWVzIOaJgOacieWImuS9k1xyXG4gICAgICovXHJcbiAgICBkZXRlY3QoYm9kaWVzOiBCb2R5W10pOiBicm9hZFBoYXNlUGFpcltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zd2VlcEFuZFBydW5lKGJvZGllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvliJrkvZPmmK/lkKblh7rkuoblj6/op4bljLpcclxuICAgICAqIEBwYXJhbSBib3VuZCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0JvZHlPdXRXaW5kb3coYm91bmQ6IEJvdW5kKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGJvdW5kLm1heC55IDwgMCB8fCBib3VuZC5taW4ueCA+IHRoaXMuZW5naW5lLndpZHRoIHx8IGJvdW5kLm1pbi55ID4gdGhpcy5lbmdpbmUuaGVpZ2h0IHx8IGJvdW5kLm1heC54IDwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeeci+S4pOS4quWImuS9k+aYr+WQpuWFgeiuuOWPkeeUn+eisOaSnlxyXG4gICAgICogQHBhcmFtIGJvZHlBIFxyXG4gICAgICogQHBhcmFtIGJvZHlCIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbkNvbGxpZGUoYm9keUE6IEJvZHksIGJvZHlCOiBCb2R5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8g6IulYm9kaWVzW2ld55qE56Kw5pKe6L+H5ruk5Zmo6L+H5ruk5LqGYm9kaWVzW2ld77yM5LiN6L+b6KGM5qOA5rWLXHJcbiAgICAgICAgaWYoIWJvZHlBLm1ldGhvZHMuZmlsdGVyKGJvZHlBLm1hc2ssIGJvZHlCLm1hc2spIHx8ICFib2R5Qi5tZXRob2RzLmZpbHRlcihib2R5Qi5tYXNrLCBib2R5QS5tYXNrKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOiLpeWImuS9k+W3sue7j+enu+WHuuWPr+inhuWMuuS6hu+8jOi3s+i/h1xyXG4gICAgICAgIGlmKHRoaXMuaXNCb2R5T3V0V2luZG93KGJvZHlBLmJvdW5kKSB8fCB0aGlzLmlzQm9keU91dFdpbmRvdyhib2R5Qi5ib3VuZCkpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8g5Lik5Liq6Z2Z5oCB5Yia5L2TIO+8jOi3s+i/h1xyXG4gICAgICAgIGlmKChib2R5QS5zdGF0aWMgfHwgYm9keUEua2luZXRpYykgJiYgKGJvZHlCLnN0YXRpYyB8fCBib2R5Qi5raW5ldGljKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAvLyDkuKTkuKrnnaHnnKDliJrkvZPvvIzot7Pov4dcclxuICAgICAgICBpZihib2R5QS5zbGVlcGluZyAmJiBib2R5Qi5zbGVlcGluZykgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3ZWVwICYgUHJ1bmVcclxuICAgICAqIEBwYXJhbSBib2RpZXMgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3dlZXBBbmRQcnVuZShib2RpZXM6IEJvZHlbXSk6IGJyb2FkUGhhc2VQYWlyW10ge1xyXG4gICAgICAgIGxldCBicm9hZFBoYXNlUGFpckxpc3Q6IGJyb2FkUGhhc2VQYWlyW10gPSBbXSxcclxuICAgICAgICAgICAgaSwgaiwgbGVuID0gYm9kaWVzLmxlbmd0aDtcclxuICAgICAgICBcclxuICAgICAgICAvLyDljIXlm7Tnm5LlnKh46L205LiK5o6S5bqPIO+8iOebtOaOpeaPkuWFpeaOkuW6j++8iVxyXG4gICAgICAgIC8vIOesrOS4gOasoeaOkuW6j+aXtuWMheWbtOebkui2i+WQkeS6juaXoOW6j++8jOi/meaXtuWkjeadguW6puS4uk8obl4yKSBcclxuICAgICAgICAvLyDogIzlm6DkuLrml7bpl7Tnm7jlubLmgKfvvIzlnKjkuYvlkI7nmoTmr4/luKfljIXlm7Tnm5LotovlkJHmnInluo/vvIzmraTml7bnm7TmjqXmj5LlhaXmjpLluo/mlYjnjofmnIDpq5jvvIzkuLpPKG5sb2duKVxyXG4gICAgICAgIFV0aWwuaW5zZXJ0U29ydDxCb2R5Pihib2RpZXMsIChib2R5QSwgYm9keUIpID0+IGJvZHlBLmJvdW5kLm1pbi54IC0gYm9keUIuYm91bmQubWluLngpO1xyXG4gICAgXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yKGogPSBpICsgMTsgaiA8IGxlbjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYm91bmRBID0gYm9kaWVzW2ldLmJvdW5kLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kQiA9IGJvZGllc1tqXS5ib3VuZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDlt7Lnu4/kuI3lj6/og73lj5HnlJ/norDmkp7kuobvvIzot7Plh7rlvqrnjq9cclxuICAgICAgICAgICAgICAgIGlmKGJvdW5kQS5tYXgueCA8IGJvdW5kQi5taW4ueCkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6IulQe+8jELkuI3lj6/ku6Xlj5HnlJ/norDmkp7vvIzov5Tlm55cclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmNhbkNvbGxpZGUoYm9kaWVzW2ldLCBib2RpZXNbal0pKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDkuIDkuKrkuKrlr7nmr5TljIXlm7Tnm5LmmK/lkKbnm7jkuqRcclxuICAgICAgICAgICAgICAgIGlmKGJvdW5kQS5taW4ueSA8IGJvdW5kQi5tYXgueSAmJiBib3VuZEIubWluLnkgPCBib3VuZEEubWF4LnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBicm9hZFBoYXNlUGFpckxpc3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBOiBib2RpZXNbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlCOiBib2RpZXNbal0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBicm9hZFBoYXNlUGFpckxpc3Q7XHJcbiAgICB9IFxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.NarrowPhase = void 0;\r\nconst sat_1 = __webpack_require__(16);\r\nconst arcs_1 = __webpack_require__(4);\r\nconst vertices_1 = __webpack_require__(2);\r\nconst util_1 = __webpack_require__(0);\r\nclass NarrowPhase {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.SAT = new sat_1.SAT(opt);\r\n    }\r\n    /**\r\n     * 检测\r\n     * @param broadPhasePairList 粗检查生成的潜在碰撞对\r\n     */\r\n    detect(broadPhasePairList) {\r\n        let collisions = [], prevCollision = null, pair, partsA, partsB, partA, partB, i, j, k;\r\n        for (i = 0; i < broadPhasePairList.length; i++) {\r\n            pair = broadPhasePairList[i];\r\n            partsA = pair.bodyA.parts;\r\n            partsB = pair.bodyB.parts;\r\n            for (j = 0; j < partsA.length; j++) {\r\n                partA = partsA[j];\r\n                for (k = 0; k < partsB.length; k++) {\r\n                    partB = partsB[k];\r\n                    // 两个子图形包围盒不相交，跳过\r\n                    if (!partA.bound.isIntersect(partB.bound))\r\n                        continue;\r\n                    prevCollision = this.getPrevCollision(partA, partB, this.engine.manifoldTable);\r\n                    // A,B皆为圆形\r\n                    if (partA instanceof arcs_1.Arc && partB instanceof arcs_1.Arc) {\r\n                        collisions.push(this.SAT.circleCollideCircle(partA, partB, prevCollision));\r\n                    }\r\n                    // A为多边形，B为圆形\r\n                    else if (partA instanceof vertices_1.Poly && partB instanceof arcs_1.Arc) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                    // A为圆形，B为多边形\r\n                    else if (partA instanceof arcs_1.Arc && partB instanceof vertices_1.Poly) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partB, partA, prevCollision));\r\n                    }\r\n                    // A,B皆为多边形\r\n                    else {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return collisions;\r\n    }\r\n    /**\r\n     * 获取上一次碰撞\r\n     * @param partA\r\n     * @param partB\r\n     * @param manifoldTable\r\n     */\r\n    getPrevCollision(partA, partB, manifoldTable) {\r\n        let id = util_1.Util.compositeId(partA.id, partB.id), manifold = manifoldTable.table[id];\r\n        if (this.engine.manifoldTable.enableCache && manifold && manifold.isActive) {\r\n            return manifold.collision;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nexports.NarrowPhase = NarrowPhase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL25hcnJvd1BoYXNlLnRzP2ZiNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBQTRCO0FBRTVCLHNDQUFxQztBQUNyQywwQ0FBMEM7QUFHMUMsc0NBQXNDO0FBTXRDLE1BQWEsV0FBVztJQVNwQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxrQkFBb0M7UUFDdkMsSUFBSSxVQUFVLEdBQUcsRUFBRSxFQUNmLGFBQWEsR0FBRyxJQUFJLEVBQ3BCLElBQW9CLEVBQ3BCLE1BQWtCLEVBQ2xCLE1BQWtCLEVBQ2xCLEtBQWUsRUFDZixLQUFlLEVBQ2YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFWixLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQzFCLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUUxQixLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9CLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWxCLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDL0IsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFbEIsaUJBQWlCO29CQUNqQixJQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzt3QkFBRSxTQUFTO29CQUVuRCxhQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFFL0UsVUFBVTtvQkFDVixJQUFHLEtBQUssWUFBWSxVQUFHLElBQUksS0FBSyxZQUFZLFVBQUcsRUFBRTt3QkFDN0MsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztxQkFDOUU7b0JBQ0QsYUFBYTt5QkFDUixJQUFHLEtBQUssWUFBWSxlQUFJLElBQUksS0FBSyxZQUFZLFVBQUcsRUFBRTt3QkFDbkQsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztxQkFDN0U7b0JBQ0QsYUFBYTt5QkFDUixJQUFHLEtBQUssWUFBWSxVQUFHLElBQUksS0FBSyxZQUFZLGVBQUksRUFBRTt3QkFDbkQsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztxQkFDN0U7b0JBQ0QsV0FBVzt5QkFDTjt3QkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQU8sS0FBSyxFQUFRLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO3FCQUN6RjtpQkFDSjthQUNKO1NBQ0o7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxnQkFBZ0IsQ0FBQyxLQUFlLEVBQUUsS0FBZSxFQUFFLGFBQTRCO1FBQzNFLElBQUksRUFBRSxHQUFHLFdBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ3pDLFFBQVEsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXZDLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ3ZFLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQztTQUM3QjthQUNJO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7Q0FDSjtBQXBGRCxrQ0FvRkMiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTQVQgfSBmcm9tIFwiLi9zYXRcIjtcclxuaW1wb3J0IHsgYnJvYWRQaGFzZVBhaXIgfSBmcm9tIFwiLi9icm9hZFBoYXNlXCI7XHJcbmltcG9ydCB7IEFyYyB9IGZyb20gXCIuLi9jb21tb24vYXJjc1wiO1xyXG5pbXBvcnQgeyBQb2x5IH0gZnJvbSBcIi4uL2NvbW1vbi92ZXJ0aWNlc1wiO1xyXG5pbXBvcnQgeyBFbmdpbmUsIEVuZ2luZU9wdCB9IGZyb20gXCIuLi9jb3JlL2VuZ2luZVwiO1xyXG5pbXBvcnQgeyBDb2xsaXNpb24sIEdlb21ldHJ5IH0gZnJvbSBcIi4vbWFuaWZvbGRcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5pbXBvcnQgeyBNYW5pZm9sZFRhYmxlIH0gZnJvbSBcIi4vbWFuaWZvbGRUYWJsZVwiO1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE5hcnJvd1BoYXNlIHtcclxuICAgIHByaXZhdGUgZW5naW5lOiBFbmdpbmU7XHJcblxyXG4gICAgLy8g5YiG56a76L205rWL6K+VXHJcbiAgICBwcml2YXRlIFNBVDogU0FUO1xyXG4gICAgLy8g56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25zOiBDb2xsaXNpb25bXTtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIG9wdDogRW5naW5lT3B0KSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XHJcbiAgICAgICAgdGhpcy5TQVQgPSBuZXcgU0FUKG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmo4DmtYtcclxuICAgICAqIEBwYXJhbSBicm9hZFBoYXNlUGFpckxpc3Qg57KX5qOA5p+l55Sf5oiQ55qE5r2c5Zyo56Kw5pKe5a+5XHJcbiAgICAgKi9cclxuICAgIGRldGVjdChicm9hZFBoYXNlUGFpckxpc3Q6IGJyb2FkUGhhc2VQYWlyW10pOiBDb2xsaXNpb25bXSB7XHJcbiAgICAgICAgbGV0IGNvbGxpc2lvbnMgPSBbXSxcclxuICAgICAgICAgICAgcHJldkNvbGxpc2lvbiA9IG51bGwsXHJcbiAgICAgICAgICAgIHBhaXI6IGJyb2FkUGhhc2VQYWlyLFxyXG4gICAgICAgICAgICBwYXJ0c0E6IEdlb21ldHJ5W10sXHJcbiAgICAgICAgICAgIHBhcnRzQjogR2VvbWV0cnlbXSxcclxuICAgICAgICAgICAgcGFydEE6IEdlb21ldHJ5LFxyXG4gICAgICAgICAgICBwYXJ0QjogR2VvbWV0cnksXHJcbiAgICAgICAgICAgIGksIGosIGs7XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGJyb2FkUGhhc2VQYWlyTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwYWlyID0gYnJvYWRQaGFzZVBhaXJMaXN0W2ldO1xyXG4gICAgICAgICAgICBwYXJ0c0EgPSBwYWlyLmJvZHlBLnBhcnRzO1xyXG4gICAgICAgICAgICBwYXJ0c0IgPSBwYWlyLmJvZHlCLnBhcnRzO1xyXG5cclxuICAgICAgICAgICAgZm9yKGogPSAwOyBqIDwgcGFydHNBLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0QSA9IHBhcnRzQVtqXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoayA9IDA7IGsgPCBwYXJ0c0IubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0QiA9IHBhcnRzQltrXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Lik5Liq5a2Q5Zu+5b2i5YyF5Zu055uS5LiN55u45Lqk77yM6Lez6L+HXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXBhcnRBLmJvdW5kLmlzSW50ZXJzZWN0KHBhcnRCLmJvdW5kKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZDb2xsaXNpb24gPSB0aGlzLmdldFByZXZDb2xsaXNpb24ocGFydEEsIHBhcnRCLCB0aGlzLmVuZ2luZS5tYW5pZm9sZFRhYmxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQSxC55qG5Li65ZyG5b2iXHJcbiAgICAgICAgICAgICAgICAgICAgaWYocGFydEEgaW5zdGFuY2VvZiBBcmMgJiYgcGFydEIgaW5zdGFuY2VvZiBBcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKHRoaXMuU0FULmNpcmNsZUNvbGxpZGVDaXJjbGUocGFydEEsIHBhcnRCLCBwcmV2Q29sbGlzaW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEHkuLrlpJrovrnlvaLvvIxC5Li65ZyG5b2iXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwYXJ0QSBpbnN0YW5jZW9mIFBvbHkgJiYgcGFydEIgaW5zdGFuY2VvZiBBcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKHRoaXMuU0FULnBvbHlnb25Db2xsaWRlQm9keShwYXJ0QSwgcGFydEIsIHByZXZDb2xsaXNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQeS4uuWchuW9ou+8jELkuLrlpJrovrnlvaJcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhcnRBIGluc3RhbmNlb2YgQXJjICYmIHBhcnRCIGluc3RhbmNlb2YgUG9seSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25zLnB1c2godGhpcy5TQVQucG9seWdvbkNvbGxpZGVCb2R5KHBhcnRCLCBwYXJ0QSwgcHJldkNvbGxpc2lvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBBLELnmobkuLrlpJrovrnlvaJcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKHRoaXMuU0FULnBvbHlnb25Db2xsaWRlQm9keSg8UG9seT5wYXJ0QSwgPFBvbHk+cGFydEIsIHByZXZDb2xsaXNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb2xsaXNpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiK5LiA5qyh56Kw5pKeXHJcbiAgICAgKiBAcGFyYW0gcGFydEEgXHJcbiAgICAgKiBAcGFyYW0gcGFydEIgXHJcbiAgICAgKiBAcGFyYW0gbWFuaWZvbGRUYWJsZSBcclxuICAgICAqL1xyXG4gICAgZ2V0UHJldkNvbGxpc2lvbihwYXJ0QTogR2VvbWV0cnksIHBhcnRCOiBHZW9tZXRyeSwgbWFuaWZvbGRUYWJsZTogTWFuaWZvbGRUYWJsZSk6IENvbGxpc2lvbiB7XHJcbiAgICAgICAgbGV0IGlkID0gVXRpbC5jb21wb3NpdGVJZChwYXJ0QS5pZCwgcGFydEIuaWQpLFxyXG4gICAgICAgICAgICBtYW5pZm9sZCA9IG1hbmlmb2xkVGFibGUudGFibGVbaWRdO1xyXG5cclxuICAgICAgICBpZih0aGlzLmVuZ2luZS5tYW5pZm9sZFRhYmxlLmVuYWJsZUNhY2hlICYmIG1hbmlmb2xkICYmIG1hbmlmb2xkLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYW5pZm9sZC5jb2xsaXNpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SAT = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\nconst arcs_1 = __webpack_require__(4);\r\nconst manifold_1 = __webpack_require__(6);\r\nconst contact_1 = __webpack_require__(3);\r\nconst util_1 = __webpack_require__(0);\r\nconst axesFilter_1 = __webpack_require__(17);\r\nconst vClip_1 = __webpack_require__(18);\r\nconst vClosest_1 = __webpack_require__(19);\r\n/**\r\n * 分离轴算法\r\n * 参考：https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\r\n */\r\nclass SAT {\r\n    constructor(opt) {\r\n        // 是否开启SAT加速\r\n        this.enableSATBoost = true;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 多边形 - 多边形或圆形（geometry）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param prevCollision\r\n     */\r\n    polygonCollideBody(poly, geometry, prevCollision) {\r\n        let canReuse = this.canReuseCollision(poly, geometry, prevCollision), collision = null, minOverlap, axes;\r\n        // 若能用缓存，使用缓存\r\n        if (canReuse) {\r\n            collision = prevCollision;\r\n            minOverlap = this.detect(poly, geometry, [collision.axis], collision.oppositeClosestIndex);\r\n            if (minOverlap === null) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            let prevContacts = collision.contacts;\r\n            for (let i = 0; i < prevContacts.length; i++) {\r\n                prevContacts[i].depth = minOverlap.value;\r\n            }\r\n        }\r\n        // 若不能用缓存，则进行完整的测试\r\n        else {\r\n            collision = new manifold_1.Collision();\r\n            axes = this.getTestAxes(poly, geometry);\r\n            minOverlap = this.detect(poly, geometry, axes);\r\n            // 若发现两个刚体投影的重叠部分是负的，即表示它们没相交\r\n            if (minOverlap === null) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            let axis = minOverlap.axis, normal = this.reviseNormal(minOverlap.axis.value, poly, geometry);\r\n            // 此处collision.axis与minOverlap.axis不能共享一个对象，因为collision.axis是根据不同碰撞而变化的，而minOverlap.axis不能变\r\n            collision.axis.value = axis.value;\r\n            collision.axis.supportVertexIndex = axis.supportVertexIndex;\r\n            collision.axis.oppositeVertexIndex = axis.oppositeVertexIndex;\r\n            collision.axis.opposite = axis.opposite;\r\n            collision.axis.origin = axis.origin;\r\n            collision.axis.edge = axis.edge;\r\n            collision.oppositeClosestIndex = minOverlap.oppositeClosestIndex;\r\n            collision.normal = normal;\r\n            collision.tangent = normal.nor();\r\n            collision.partA = poly;\r\n            collision.partB = geometry;\r\n            collision.bodyA = poly.body;\r\n            collision.bodyB = geometry.body;\r\n            // 计算碰撞点\r\n            collision.contacts = this.findContacts(geometry, minOverlap);\r\n        }\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * 圆形 - 圆形\r\n     * @param circleA\r\n     * @param circleB\r\n     * @param prevCollision\r\n     */\r\n    circleCollideCircle(arcA, arcB, prevCollision) {\r\n        let axis = arcA.centroid.sub(arcB.centroid, vector_1._tempVector1), overlaps = (arcA.radius + arcB.radius) - axis.len(), collision = new manifold_1.Collision(), normal;\r\n        // 两圆心距离比两圆半径和要大，即没有发生碰撞\r\n        if (overlaps < 0) {\r\n            collision.collide = false;\r\n            return collision;\r\n        }\r\n        normal = this.reviseNormal(axis, arcA, arcB).nol();\r\n        collision.axis = null;\r\n        collision.partA = arcA;\r\n        collision.partB = arcB;\r\n        collision.bodyA = arcA.body;\r\n        collision.bodyB = arcB.body;\r\n        collision.normal = normal;\r\n        collision.tangent = normal.nor();\r\n        let position = arcA.centroid.loc(normal.inv(vector_1._tempVector1), arcA.radius - overlaps / 2);\r\n        collision.contacts = [new contact_1.Contact(position, overlaps)];\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * --------------------------------------------------------------------------------------------------\r\n     */\r\n    /**\r\n     * 进行分离轴检测\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axes\r\n     * @param prevOppositeClosestIndex\r\n     */\r\n    detect(poly, geometry, axes, prevOppositeClosestIndex) {\r\n        let minOverlap = Infinity, oppositeClosestIndex, getOverlaps = this.enableSATBoost ? this.selectiveProjectionMethod : this.fullProjectionMethod, overlaps, i, index;\r\n        // 将两个刚体投影到所有轴上\r\n        for (i = 0; i < axes.length; i++) {\r\n            if (axes[i] === null) {\r\n                continue;\r\n            }\r\n            overlaps = getOverlaps(poly, geometry, axes[i], prevOppositeClosestIndex);\r\n            if (overlaps.depth < 0) {\r\n                return null;\r\n            }\r\n            if (overlaps.depth < minOverlap) {\r\n                minOverlap = overlaps.depth;\r\n                oppositeClosestIndex = overlaps.oppositeClosestIndex;\r\n                index = i;\r\n            }\r\n        }\r\n        return {\r\n            value: minOverlap,\r\n            oppositeClosestIndex,\r\n            axis: axes[index],\r\n        };\r\n    }\r\n    /**\r\n     * 获取测试轴\r\n     * @param poly\r\n     * @param geometry\r\n     */\r\n    getTestAxes(poly, geometry) {\r\n        let axes, circleAxis;\r\n        // 若geometry是圆形，计算一条动态轴\r\n        if (geometry instanceof arcs_1.Arc) {\r\n            circleAxis = arcs_1.Arcs.getAxes(geometry, poly);\r\n        }\r\n        // 如果开启了加速功能，首先进行轴过滤\r\n        if (this.enableSATBoost) {\r\n            axes = axesFilter_1.axesFilter(poly, geometry);\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n        }\r\n        else {\r\n            let opposite = geometry instanceof arcs_1.Arc ? geometry : geometry.vertexList, oppositeAxes, i;\r\n            axes = [];\r\n            for (i = 0; i < poly.axes.length; i++) {\r\n                if (poly.axes[i]) {\r\n                    poly.axes[i].opposite = opposite;\r\n                    axes.push(poly.axes[i]);\r\n                }\r\n            }\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n            else {\r\n                oppositeAxes = geometry.axes;\r\n                for (i = 0; i < oppositeAxes.length; i++) {\r\n                    if (oppositeAxes[i]) {\r\n                        oppositeAxes[i].opposite = poly.vertexList;\r\n                        axes.push(oppositeAxes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return axes;\r\n    }\r\n    /**\r\n     * 全投影法（传统）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     */\r\n    fullProjectionMethod(poly, geometry, axis, prevOppositeClosestIndex) {\r\n        let axisVector = axis.value, partA = poly.vertexList, partB = geometry instanceof vertices_1.Poly ? geometry.vertexList : geometry, projection1, projection2;\r\n        // 若geometry是多边形\r\n        if (Array.isArray(partB)) {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = vertices_1.Vertices.projection(partB, axisVector);\r\n        }\r\n        // 是圆形\r\n        else {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = arcs_1.Arcs.projection(partB, axisVector);\r\n        }\r\n        return {\r\n            depth: Math.min(projection1.max - projection2.min, projection2.max - projection1.min),\r\n            oppositeClosestIndex: -1\r\n        };\r\n    }\r\n    /**\r\n     * 选择投影法\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     * @param oppositeClosestIndex\r\n     */\r\n    selectiveProjectionMethod(poly, geometry, axis, oppositeClosestIndex) {\r\n        let axisVector = axis.value, opposite = axis.opposite;\r\n        // 该轴是圆形和多边形的动态轴\r\n        if (opposite === null) {\r\n            let projection1 = vertices_1.Vertices.projection(poly.vertexList, axisVector), projection2 = arcs_1.Arcs.projection(geometry, axisVector);\r\n            return {\r\n                depth: Math.min(projection1.max - projection2.min, projection2.max - projection1.min),\r\n                oppositeClosestIndex\r\n            };\r\n        }\r\n        let supportVertex = axis.origin[axis.supportVertexIndex], supportProjection = supportVertex.dot(axisVector);\r\n        // 对面是圆形\r\n        if (opposite instanceof arcs_1.Arc) {\r\n            let circleProjection = arcs_1.Arcs.projection(opposite, axisVector);\r\n            return {\r\n                depth: supportProjection - circleProjection.min,\r\n                oppositeClosestIndex\r\n            };\r\n        }\r\n        let maxOverlap = -Infinity;\r\n        // 若最近点没有缓存，执行爬山法重新计算最近点\r\n        if (oppositeClosestIndex === undefined) {\r\n            let oppositeIndex = axis.oppositeVertexIndex, prev, next, seekPrev = true, seekNext = true, lastPrevPro, lastNextPro, projection;\r\n            projection = opposite[oppositeIndex].dot(axisVector);\r\n            prev = next = oppositeIndex;\r\n            lastPrevPro = lastNextPro = projection;\r\n            oppositeClosestIndex = oppositeIndex;\r\n            do {\r\n                if (!seekPrev && !seekNext) {\r\n                    break;\r\n                }\r\n                if (seekPrev) {\r\n                    prev = prev > 0 ? prev - 1 : opposite.length - 1;\r\n                    projection = opposite[prev].dot(axisVector);\r\n                    if (projection > lastPrevPro) {\r\n                        seekPrev = false;\r\n                        prev = (prev + 1) % opposite.length;\r\n                    }\r\n                    else {\r\n                        oppositeClosestIndex = prev;\r\n                        lastPrevPro = projection;\r\n                    }\r\n                }\r\n                if (seekNext) {\r\n                    next = (next + 1) % opposite.length;\r\n                    projection = opposite[next].dot(axisVector);\r\n                    if (projection > lastNextPro) {\r\n                        seekNext = false;\r\n                        next = next > 0 ? next - 1 : opposite.length - 1;\r\n                    }\r\n                    else {\r\n                        oppositeClosestIndex = next;\r\n                        lastNextPro = projection;\r\n                    }\r\n                }\r\n            } while (prev !== next);\r\n        }\r\n        maxOverlap = supportProjection - opposite[oppositeClosestIndex].dot(axisVector);\r\n        return {\r\n            depth: maxOverlap,\r\n            oppositeClosestIndex\r\n        };\r\n    }\r\n    /**\r\n     * 修正碰撞法线方向，使其始终背向刚体A\r\n     * @param normal 要修正的法线\r\n     * @param bodyA 刚体A\r\n     * @param bodyB 刚体B\r\n     */\r\n    reviseNormal(normal, geometryA, geometryB) {\r\n        if (normal.dot(geometryB.centroid.sub(geometryA.centroid, vector_1._tempVector1)) > 0) {\r\n            return normal.inv();\r\n        }\r\n        return normal;\r\n    }\r\n    /**\r\n     * 查看碰撞缓存是否可以复用\r\n     * @param geometryA\r\n     * @param geometryB\r\n     * @param prevCollision 上一次的碰撞\r\n     */\r\n    canReuseCollision(geometryA, geometryB, prevCollision) {\r\n        // 若上次碰撞的缓存存在\r\n        if (prevCollision) {\r\n            let bodyA = geometryA.body, bodyB = geometryB.body, motion = Math.sqrt(bodyA.motion + bodyB.motion);\r\n            // 若上次碰撞判定为真，且当前碰撞对刚体趋于静止，可复用\r\n            return prevCollision.collide && motion < 0.05;\r\n        }\r\n        // 碰撞缓存不存在，直接判定无法复用\r\n        return false;\r\n    }\r\n    /**\r\n     * 求解碰撞点\r\n     * @param geometry\r\n     * @param minOverlap\r\n     * @param prevContacts\r\n     */\r\n    findContacts(geometry, minOverlap) {\r\n        if (geometry instanceof vertices_1.Poly) {\r\n            if (this.enableSATBoost) {\r\n                return vClip_1.vClip(minOverlap);\r\n            }\r\n            else {\r\n                return vClosest_1.vClosest(minOverlap);\r\n            }\r\n        }\r\n        else {\r\n            let vertex = geometry.centroid.loc(minOverlap.axis.value, geometry.radius - minOverlap.value / 2);\r\n            return [new contact_1.Contact(vertex, minOverlap.value)];\r\n        }\r\n    }\r\n}\r\nexports.SAT = SAT;\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.axesFilter = void 0;\r\nconst vertices_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(1);\r\nfunction axesFilter(polyA, geometryB) {\r\n    let centroidVector = geometryB.centroid.sub(polyA.centroid, vector_1._tempVector1), axesA, axesB, supportIndexA, supportIndexB, i, res = [];\r\n    axesA = findClosestAxes(polyA, geometryB, centroidVector);\r\n    supportIndexA = axesA[0].supportVertexIndex;\r\n    if (geometryB instanceof vertices_1.Poly) {\r\n        axesB = findClosestAxes(geometryB, polyA, centroidVector.inv(centroidVector));\r\n        supportIndexB = axesB[0].supportVertexIndex;\r\n    }\r\n    for (i = 0; i < axesA.length; i++) {\r\n        axesA[i].oppositeVertexIndex = supportIndexB;\r\n        res.push(axesA[i]);\r\n    }\r\n    if (axesB) {\r\n        for (i = 0; i < axesB.length; i++) {\r\n            axesB[i].oppositeVertexIndex = supportIndexA;\r\n            res.push(axesB[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexports.axesFilter = axesFilter;\r\n/**\r\n * @param poly\r\n * @param geometry\r\n * @param centroidVector\r\n * @param oppositeCentroid\r\n */\r\nfunction findClosestAxes(poly, geometry, centroidVector) {\r\n    let v = poly.vertexList, axes = poly.axes, vertex, axis, distance, minDistance = Infinity, dot, lastDot = -1, index = 0, opposite = geometry instanceof vertices_1.Poly ? geometry.vertexList : geometry, oppositeCentroid = geometry.centroid, res = [];\r\n    if (axes[axes.length - 1]) {\r\n        lastDot = axes[axes.length - 1].value.dot(centroidVector);\r\n    }\r\n    for (let i = 0; i < v.length; i++) {\r\n        vertex = v[i];\r\n        axis = axes[i];\r\n        dot = axis ? axis.value.dot(centroidVector) : -1;\r\n        if (dot <= 0 && lastDot <= 0) {\r\n            continue;\r\n        }\r\n        distance = (vertex.x - oppositeCentroid.x) ** 2 + (vertex.y - oppositeCentroid.y) ** 2;\r\n        if (distance < minDistance) {\r\n            minDistance = distance;\r\n            index = i;\r\n        }\r\n        lastDot = dot;\r\n    }\r\n    let prev = index > 0 ? index - 1 : v.length - 1, prevAxis = axes[prev], indexAxis = axes[index];\r\n    if (prevAxis) {\r\n        res.push(prevAxis);\r\n    }\r\n    if (indexAxis) {\r\n        res.push(indexAxis);\r\n    }\r\n    for (let i = 0; i < res.length; i++) {\r\n        res[i].supportVertexIndex = index;\r\n        res[i].opposite = opposite;\r\n        res[i].origin = poly.vertexList;\r\n    }\r\n    return res;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2F4ZXNGaWx0ZXIudHM/NGRkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQ0FBNEQ7QUFDNUQsd0NBQWtGO0FBTWxGLFNBQWdCLFVBQVUsQ0FBQyxLQUFXLEVBQUUsU0FBbUI7SUFDdkQsSUFBSSxjQUFjLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxxQkFBWSxDQUFDLEVBQ3JFLEtBQWEsRUFBRSxLQUFhLEVBQzVCLGFBQXFCLEVBQUUsYUFBcUIsRUFDNUMsQ0FBQyxFQUFFLEdBQUcsR0FBVyxFQUFFLENBQUM7SUFFeEIsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzFELGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7SUFFNUMsSUFBRyxTQUFTLFlBQVksZUFBSSxFQUFFO1FBQzFCLEtBQUssR0FBRyxlQUFlLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztLQUMvQztJQUVELEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5QixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsYUFBYSxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEI7SUFFRCxJQUFHLEtBQUssRUFBRTtRQUNOLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZ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QUFJLENBQUMsVUFBVSxDQUFDO0tBQ25DO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpcywgUG9seSwgVmVydGV4TGlzdCB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgVmVjdG9yLCBfdGVtcFZlY3RvcjEsIF90ZW1wVmVjdG9yMiwgX3RlbXBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSBcIi4vbWFuaWZvbGRcIjtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBheGVzRmlsdGVyKHBvbHlBOiBQb2x5LCBnZW9tZXRyeUI6IEdlb21ldHJ5KTogQXhpc1tdIHtcclxuICAgIGxldCBjZW50cm9pZFZlY3RvciA9IGdlb21ldHJ5Qi5jZW50cm9pZC5zdWIocG9seUEuY2VudHJvaWQsIF90ZW1wVmVjdG9yMSksXHJcbiAgICAgICAgYXhlc0E6IEF4aXNbXSwgYXhlc0I6IEF4aXNbXSxcclxuICAgICAgICBzdXBwb3J0SW5kZXhBOiBudW1iZXIsIHN1cHBvcnRJbmRleEI6IG51bWJlcixcclxuICAgICAgICBpLCByZXM6IEF4aXNbXSA9IFtdO1xyXG5cclxuICAgIGF4ZXNBID0gZmluZENsb3Nlc3RBeGVzKHBvbHlBLCBnZW9tZXRyeUIsIGNlbnRyb2lkVmVjdG9yKTtcclxuICAgIHN1cHBvcnRJbmRleEEgPSBheGVzQVswXS5zdXBwb3J0VmVydGV4SW5kZXg7XHJcblxyXG4gICAgaWYoZ2VvbWV0cnlCIGluc3RhbmNlb2YgUG9seSkge1xyXG4gICAgICAgIGF4ZXNCID0gZmluZENsb3Nlc3RBeGVzKGdlb21ldHJ5QiwgcG9seUEsIGNlbnRyb2lkVmVjdG9yLmludihjZW50cm9pZFZlY3RvcikpO1xyXG4gICAgICAgIHN1cHBvcnRJbmRleEIgPSBheGVzQlswXS5zdXBwb3J0VmVydGV4SW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGkgPSAwOyBpIDwgYXhlc0EubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBheGVzQVtpXS5vcHBvc2l0ZVZlcnRleEluZGV4ID0gc3VwcG9ydEluZGV4QjtcclxuICAgICAgICByZXMucHVzaChheGVzQVtpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoYXhlc0IpIHtcclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBheGVzQi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBheGVzQltpXS5vcHBvc2l0ZVZlcnRleEluZGV4ID0gc3VwcG9ydEluZGV4QTtcclxuICAgICAgICAgICAgcmVzLnB1c2goYXhlc0JbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBwb2x5IFxyXG4gKiBAcGFyYW0gZ2VvbWV0cnlcclxuICogQHBhcmFtIGNlbnRyb2lkVmVjdG9yIFxyXG4gKiBAcGFyYW0gb3Bwb3NpdGVDZW50cm9pZFxyXG4gKi9cclxuZnVuY3Rpb24gZmluZENsb3Nlc3RBeGVzKHBvbHk6IFBvbHksIGdlb21ldHJ5OiBHZW9tZXRyeSwgY2VudHJvaWRWZWN0b3I6IFZlY3Rvcik6IEF4aXNbXSB7XHJcbiAgICBsZXQgdjogVmVydGV4TGlzdCA9IHBvbHkudmVydGV4TGlzdCxcclxuICAgICAgICBheGVzOiBBeGlzW10gPSBwb2x5LmF4ZXMsXHJcbiAgICAgICAgdmVydGV4OiBWZWN0b3IsXHJcbiAgICAgICAgYXhpczogQXhpcyxcclxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyLFxyXG4gICAgICAgIG1pbkRpc3RhbmNlOiBudW1iZXIgPSBJbmZpbml0eSxcclxuICAgICAgICBkb3Q6IG51bWJlcixcclxuICAgICAgICBsYXN0RG90OiBudW1iZXIgPSAtMSxcclxuICAgICAgICBpbmRleDogbnVtYmVyID0gMCxcclxuICAgICAgICBvcHBvc2l0ZSA9IGdlb21ldHJ5IGluc3RhbmNlb2YgUG9seT8gZ2VvbWV0cnkudmVydGV4TGlzdDogZ2VvbWV0cnksXHJcbiAgICAgICAgb3Bwb3NpdGVDZW50cm9pZCA9IGdlb21ldHJ5LmNlbnRyb2lkLFxyXG4gICAgICAgIHJlczogQXhpc1tdID0gW107XHJcblxyXG4gICAgaWYoYXhlc1theGVzLmxlbmd0aCAtIDFdKSB7XHJcbiAgICAgICAgbGFzdERvdCA9IGF4ZXNbYXhlcy5sZW5ndGggLSAxXS52YWx1ZS5kb3QoY2VudHJvaWRWZWN0b3IpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZlcnRleCA9IHZbaV07XHJcbiAgICAgICAgYXhpcyA9IGF4ZXNbaV07XHJcblxyXG4gICAgICAgIGRvdCA9IGF4aXM/IGF4aXMudmFsdWUuZG90KGNlbnRyb2lkVmVjdG9yKTogLTE7XHJcbiBcclxuICAgICAgICBpZihkb3QgPD0gMCAmJiBsYXN0RG90IDw9IDApIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXN0YW5jZSA9ICh2ZXJ0ZXgueCAtIG9wcG9zaXRlQ2VudHJvaWQueCkgKiogMiArICh2ZXJ0ZXgueSAtIG9wcG9zaXRlQ2VudHJvaWQueSkgKiogMjtcclxuXHJcbiAgICAgICAgaWYoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xyXG4gICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgbGFzdERvdCA9IGRvdDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcHJldiA9IGluZGV4ID4gMD8gaW5kZXggLSAxOiB2Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgcHJldkF4aXMgPSBheGVzW3ByZXZdLFxyXG4gICAgICAgIGluZGV4QXhpcyA9IGF4ZXNbaW5kZXhdO1xyXG5cclxuICAgIGlmKHByZXZBeGlzKSB7XHJcbiAgICAgICAgcmVzLnB1c2gocHJldkF4aXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGluZGV4QXhpcykge1xyXG4gICAgICAgIHJlcy5wdXNoKGluZGV4QXhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHJlc1tpXS5zdXBwb3J0VmVydGV4SW5kZXggPSBpbmRleDtcclxuICAgICAgICByZXNbaV0ub3Bwb3NpdGUgPSBvcHBvc2l0ZTtcclxuICAgICAgICByZXNbaV0ub3JpZ2luID0gcG9seS52ZXJ0ZXhMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.vClip = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst contact_1 = __webpack_require__(3);\r\n/**\r\n * 寻找 incident edge\r\n * @param oppositeVertexList\r\n * @param normal\r\n * @param oppositeClosestIndex\r\n */\r\nfunction findIncidentEdge(oppositeVertexList, normal, oppositeClosestIndex) {\r\n    let prev, cur, next, index = oppositeClosestIndex, edge = { start: null, end: null };\r\n    cur = oppositeVertexList[index];\r\n    prev = oppositeVertexList[index === 0 ? oppositeVertexList.length - 1 : index - 1];\r\n    next = oppositeVertexList[(index + 1) % oppositeVertexList.length];\r\n    cur.sub(prev, vector_1._tempVector1);\r\n    cur.sub(next, vector_1._tempVector2);\r\n    let d1 = Math.abs(vector_1._tempVector1.dot(normal)), d2 = Math.abs(vector_1._tempVector2.dot(normal));\r\n    if (d1 < d2) {\r\n        edge.start = prev;\r\n        edge.end = cur;\r\n    }\r\n    else {\r\n        edge.start = cur;\r\n        edge.end = next;\r\n    }\r\n    return edge;\r\n}\r\n/**\r\n * 筛选两边\r\n * @param incEdge\r\n * @param refV\r\n * @param d\r\n */\r\nfunction clipSide(incEdge, refV, d) {\r\n    let d1 = incEdge.start.dot(refV) - d, d2 = incEdge.end.dot(refV) - d;\r\n    if (d1 > 0) {\r\n        return 0;\r\n    }\r\n    if (d2 > 0) {\r\n        return 1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * V-Clip 算法寻找碰撞点\r\n * 详见：https://github.com/phenomLi/Blog/issues/42\r\n * @param poly1\r\n * @param poly2\r\n * @param normal\r\n * @param depth\r\n */\r\nfunction vClip(minOverlap) {\r\n    let axis = minOverlap.axis, normal = axis.value, depth = minOverlap.value, incEdge, refEdge, contacts = [];\r\n    incEdge = findIncidentEdge(axis.opposite, normal, minOverlap.oppositeClosestIndex);\r\n    refEdge = axis.edge;\r\n    // ------------------------------------- 首先向 refEdge 的内部进行筛选 -------------------\r\n    let refV = refEdge.end.sub(refEdge.start).nol(), refN = normal, d = refEdge.start.dot(refN), d1 = incEdge.start.dot(refN) - d, d2 = incEdge.end.dot(refN) - d, incVertex = [], removeIndex = -1;\r\n    if (d1 <= 0) {\r\n        incVertex[0] = incEdge.start;\r\n    }\r\n    if (d2 <= 0) {\r\n        incVertex[1] = incEdge.end;\r\n    }\r\n    // ------------------------------------- 接下来进行两边筛选 -------------------\r\n    removeIndex = clipSide(incEdge, refV, refEdge.end.dot(refV));\r\n    if (removeIndex !== -1 && incVertex[removeIndex]) {\r\n        incVertex[removeIndex] = refEdge.end;\r\n    }\r\n    removeIndex = clipSide(incEdge, refV.inv(refV), refEdge.start.dot(refV));\r\n    if (removeIndex !== -1 && incVertex[removeIndex]) {\r\n        incVertex[removeIndex] = refEdge.start;\r\n    }\r\n    if (incVertex[0]) {\r\n        contacts.push(new contact_1.Contact(incVertex[0], depth));\r\n    }\r\n    if (incVertex[1]) {\r\n        contacts.push(new contact_1.Contact(incVertex[1], depth));\r\n    }\r\n    return contacts;\r\n}\r\nexports.vClip = vClip;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.vClosest = void 0;\r\nconst vertices_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(1);\r\nconst contact_1 = __webpack_require__(3);\r\n/**\r\n * 将顶点按照在法线上投影的大小顺序排序\r\n * @param vertexList\r\n * @param normal\r\n */\r\nfunction findClosestVertexIndex(vertexList, normal) {\r\n    let projection, index;\r\n    let maxProjection = -Infinity;\r\n    for (let i = 0; i < vertexList.length; i++) {\r\n        projection = vertexList[i].dot(normal);\r\n        if (projection > maxProjection) {\r\n            maxProjection = projection;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n/**\r\n * 最近内部顶点法寻找碰撞点\r\n * 详见：https://github.com/phenomLi/Blog/issues/41\r\n * @param vertexListA\r\n * @param vertexListB\r\n * @param normal\r\n * @param depth\r\n */\r\nfunction vClosest(minOverlap) {\r\n    let contacts = [], axis = minOverlap.axis, normal = axis.value, normalInv = axis.value.inv(vector_1._tempVector3), index, prev, next, depth = minOverlap.value, vertexListA = axis.origin, vertexListB = axis.opposite, testVertices = [], i;\r\n    // 寻找多边形A最接近多边形B的两个点\r\n    index = findClosestVertexIndex(vertexListA, normal);\r\n    prev = index > 0 ? index - 1 : vertexListA.length - 1;\r\n    next = index < vertexListA.length - 1 ? index + 1 : 0;\r\n    testVertices.push(vertexListA[prev]);\r\n    testVertices.push(vertexListA[index]);\r\n    testVertices.push(vertexListA[next]);\r\n    for (i = 0; i < testVertices.length; i++) {\r\n        // 查看这些点是否在多边形B内部\r\n        if (vertices_1.Vertices.isContains(vertexListB, testVertices[i])) {\r\n            // 如果是，则这个点记为一个碰撞点\r\n            contacts.push(new contact_1.Contact(testVertices[i], depth));\r\n        }\r\n    }\r\n    if (contacts.length >= 2) {\r\n        return contacts;\r\n    }\r\n    ;\r\n    testVertices.length = 0;\r\n    // 同理上面\r\n    index = findClosestVertexIndex(vertexListB, normalInv);\r\n    prev = index > 0 ? index - 1 : vertexListB.length - 1;\r\n    next = index < vertexListB.length - 1 ? index + 1 : 0;\r\n    testVertices.push(vertexListB[prev]);\r\n    testVertices.push(vertexListB[index]);\r\n    testVertices.push(vertexListB[next]);\r\n    for (i = 0; i < testVertices.length; i++) {\r\n        if (vertices_1.Vertices.isContains(vertexListA, testVertices[i])) {\r\n            contacts.push(new contact_1.Contact(testVertices[i], depth));\r\n        }\r\n    }\r\n    // 边界情况：即没有碰撞点的情况\r\n    if (contacts.length < 1) {\r\n        contacts.push(new contact_1.Contact(vertexListB[index], depth));\r\n    }\r\n    return contacts;\r\n}\r\nexports.vClosest = vClosest;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL3ZDbG9zZXN0LnRzPzAzZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMENBQWdFO0FBQ2hFLHdDQUFzRDtBQUN0RCx5Q0FBZ0Q7QUFJaEQ7Ozs7R0FJRztBQUNILFNBQVMsc0JBQXNCLENBQUMsVUFBc0IsRUFBRSxNQUFjO0lBQ2xFLElBQUksVUFBa0IsRUFDbEIsS0FBYSxDQUFDO0lBRWxCLElBQUksYUFBYSxHQUFHLENBQUMsUUFBUSxDQUFDO0lBRTlCLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLElBQUcsVUFBVSxHQUFHLGFBQWEsRUFBRTtZQUMzQixhQUFhLEdBQUcsVUFBVSxDQUFDO1lBQzNCLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDYjtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUdEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixRQUFRLENBQUMsVUFBc0I7SUFDM0MsSUFBSSxRQUFRLEdBQWMsRUFBRSxFQUN4QixJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksRUFDdEIsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQ25CLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxxQkFBWSxDQUFDLEVBQ3hDLEtBQWEsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUN6QyxLQUFLLEdBQVcsVUFBVSxDQUFDLEtBQUssRUFDaEMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ3pCLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBc0IsRUFDekMsWUFBWSxHQUFhLEVBQUUsRUFDM0IsQ0FBQyxDQUFDO0lBRU4sb0JBQW9CO0lBQ3BCLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEQsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEQsSUFBSSxHQUFHLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFckMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLGlCQUFpQjtRQUNqQixJQUFHLG1CQUFRLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRCxrQkFBa0I7WUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDdEQ7S0FDSjtJQUVELElBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDckIsT0FBTyxRQUFRLENBQUM7S0FDbkI7SUFBQSxDQUFDO0lBRUYsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFeEIsT0FBTztJQUNQLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEQsSUFBSSxHQUFHLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFckMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUcsbUJBQVEsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3REO0tBQ0o7SUFFRCxpQkFBaUI7SUFDakIsSUFBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNwQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUN6RDtJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUF4REQsNEJBd0RDIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpcywgVmVydGV4TGlzdCwgVmVydGljZXMgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcbmltcG9ydCB7IFZlY3RvciwgX3RlbXBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IENvbnRhY3QgfSBmcm9tIFwiLi4vY29uc3RyYWludC9jb250YWN0XCI7XHJcbmltcG9ydCB7IE1pbk92ZXJsYXAgfSBmcm9tIFwiLi9zYXRcIjtcclxuXHJcblxyXG4vKipcclxuICog5bCG6aG254K55oyJ54Wn5Zyo5rOV57q/5LiK5oqV5b2x55qE5aSn5bCP6aG65bqP5o6S5bqPXHJcbiAqIEBwYXJhbSB2ZXJ0ZXhMaXN0IFxyXG4gKiBAcGFyYW0gbm9ybWFsIFxyXG4gKi9cclxuZnVuY3Rpb24gZmluZENsb3Nlc3RWZXJ0ZXhJbmRleCh2ZXJ0ZXhMaXN0OiBWZXJ0ZXhMaXN0LCBub3JtYWw6IFZlY3Rvcik6IG51bWJlciB7XHJcbiAgICBsZXQgcHJvamVjdGlvbjogbnVtYmVyLFxyXG4gICAgICAgIGluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgbGV0IG1heFByb2plY3Rpb24gPSAtSW5maW5pdHk7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZlcnRleExpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBwcm9qZWN0aW9uID0gdmVydGV4TGlzdFtpXS5kb3Qobm9ybWFsKTtcclxuXHJcbiAgICAgICAgaWYocHJvamVjdGlvbiA+IG1heFByb2plY3Rpb24pIHtcclxuICAgICAgICAgICAgbWF4UHJvamVjdGlvbiA9IHByb2plY3Rpb247XHJcbiAgICAgICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluZGV4O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOacgOi/keWGhemDqOmhtueCueazleWvu+aJvueisOaSnueCuVxyXG4gKiDor6bop4HvvJpodHRwczovL2dpdGh1Yi5jb20vcGhlbm9tTGkvQmxvZy9pc3N1ZXMvNDFcclxuICogQHBhcmFtIHZlcnRleExpc3RBIFxyXG4gKiBAcGFyYW0gdmVydGV4TGlzdEIgXHJcbiAqIEBwYXJhbSBub3JtYWwgXHJcbiAqIEBwYXJhbSBkZXB0aFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZDbG9zZXN0KG1pbk92ZXJsYXA6IE1pbk92ZXJsYXApOiBDb250YWN0W10ge1xyXG4gICAgbGV0IGNvbnRhY3RzOiBDb250YWN0W10gPSBbXSxcclxuICAgICAgICBheGlzID0gbWluT3ZlcmxhcC5heGlzLFxyXG4gICAgICAgIG5vcm1hbCA9IGF4aXMudmFsdWUsXHJcbiAgICAgICAgbm9ybWFsSW52ID0gYXhpcy52YWx1ZS5pbnYoX3RlbXBWZWN0b3IzKSxcclxuICAgICAgICBpbmRleDogbnVtYmVyLCBwcmV2OiBudW1iZXIsIG5leHQ6IG51bWJlcixcclxuICAgICAgICBkZXB0aDogbnVtYmVyID0gbWluT3ZlcmxhcC52YWx1ZSxcclxuICAgICAgICB2ZXJ0ZXhMaXN0QSA9IGF4aXMub3JpZ2luLFxyXG4gICAgICAgIHZlcnRleExpc3RCID0gYXhpcy5vcHBvc2l0ZSBhcyBWZXJ0ZXhMaXN0LFxyXG4gICAgICAgIHRlc3RWZXJ0aWNlczogVmVjdG9yW10gPSBbXSxcclxuICAgICAgICBpO1xyXG5cclxuICAgIC8vIOWvu+aJvuWkmui+ueW9okHmnIDmjqXov5HlpJrovrnlvaJC55qE5Lik5Liq54K5XHJcbiAgICBpbmRleCA9IGZpbmRDbG9zZXN0VmVydGV4SW5kZXgodmVydGV4TGlzdEEsIG5vcm1hbCk7XHJcbiAgICBwcmV2ID0gaW5kZXggPiAwPyBpbmRleCAtIDE6IHZlcnRleExpc3RBLmxlbmd0aCAtIDE7XHJcbiAgICBuZXh0ID0gaW5kZXggPCB2ZXJ0ZXhMaXN0QS5sZW5ndGggLSAxPyBpbmRleCArIDE6IDA7XHJcblxyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEFbcHJldl0pO1xyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEFbaW5kZXhdKTtcclxuICAgIHRlc3RWZXJ0aWNlcy5wdXNoKHZlcnRleExpc3RBW25leHRdKTtcclxuXHJcbiAgICBmb3IoaSA9IDA7IGkgPCB0ZXN0VmVydGljZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyDmn6XnnIvov5nkupvngrnmmK/lkKblnKjlpJrovrnlvaJC5YaF6YOoXHJcbiAgICAgICAgaWYoVmVydGljZXMuaXNDb250YWlucyh2ZXJ0ZXhMaXN0QiwgdGVzdFZlcnRpY2VzW2ldKSkge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzmmK/vvIzliJnov5nkuKrngrnorrDkuLrkuIDkuKrnorDmkp7ngrlcclxuICAgICAgICAgICAgY29udGFjdHMucHVzaChuZXcgQ29udGFjdCh0ZXN0VmVydGljZXNbaV0sIGRlcHRoKSk7XHJcbiAgICAgICAgfSBcclxuICAgIH1cclxuXHJcbiAgICBpZihjb250YWN0cy5sZW5ndGggPj0gMikge1xyXG4gICAgICAgIHJldHVybiBjb250YWN0cztcclxuICAgIH07XHJcblxyXG4gICAgdGVzdFZlcnRpY2VzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgLy8g5ZCM55CG5LiK6Z2iXHJcbiAgICBpbmRleCA9IGZpbmRDbG9zZXN0VmVydGV4SW5kZXgodmVydGV4TGlzdEIsIG5vcm1hbEludik7XHJcbiAgICBwcmV2ID0gaW5kZXggPiAwPyBpbmRleCAtIDE6IHZlcnRleExpc3RCLmxlbmd0aCAtIDE7XHJcbiAgICBuZXh0ID0gaW5kZXggPCB2ZXJ0ZXhMaXN0Qi5sZW5ndGggLSAxPyBpbmRleCArIDE6IDA7XHJcblxyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEJbcHJldl0pO1xyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEJbaW5kZXhdKTtcclxuICAgIHRlc3RWZXJ0aWNlcy5wdXNoKHZlcnRleExpc3RCW25leHRdKTtcclxuXHJcbiAgICBmb3IoaSA9IDA7IGkgPCB0ZXN0VmVydGljZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZihWZXJ0aWNlcy5pc0NvbnRhaW5zKHZlcnRleExpc3RBLCB0ZXN0VmVydGljZXNbaV0pKSB7XHJcbiAgICAgICAgICAgIGNvbnRhY3RzLnB1c2gobmV3IENvbnRhY3QodGVzdFZlcnRpY2VzW2ldLCBkZXB0aCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDovrnnlYzmg4XlhrXvvJrljbPmsqHmnInnorDmkp7ngrnnmoTmg4XlhrVcclxuICAgIGlmKGNvbnRhY3RzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICBjb250YWN0cy5wdXNoKG5ldyBDb250YWN0KHZlcnRleExpc3RCW2luZGV4XSwgZGVwdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29udGFjdHM7XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Sleeping = void 0;\r\nconst util_1 = __webpack_require__(0);\r\n/**\r\n * 休眠管理器\r\n */\r\nclass Sleeping {\r\n    constructor(opt) {\r\n        this.sleepThreshold = 60;\r\n        this.sleepMotionThreshold = 0.0007;\r\n        this.wakeMotionThreshold = 0.8;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 使刚体睡眠\r\n     * @param body\r\n     */\r\n    sleep(body) {\r\n        if (body.kinetic)\r\n            return;\r\n        body.sleeping = true;\r\n        body.sleepCounter = this.sleepThreshold;\r\n        body.velocity.x = 0;\r\n        body.velocity.y = 0;\r\n        body.angularVelocity = 0;\r\n        body.motion = 0;\r\n        body.sleepStart();\r\n    }\r\n    /**\r\n     * 唤醒刚体\r\n     * @param body\r\n     */\r\n    wake(body) {\r\n        body.sleeping = false;\r\n        body.sleepCounter = 0;\r\n        body.sleepEnd();\r\n    }\r\n    /**\r\n     * 改变刚体的状态，使其唤醒或休眠\r\n     * @param bodies\r\n     */\r\n    update(bodies) {\r\n        let body, i;\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            let motion = body.motion;\r\n            // 若刚体合外力不为0，则唤醒\r\n            // if (body.force.x !== 0 || body.force.y !== 0) {\r\n            //     this.wake(body);\r\n            //     continue;\r\n            // }\r\n            // 若刚体已经休眠，则返回\r\n            if (body.sleeping)\r\n                continue;\r\n            // 若刚体动量 < 休眠阈值，则刚体休眠计算 + 1\r\n            if (motion < this.sleepMotionThreshold) {\r\n                body.sleepCounter += 1;\r\n                // 若刚体休眠计数器达到休眠阈值，则进行休眠\r\n                if (body.sleepCounter >= this.sleepThreshold) {\r\n                    this.sleep(body);\r\n                }\r\n            }\r\n            else {\r\n                if (body.sleepCounter > 0) {\r\n                    body.sleepCounter -= 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 刚体碰撞后，判断是否需要唤醒\r\n     * @param manifolds\r\n     */\r\n    afterCollision(manifolds) {\r\n        let manifold, bodyA, bodyB;\r\n        // wake up bodies involved in collisions\r\n        for (var i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            bodyA = manifold.bodyA;\r\n            bodyB = manifold.bodyB;\r\n            // 若A为休眠状态且B的动量大于休眠阈值，唤醒A\r\n            if (!bodyA.static && bodyA.sleeping && bodyB.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyA);\r\n                continue;\r\n            }\r\n            // B同理上面\r\n            if (!bodyB.static && bodyB.sleeping && bodyA.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyB);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Sleeping = Sleeping;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9zbGVlcGluZy50cz9kNWNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHNDQUFzQztBQUl0Qzs7R0FFRztBQUVILE1BQWEsUUFBUTtJQVdqQixZQUFZLEdBQWM7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE1BQU0sQ0FBQztRQUNuQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDO1FBRS9CLFdBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsSUFBVTtRQUNaLElBQUcsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPO1FBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUV4QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxDQUFDLElBQVU7UUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxNQUFjO1FBQ2pCLElBQUksSUFBVSxFQUNWLENBQUMsQ0FBQztRQUVOLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFekIsZ0JBQWdCO1lBQ2hCLGtEQUFrRDtZQUNsRCx1QkFBdUI7WUFDdkIsZ0JBQWdCO1lBQ2hCLElBQUk7WUFFSixjQUFjO1lBQ2QsSUFBRyxJQUFJLENBQUMsUUFBUTtnQkFBRSxTQUFTO1lBRTNCLDJCQUEyQjtZQUMzQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO2dCQUV2Qix1QkFBdUI7Z0JBQ3ZCLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO29CQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNwQjthQUNKO2lCQUNJO2dCQUNELElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO2lCQUMxQjthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLFNBQXFCO1FBQ2hDLElBQUksUUFBa0IsRUFDbEIsS0FBVyxFQUFFLEtBQVcsQ0FBQztRQUU3Qix3Q0FBd0M7UUFDeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUN2QixLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUV2Qix5QkFBeUI7WUFDekIsSUFBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDM0UsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDakIsU0FBUzthQUNaO1lBRUQsUUFBUTtZQUNSLElBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzNFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pCLFNBQVM7YUFDWjtTQUNKO0lBQ0wsQ0FBQztDQUNKO0FBbEhELDRCQWtIQyIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHkgfSBmcm9tIFwiLi4vYm9keS9ib2R5XCI7XHJcbmltcG9ydCB7IEVuZ2luZU9wdCB9IGZyb20gXCIuL2VuZ2luZVwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IE1hbmlmb2xkIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9tYW5pZm9sZFwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDkvJHnnKDnrqHnkIblmahcclxuICovXHJcblxyXG5leHBvcnQgY2xhc3MgU2xlZXBpbmcge1xyXG5cclxuICAgIC8vIOWIpOWumuS8keecoOW4p+agkemYiOWAvFxyXG4gICAgc2xlZXBUaHJlc2hvbGQ6IG51bWJlcjtcclxuICAgIC8vIOWIpOWumuS8keecoOWKqOmHj+mYiOWAvFxyXG4gICAgc2xlZXBNb3Rpb25UaHJlc2hvbGQ6IG51bWJlcjtcclxuICAgIC8vIOWIpOWumuWUpOmGkuWKqOmHj+mYiOWAvFxyXG4gICAgd2FrZU1vdGlvblRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgLy8g5YGP5beu57O75pWwXHJcbiAgICBtaW5CaWFzOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLnNsZWVwVGhyZXNob2xkID0gNjA7XHJcbiAgICAgICAgdGhpcy5zbGVlcE1vdGlvblRocmVzaG9sZCA9IDAuMDAwNztcclxuICAgICAgICB0aGlzLndha2VNb3Rpb25UaHJlc2hvbGQgPSAwLjg7XHJcblxyXG4gICAgICAgIFV0aWwubWVyZ2UodGhpcywgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS9v+WImuS9k+edoeecoFxyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKi9cclxuICAgIHNsZWVwKGJvZHk6IEJvZHkpIHtcclxuICAgICAgICBpZihib2R5LmtpbmV0aWMpIHJldHVybjtcclxuXHJcbiAgICAgICAgYm9keS5zbGVlcGluZyA9IHRydWU7XHJcbiAgICAgICAgYm9keS5zbGVlcENvdW50ZXIgPSB0aGlzLnNsZWVwVGhyZXNob2xkO1xyXG5cclxuICAgICAgICBib2R5LnZlbG9jaXR5LnggPSAwO1xyXG4gICAgICAgIGJvZHkudmVsb2NpdHkueSA9IDA7XHJcbiAgICAgICAgYm9keS5hbmd1bGFyVmVsb2NpdHkgPSAwO1xyXG4gICAgICAgIGJvZHkubW90aW9uID0gMDtcclxuXHJcbiAgICAgICAgYm9keS5zbGVlcFN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDllKTphpLliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICB3YWtlKGJvZHk6IEJvZHkpIHtcclxuICAgICAgICBib2R5LnNsZWVwaW5nID0gZmFsc2U7XHJcbiAgICAgICAgYm9keS5zbGVlcENvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICBib2R5LnNsZWVwRW5kKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmlLnlj5jliJrkvZPnmoTnirbmgIHvvIzkvb/lhbbllKTphpLmiJbkvJHnnKBcclxuICAgICAqIEBwYXJhbSBib2RpZXNcclxuICAgICAqL1xyXG4gICAgdXBkYXRlKGJvZGllczogQm9keVtdKSB7XHJcbiAgICAgICAgbGV0IGJvZHk6IEJvZHksXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1vdGlvbiA9IGJvZHkubW90aW9uO1xyXG5cclxuICAgICAgICAgICAgLy8g6Iul5Yia5L2T5ZCI5aSW5Yqb5LiN5Li6MO+8jOWImeWUpOmGklxyXG4gICAgICAgICAgICAvLyBpZiAoYm9keS5mb3JjZS54ICE9PSAwIHx8IGJvZHkuZm9yY2UueSAhPT0gMCkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy53YWtlKGJvZHkpO1xyXG4gICAgICAgICAgICAvLyAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOiLpeWImuS9k+W3sue7j+S8keecoO+8jOWImei/lOWbnlxyXG4gICAgICAgICAgICBpZihib2R5LnNsZWVwaW5nKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIOiLpeWImuS9k+WKqOmHjyA8IOS8keecoOmYiOWAvO+8jOWImeWImuS9k+S8keecoOiuoeeulyArIDFcclxuICAgICAgICAgICAgaWYgKG1vdGlvbiA8IHRoaXMuc2xlZXBNb3Rpb25UaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGJvZHkuc2xlZXBDb3VudGVyICs9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6Iul5Yia5L2T5LyR55yg6K6h5pWw5Zmo6L6+5Yiw5LyR55yg6ZiI5YC877yM5YiZ6L+b6KGM5LyR55ygXHJcbiAgICAgICAgICAgICAgICBpZiAoYm9keS5zbGVlcENvdW50ZXIgPj0gdGhpcy5zbGVlcFRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xlZXAoYm9keSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkuc2xlZXBDb3VudGVyID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkuc2xlZXBDb3VudGVyIC09IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJrkvZPnorDmkp7lkI7vvIzliKTmlq3mmK/lkKbpnIDopoHllKTphpJcclxuICAgICAqIEBwYXJhbSBtYW5pZm9sZHNcclxuICAgICAqL1xyXG4gICAgYWZ0ZXJDb2xsaXNpb24obWFuaWZvbGRzOiBNYW5pZm9sZFtdKSB7XHJcbiAgICAgICAgbGV0IG1hbmlmb2xkOiBNYW5pZm9sZCxcclxuICAgICAgICAgICAgYm9keUE6IEJvZHksIGJvZHlCOiBCb2R5O1xyXG5cclxuICAgICAgICAvLyB3YWtlIHVwIGJvZGllcyBpbnZvbHZlZCBpbiBjb2xsaXNpb25zXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYW5pZm9sZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWFuaWZvbGQgPSBtYW5pZm9sZHNbaV07XHJcbiAgICAgICAgICAgIGJvZHlBID0gbWFuaWZvbGQuYm9keUE7XHJcbiAgICAgICAgICAgIGJvZHlCID0gbWFuaWZvbGQuYm9keUI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDoi6VB5Li65LyR55yg54q25oCB5LiUQueahOWKqOmHj+Wkp+S6juS8keecoOmYiOWAvO+8jOWUpOmGkkFcclxuICAgICAgICAgICAgaWYoIWJvZHlBLnN0YXRpYyAmJiBib2R5QS5zbGVlcGluZyAmJiBib2R5Qi5tb3Rpb24gPiB0aGlzLndha2VNb3Rpb25UaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2FrZShib2R5QSk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQuWQjOeQhuS4iumdolxyXG4gICAgICAgICAgICBpZighYm9keUIuc3RhdGljICYmIGJvZHlCLnNsZWVwaW5nICYmIGJvZHlBLm1vdGlvbiA+IHRoaXMud2FrZU1vdGlvblRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YWtlKGJvZHlCKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ManifoldTable = void 0;\r\nconst manifold_1 = __webpack_require__(6);\r\nconst util_1 = __webpack_require__(0);\r\nclass ManifoldTable {\r\n    constructor(opt) {\r\n        this.enableCache = false;\r\n        this.manifoldRemoveThreshold = 1000;\r\n        this.table = {};\r\n        this.list = [];\r\n        this.collisionStart = [];\r\n        this.collisionEnd = [];\r\n        this.collisionActive = [];\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 更新所有流形\r\n     * @param collisions\r\n     * @param timeStamp\r\n     */\r\n    update(collisions, timeStamp) {\r\n        let manifold, id, collision, i;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n        // 清空确认激活状态\r\n        for (i = 0; i < this.list.length; i++) {\r\n            this.list[i].confirmedActive = false;\r\n        }\r\n        for (i = 0; i < collisions.length; i++) {\r\n            collision = collisions[i];\r\n            // 只有真实发生碰撞的碰撞对才会更新对应的流形\r\n            if (collision.collide) {\r\n                id = util_1.Util.compositeId(collision.partA.id, collision.partB.id);\r\n                manifold = this.table[id];\r\n                // 若对应流形存在\r\n                if (manifold) {\r\n                    // 若流形上一刻已经被激活\r\n                    if (manifold.isActive) {\r\n                        this.collisionActive.push(manifold);\r\n                    }\r\n                    // 否则表明该流形第一次发生碰撞\r\n                    else {\r\n                        this.collisionStart.push(manifold);\r\n                    }\r\n                    manifold.update(collision, timeStamp);\r\n                    manifold.confirmedActive = true;\r\n                }\r\n                // 若不存在，则创建对应流形\r\n                else {\r\n                    manifold = new manifold_1.Manifold(collision, timeStamp);\r\n                    this.table[id] = manifold;\r\n                    this.list.push(manifold);\r\n                    this.collisionStart.push(manifold);\r\n                }\r\n                collision.bodyA.onCollide(collision.bodyB);\r\n                collision.bodyB.onCollide(collision.bodyA);\r\n            }\r\n        }\r\n        // 遍历查找上一次发生碰撞且当前没有发生碰撞的流形\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            collision = manifold.collision;\r\n            // 将其激活状态取消\r\n            if (manifold.isActive && !manifold.confirmedActive) {\r\n                manifold.toggleActive(false, timeStamp);\r\n                // 标记为碰撞结束\r\n                this.collisionEnd.push(manifold);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 过滤超时的碰撞流形\r\n     * @param timeStamp\r\n     */\r\n    filter(timeStamp) {\r\n        let manifold, collision, i;\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            collision = manifold.collision;\r\n            // 若流形的两刚体有其一处于休眠状态，更新时间，不清除\r\n            if (manifold.bodyA.sleeping || manifold.bodyB.sleeping) {\r\n                manifold.timeUpdated = timeStamp;\r\n                continue;\r\n            }\r\n            // 若流形上次更新的时间离现在已经大于设定阈值，则需要清除\r\n            if (timeStamp - manifold.timeUpdated > this.manifoldRemoveThreshold) {\r\n                let bodyA = collision.bodyA, bodyB = collision.bodyB;\r\n                delete bodyA.contactBodies[bodyB.stringId];\r\n                delete bodyB.contactBodies[bodyA.stringId];\r\n                delete this.table[manifold.id];\r\n                this.list.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 清空流形表和队列\r\n     */\r\n    clear() {\r\n        this.table = {};\r\n        this.list.length = 0;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n    }\r\n}\r\nexports.ManifoldTable = ManifoldTable;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL21hbmlmb2xkVGFibGUudHM/MzVjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwQ0FBaUQ7QUFDakQsc0NBQXNDO0FBTXRDLE1BQWEsYUFBYTtJQWdCdEIsWUFBWSxHQUFjO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUUxQixXQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUF1QixFQUFFLFNBQWlCO1FBQzdDLElBQUksUUFBa0IsRUFDbEIsRUFBVSxFQUNWLFNBQW9CLEVBQ3BCLENBQUMsQ0FBQztRQUVOLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWhDLFdBQVc7UUFDWCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztTQUN4QztRQUVELEtBQUksQ0FBQyxHQUFHLENBQUMs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QUFDLHVCQUF1QixFQUFFO2dCQUNoRSxJQUFJLEtBQUssR0FBUyxTQUFTLENBQUMsS0FBSyxFQUM3QixLQUFLLEdBQVMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFFbEMsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixDQUFDLEVBQUUsQ0FBQzthQUNQO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQTlJRCxzQ0E4SUMiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbmdpbmVPcHQgfSBmcm9tIFwiLi4vY29yZS9lbmdpbmVcIjtcclxuaW1wb3J0IHsgTWFuaWZvbGQsIENvbGxpc2lvbiB9IGZyb20gXCIuL21hbmlmb2xkXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNYW5pZm9sZFRhYmxlIHtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+e8k+WtmFxyXG4gICAgZW5hYmxlQ2FjaGU6IGJvb2xlYW47XHJcbiAgICAvLyDnvJPlrZjnp7vpmaTml7bpl7TpmIjlgLxcclxuICAgIG1hbmlmb2xkUmVtb3ZlVGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICAvLyDmtYHlvaLooahcclxuICAgIHRhYmxlOiB7W2tleTogc3RyaW5nXTogTWFuaWZvbGR9O1xyXG4gICAgLy8g5rWB5b2i6Zif5YiXXHJcbiAgICBsaXN0OiBNYW5pZm9sZFtdO1xyXG4gICAgLy8g5byA5aeL56Kw5pKe55qE56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25TdGFydDogTWFuaWZvbGRbXTtcclxuICAgIC8vIOa/gOa0u+eisOaSnueahOeisOaSnuWvuVxyXG4gICAgY29sbGlzaW9uQWN0aXZlOiBNYW5pZm9sZFtdO1xyXG4gICAgLy8g57uT5p2f56Kw5pKe55qE56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25FbmQ6IE1hbmlmb2xkW107XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLmVuYWJsZUNhY2hlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYW5pZm9sZFJlbW92ZVRocmVzaG9sZCA9IDEwMDA7XHJcbiAgICAgICAgdGhpcy50YWJsZSA9IHt9O1xyXG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkVuZCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQWN0aXZlID0gW107XHJcblxyXG4gICAgICAgIFV0aWwubWVyZ2UodGhpcywgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOaJgOaciea1geW9olxyXG4gICAgICogQHBhcmFtIGNvbGxpc2lvbnMgXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIFxyXG4gICAgICovXHJcbiAgICB1cGRhdGUoY29sbGlzaW9uczogQ29sbGlzaW9uW10sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG1hbmlmb2xkOiBNYW5pZm9sZCxcclxuICAgICAgICAgICAgaWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgY29sbGlzaW9uOiBDb2xsaXNpb24sXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkVuZC5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIC8vIOa4heepuuehruiupOa/gOa0u+eKtuaAgVxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0W2ldLmNvbmZpcm1lZEFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY29sbGlzaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xyXG5cclxuICAgICAgICAgICAgLy8g5Y+q5pyJ55yf5a6e5Y+R55Sf56Kw5pKe55qE56Kw5pKe5a+55omN5Lya5pu05paw5a+55bqU55qE5rWB5b2iXHJcbiAgICAgICAgICAgIGlmKGNvbGxpc2lvbi5jb2xsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZCA9IFV0aWwuY29tcG9zaXRlSWQoY29sbGlzaW9uLnBhcnRBLmlkLCBjb2xsaXNpb24ucGFydEIuaWQpO1xyXG4gICAgICAgICAgICAgICAgbWFuaWZvbGQgPSB0aGlzLnRhYmxlW2lkXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoi6Xlr7nlupTmtYHlvaLlrZjlnKhcclxuICAgICAgICAgICAgICAgIGlmKG1hbmlmb2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6Iul5rWB5b2i5LiK5LiA5Yi75bey57uP6KKr5r+A5rS7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobWFuaWZvbGQuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25BY3RpdmUucHVzaChtYW5pZm9sZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWQpuWImeihqOaYjuivpea1geW9ouesrOS4gOasoeWPkeeUn+eisOaSnlxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxpc2lvblN0YXJ0LnB1c2gobWFuaWZvbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFuaWZvbGQudXBkYXRlKGNvbGxpc2lvbiwgdGltZVN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZC5jb25maXJtZWRBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6Iul5LiN5a2Y5Zyo77yM5YiZ5Yib5bu65a+55bqU5rWB5b2iXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZCA9IG5ldyBNYW5pZm9sZChjb2xsaXNpb24sIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YWJsZVtpZF0gPSBtYW5pZm9sZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChtYW5pZm9sZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQucHVzaChtYW5pZm9sZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHlBLm9uQ29sbGlkZShjb2xsaXNpb24uYm9keUIpO1xyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHlCLm9uQ29sbGlkZShjb2xsaXNpb24uYm9keUEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDpgY3ljobmn6Xmib7kuIrkuIDmrKHlj5HnlJ/norDmkp7kuJTlvZPliY3msqHmnInlj5HnlJ/norDmkp7nmoTmtYHlvaJcclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWFuaWZvbGQgPSB0aGlzLmxpc3RbaV07XHJcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IG1hbmlmb2xkLmNvbGxpc2lvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIOWwhuWFtua/gOa0u+eKtuaAgeWPlua2iFxyXG4gICAgICAgICAgICBpZihtYW5pZm9sZC5pc0FjdGl2ZSAmJiAhbWFuaWZvbGQuY29uZmlybWVkQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBtYW5pZm9sZC50b2dnbGVBY3RpdmUoZmFsc2UsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAvLyDmoIforrDkuLrnorDmkp7nu5PmnZ9cclxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uRW5kLnB1c2gobWFuaWZvbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L+H5ruk6LaF5pe255qE56Kw5pKe5rWB5b2iXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIFxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIodGltZVN0YW1wOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbWFuaWZvbGQ6IE1hbmlmb2xkLFxyXG4gICAgICAgICAgICBjb2xsaXNpb246IENvbGxpc2lvbixcclxuICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1hbmlmb2xkID0gdGhpcy5saXN0W2ldO1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBtYW5pZm9sZC5jb2xsaXNpb247XHJcblxyXG4gICAgICAgICAgICAvLyDoi6XmtYHlvaLnmoTkuKTliJrkvZPmnInlhbbkuIDlpITkuo7kvJHnnKDnirbmgIHvvIzmm7TmlrDml7bpl7TvvIzkuI3muIXpmaRcclxuICAgICAgICAgICAgaWYobWFuaWZvbGQuYm9keUEuc2xlZXBpbmcgfHwgbWFuaWZvbGQuYm9keUIuc2xlZXBpbmcpIHtcclxuICAgICAgICAgICAgICAgIG1hbmlmb2xkLnRpbWVVcGRhdGVkID0gdGltZVN0YW1wO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOiLpea1geW9ouS4iuasoeabtOaWsOeahOaXtumXtOemu+eOsOWcqOW3sue7j+Wkp+S6juiuvuWumumYiOWAvO+8jOWImemcgOimgea4hemZpFxyXG4gICAgICAgICAgICBpZih0aW1lU3RhbXAgLSBtYW5pZm9sZC50aW1lVXBkYXRlZCA+IHRoaXMubWFuaWZvbGRSZW1vdmVUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBib2R5QTogQm9keSA9IGNvbGxpc2lvbi5ib2R5QSxcclxuICAgICAgICAgICAgICAgICAgICBib2R5QjogQm9keSA9IGNvbGxpc2lvbi5ib2R5QjtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keUEuY29udGFjdEJvZGllc1tib2R5Qi5zdHJpbmdJZF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keUIuY29udGFjdEJvZGllc1tib2R5QS5zdHJpbmdJZF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50YWJsZVttYW5pZm9sZC5pZF07XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4heepuua1geW9ouihqOWSjOmYn+WIl1xyXG4gICAgICovXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLnRhYmxlID0ge307XHJcbiAgICAgICAgdGhpcy5saXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25TdGFydC5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BodiesFactory = void 0;\r\nconst circle_1 = __webpack_require__(23);\r\nconst polygon_1 = __webpack_require__(8);\r\nconst rect_1 = __webpack_require__(24);\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\nclass BodiesFactory {\r\n    /**\r\n     * 创造圆形\r\n     * @param x x\r\n     * @param y y\r\n     * @param radius 半径\r\n     * @param opt 配置项\r\n     */\r\n    Circle(x, y, radius, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            radius: radius\r\n        });\r\n        return new circle_1.Circle(opt);\r\n        ;\r\n    }\r\n    /**\r\n     * 创造多边形\r\n     * @param x x\r\n     * @param y y\r\n     * @param v 顶点集\r\n     * @param opt 配置项\r\n     */\r\n    Polygon(x, y, v, opt) {\r\n        opt = opt || {};\r\n        let vertices = v.map(vertex => new vector_1.Vector(vertex[0], vertex[1]));\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            vertices\r\n        });\r\n        return new polygon_1.Polygon(opt);\r\n    }\r\n    /**\r\n     * 创造矩形\r\n     * @param x x\r\n     * @param y y\r\n     * @param width 宽\r\n     * @param height 高\r\n     * @param opt 配置项\r\n     */\r\n    Rect(x, y, width, height, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            width,\r\n            height\r\n        });\r\n        return new rect_1.Rect(opt);\r\n    }\r\n}\r\nexports.BodiesFactory = BodiesFactory;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9ib2RpZXNGYWN0b3J5LnRzPzE2ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQW1EO0FBQ25ELHlDQUFzRDtBQUN0RCx1Q0FBNkM7QUFDN0Msd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUl0QyxNQUFhLGFBQWE7SUFFdEI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsTUFBYyxFQUFFLEdBQWU7UUFDeEQsR0FBRyxHQUFHLEdBQUcsSUFBZSxFQUFFLENBQUM7UUFFM0IsV0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDYixNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4QixNQUFNLEVBQUUsTUFBTTtTQUNqQixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksZUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUEsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsT0FBTyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBa0IsRUFBRSxHQUFnQjtRQUM5RCxHQUFHLEdBQUcsR0FBRyxJQUFnQixFQUFFLENBQUM7UUFFNUIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksZUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpFLFdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2IsTUFBTSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsUUFBUTtTQUNYLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBSSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxHQUFhO1FBQ25FLEdBQUcsR0FBRyxHQUFHLElBQWEsRUFBRSxDQUFDO1FBRXpCLFdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2IsTUFBTSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsS0FBSztZQUNMLE1BQU07U0FDVCxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQTNERCxzQ0EyREMiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaXJjbGUsIENpcmNsZU9wdCB9IGZyb20gXCIuLi9ib2R5L2NpcmNsZVwiO1xyXG5pbXBvcnQgeyBQb2x5Z29uLCBQb2x5Z29uT3B0IH0gZnJvbSBcIi4uL2JvZHkvcG9seWdvblwiO1xyXG5pbXBvcnQgeyBSZWN0LCBSZWN0T3B0IH0gZnJvbSBcIi4uL2JvZHkvcmVjdFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQm9kaWVzRmFjdG9yeSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDlnIblvaJcclxuICAgICAqIEBwYXJhbSB4IHhcclxuICAgICAqIEBwYXJhbSB5IHlcclxuICAgICAqIEBwYXJhbSByYWRpdXMg5Y2K5b6EIFxyXG4gICAgICogQHBhcmFtIG9wdCDphY3nva7poblcclxuICAgICAqL1xyXG4gICAgQ2lyY2xlKHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgb3B0PzogQ2lyY2xlT3B0KTogQ2lyY2xlIHtcclxuICAgICAgICBvcHQgPSBvcHQgfHwgPENpcmNsZU9wdD57fTtcclxuXHJcbiAgICAgICAgVXRpbC5leHRlbmQob3B0LCB7XHJcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXJjbGUob3B0KTs7XHJcbiAgICB9ICAgXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDlpJrovrnlvaJcclxuICAgICAqIEBwYXJhbSB4IHhcclxuICAgICAqIEBwYXJhbSB5IHlcclxuICAgICAqIEBwYXJhbSB2IOmhtueCuembhiBcclxuICAgICAqIEBwYXJhbSBvcHQg6YWN572u6aG5XHJcbiAgICAgKi9cclxuICAgIFBvbHlnb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHY6IEFycmF5PG51bWJlcltdPiwgb3B0PzogUG9seWdvbk9wdCk6IFBvbHlnb24ge1xyXG4gICAgICAgIG9wdCA9IG9wdCB8fCA8UG9seWdvbk9wdD57fTtcclxuXHJcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gdi5tYXAodmVydGV4ID0+IG5ldyBWZWN0b3IodmVydGV4WzBdLCB2ZXJ0ZXhbMV0pKTtcclxuXHJcbiAgICAgICAgVXRpbC5leHRlbmQob3B0LCB7XHJcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSxcclxuICAgICAgICAgICAgdmVydGljZXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uKG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDnn6nlvaJcclxuICAgICAqIEBwYXJhbSB4IHggXHJcbiAgICAgKiBAcGFyYW0geSB5XHJcbiAgICAgKiBAcGFyYW0gd2lkdGgg5a69IFxyXG4gICAgICogQHBhcmFtIGhlaWdodCDpq5hcclxuICAgICAqIEBwYXJhbSBvcHQg6YWN572u6aG5XHJcbiAgICAgKi9cclxuICAgIFJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvcHQ/OiBSZWN0T3B0KTogUmVjdCB7XHJcbiAgICAgICAgb3B0ID0gb3B0IHx8IDxSZWN0T3B0Pnt9O1xyXG5cclxuICAgICAgICBVdGlsLmV4dGVuZChvcHQsIHtcclxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yKHgsIHkpLFxyXG4gICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUmVjdChvcHQpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Circle = void 0;\r\nconst body_1 = __webpack_require__(7);\r\nconst arcs_1 = __webpack_require__(4);\r\nclass Circle extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.circle);\r\n        this.arc = this.getArc();\r\n        this.parts = [this.arc];\r\n        this.bound = this.arc.bound;\r\n    }\r\n    getArea() {\r\n        return Math.PI * this.radius * this.radius;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.col();\r\n    }\r\n    getInertia() {\r\n        return 0.5 * this.mass * Math.pow(this.radius, 2);\r\n    }\r\n    /**\r\n     * 获取圆形信息包\r\n     */\r\n    getArc() {\r\n        return arcs_1.Arcs.create(this);\r\n    }\r\n    translate(dx, dy) {\r\n        // 位移图形原点\r\n        this.origin.x += dx;\r\n        this.origin.y += dy;\r\n        // 位移圆形\r\n        arcs_1.Arcs.translate(this.arc, dx, dy);\r\n    }\r\n}\r\nexports.Circle = Circle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9jaXJjbGUudHM/NWFiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBaUQ7QUFHakQsc0NBQTJDO0FBWTNDLE1BQWEsTUFBTyxTQUFRLFdBQUk7SUFLNUIsWUFBWSxHQUFjO1FBQ3RCLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0YsT0FBTyxXQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBVSxFQUFFLEVBQVU7UUFDNUIsU0FBUztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFcEIsT0FBTztRQUNQLFdBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKO0FBeENELHdCQXdDQyIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIEJvZHlPcHQsIGJvZHlUeXBlIH0gZnJvbSBcIi4vYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgQm91bmQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2JvdW5kXCI7XHJcbmltcG9ydCB7IEFyYywgQXJjcyB9IGZyb20gXCIuLi9jb21tb24vYXJjc1wiO1xyXG5cclxuLyoqXHJcbiAqIOWchuW9ouWImuS9k1xyXG4gKi9cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENpcmNsZU9wdCBleHRlbmRzIEJvZHlPcHQge1xyXG4gICAgcmFkaXVzOiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ2lyY2xlIGV4dGVuZHMgQm9keSB7XHJcbiAgICAvLyDljYrlvoRcclxuICAgIHJhZGl1czogbnVtYmVyO1xyXG4gICAgYXJjOiBBcmM7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBDaXJjbGVPcHQpIHtcclxuICAgICAgICBzdXBlcihvcHQsIGJvZHlUeXBlLmNpcmNsZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXJjID0gdGhpcy5nZXRBcmMoKTtcclxuICAgICAgICB0aGlzLnBhcnRzID0gW3RoaXMuYXJjXTtcclxuICAgICAgICB0aGlzLmJvdW5kID0gdGhpcy5hcmMuYm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJlYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLlBJKnRoaXMucmFkaXVzKnRoaXMucmFkaXVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENlbnRyb2lkKCk6IFZlY3RvciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luLmNvbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluZXJ0aWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMC41ICogdGhpcy5tYXNzICogTWF0aC5wb3codGhpcy5yYWRpdXMsIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5ZyG5b2i5L+h5oGv5YyFXHJcbiAgICAgKi9cclxuICAgIGdldEFyYygpOiBBcmMge1xyXG4gICAgICAgIHJldHVybiBBcmNzLmNyZWF0ZSh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2xhdGUoZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOS9jeenu+WbvuW9ouWOn+eCuVxyXG4gICAgICAgIHRoaXMub3JpZ2luLnggKz0gZHg7XHJcbiAgICAgICAgdGhpcy5vcmlnaW4ueSArPSBkeTtcclxuXHJcbiAgICAgICAgLy8g5L2N56e75ZyG5b2iXHJcbiAgICAgICAgQXJjcy50cmFuc2xhdGUodGhpcy5hcmMsIGR4LCBkeSk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 矩形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Rect = void 0;\r\nconst polygon_1 = __webpack_require__(8);\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\nclass Rect extends polygon_1.Polygon {\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n    getPoly() {\r\n        let leftTop = this.origin.col(), rightTop = leftTop.add(new vector_1.Vector(this.width, 0)), rightBottom = leftTop.add(new vector_1.Vector(this.width, this.height)), leftBottom = leftTop.add(new vector_1.Vector(0, this.height)), poly = vertices_1.Vertices.create(this, [leftTop, rightTop, rightBottom, leftBottom]);\r\n        return poly;\r\n    }\r\n    getArea() {\r\n        return this.width * this.height;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.add(new vector_1.Vector(this.width / 2, this.height / 2));\r\n    }\r\n    getInertia() {\r\n        return this.mass * (this.width * this.width + this.height * this.height) / 12;\r\n    }\r\n}\r\nexports.Rect = Rect;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9yZWN0LnRzPzJkYWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCx5Q0FBZ0Q7QUFDaEQsd0NBQXdDO0FBQ3hDLDBDQUFvRDtBQVVwRCxNQUFhLElBQUssU0FBUSxpQkFBTztJQU03QixZQUFZLEdBQVk7UUFDcEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUMzQixRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2pELFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQzlELFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDcEQsSUFBSSxHQUFHLG1CQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFL0UsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNwQyxDQUFDO0lBRUQsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNsRixDQUFDO0NBQ0o7QUEvQkQsb0JBK0JDIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOefqeW9ouWImuS9k1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFBvbHlnb24sIFBvbHlnb25PcHQgfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBQb2x5LCBWZXJ0aWNlcyB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZWN0T3B0IGV4dGVuZHMgUG9seWdvbk9wdCB7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmVjdCBleHRlbmRzIFBvbHlnb24ge1xyXG4gICAgLy8g5a69XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgLy8g6auYXHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IFJlY3RPcHQpIHtcclxuICAgICAgICBzdXBlcihvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvbHkoKTogUG9seSB7XHJcbiAgICAgICAgbGV0IGxlZnRUb3AgPSB0aGlzLm9yaWdpbi5jb2woKSxcclxuICAgICAgICAgICAgcmlnaHRUb3AgPSBsZWZ0VG9wLmFkZChuZXcgVmVjdG9yKHRoaXMud2lkdGgsIDApKSxcclxuICAgICAgICAgICAgcmlnaHRCb3R0b20gPSBsZWZ0VG9wLmFkZChuZXcgVmVjdG9yKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KSksXHJcbiAgICAgICAgICAgIGxlZnRCb3R0b20gPSBsZWZ0VG9wLmFkZChuZXcgVmVjdG9yKDAsIHRoaXMuaGVpZ2h0KSksXHJcbiAgICAgICAgICAgIHBvbHkgPSBWZXJ0aWNlcy5jcmVhdGUodGhpcywgW2xlZnRUb3AsIHJpZ2h0VG9wLCByaWdodEJvdHRvbSwgbGVmdEJvdHRvbV0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9seTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcmVhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZW50cm9pZCgpOiBWZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5hZGQobmV3IFZlY3Rvcih0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5lcnRpYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hc3MgKiAodGhpcy53aWR0aCAqIHRoaXMud2lkdGggKyB0aGlzLmhlaWdodCAqIHRoaXMuaGVpZ2h0KSAvIDEyO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n')}])}));