!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U();else if("function"==typeof define&&define.amd)define([],U);else{var B=U();for(var F in B)("object"==typeof exports?exports:Q)[F]=B[F]}}(window,(function(){return function(Q){var U={};function B(F){if(U[F])return U[F].exports;var I=U[F]={i:F,l:!1,exports:{}};return Q[F].call(I.exports,I,I.exports,B),I.l=!0,I.exports}return B.m=Q,B.c=U,B.d=function(Q,U,F){B.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:F})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,U){if(1&U&&(Q=B(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(B.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)B.d(F,I,function(U){return Q[U]}.bind(null,I));return F},B.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(U,"a",U),U},B.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},B.p="",B(B.s=10)}([function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Util = void 0;\r\n// 常用工具函数\r\nexports.Util = {\r\n    _id: 0,\r\n    /**\r\n     * 生成一个id（整数类型）\r\n     */\r\n    id() {\r\n        return this._id++;\r\n    },\r\n    /**\r\n     * 根据两个id生成一个复合id（字符串类型）: 'id1.id2'\r\n     * @param id1\r\n     * @param id2\r\n     */\r\n    compositeId(id1, id2) {\r\n        if (id1 < id2) {\r\n            return id1 + '.' + id2;\r\n        }\r\n        else {\r\n            return id2 + '.' + id1;\r\n        }\r\n    },\r\n    /**\r\n     * 对象合并\r\n     * @param originOpt 源对象\r\n     * @param destOpt 目标对象\r\n     */\r\n    merge(originOpt, destOpt) {\r\n        if (!originOpt || !destOpt)\r\n            return;\r\n        for (let key in destOpt) {\r\n            if (typeof destOpt[key] === 'object' &&\r\n                !Array.isArray(destOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.merge(originOpt[key], destOpt[key]);\r\n            }\r\n            else {\r\n                if ((destOpt[key] !== null || destOpt[key] !== undefined) && originOpt[key] !== undefined) {\r\n                    originOpt[key] = destOpt[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 对象扩展\r\n     * @param originOpt 源对象\r\n     * @param extendOpt 扩展对象\r\n     */\r\n    extend(originOpt, extendOpt) {\r\n        if (!originOpt || !extendOpt)\r\n            return;\r\n        for (let key in extendOpt) {\r\n            if (typeof extendOpt[key] === 'object' &&\r\n                !Array.isArray(extendOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.extend(originOpt[key], extendOpt[key]);\r\n            }\r\n            else {\r\n                if (extendOpt[key] !== null || extendOpt[key] !== undefined)\r\n                    originOpt[key] = extendOpt[key];\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 从列表移除某个元素\r\n     * @param list 列表\r\n     * @param item 要移除的元素\r\n     */\r\n    remove(list, item) {\r\n        list.splice(list.findIndex(i => i['id'] === item['id']), 1);\r\n    },\r\n    /**\r\n     * 角度转弧度\r\n     * @param angle 角度\r\n     */\r\n    angle2Radian(angle) {\r\n        return (angle / 180) * Math.PI;\r\n    },\r\n    /**\r\n     * 弧度转角度\r\n     * @param radian 弧度\r\n     */\r\n    radian2Angle(radian) {\r\n        return radian / Math.PI * 180;\r\n    },\r\n    /**\r\n     * 返回页面加载完毕开始到当前的时间（微秒级，performance api）\r\n     */\r\n    now() {\r\n        return window.performance.now();\r\n    },\r\n    /**\r\n     * 直接插入排序\r\n     * @param list 要排序的列表\r\n     * @param fn 比较函数\r\n     */\r\n    insertSort(list, fn) {\r\n        let len = list.length, i, j, temp;\r\n        for (i = 1; i < len; i++) {\r\n            temp = list[i];\r\n            for (j = i - 1; j >= 0 && fn(list[j], temp) > 0; j--) {\r\n                list[j + 1] = list[j];\r\n            }\r\n            list[j + 1] = temp;\r\n        }\r\n    },\r\n    /**\r\n     * 对给定的value，收窄在min和max范围内\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     */\r\n    clamp(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    },\r\n    /**\r\n     * 返回一个数的正负号\r\n     * @param value\r\n     */\r\n    sign(value) {\r\n        return value < 0 ? -1 : 1;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports._tempVector4 = exports._tempVector3 = exports._tempVector2 = exports._tempVector1 = exports.Vector = void 0;\r\n// 二维向量 {x, y}\r\nclass Vector {\r\n    constructor(x, y) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        if (x !== undefined && y !== undefined) {\r\n            this.set(x, y);\r\n        }\r\n    }\r\n    //-------------操作----------------\r\n    /**\r\n     * 设置值\r\n     * @param x\r\n     * @param y\r\n     */\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * 相加\r\n     * @param v\r\n     */\r\n    add(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x + v.x;\r\n        out.y = this.y + v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 相减\r\n     * @param v\r\n     */\r\n    sub(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x - v.x;\r\n        out.y = this.y - v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 点积\r\n     * @param v\r\n     */\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    /**\r\n     * 叉积\r\n     * @param v\r\n     */\r\n    cro(v) {\r\n        return this.x * v.y - v.x * this.y;\r\n    }\r\n    /**\r\n     * 与标量进行叉积\r\n     * @param n\r\n     */\r\n    croNum(n, out) {\r\n        out = out || new Vector();\r\n        out.x = -n * this.y;\r\n        out.y = n * this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 投影\r\n     * @param v\r\n     */\r\n    pro(v) {\r\n        return this.dot(v) / v.len();\r\n    }\r\n    /**\r\n     * 法向\r\n     */\r\n    nor(out) {\r\n        out = out || new Vector();\r\n        out.x = this.y;\r\n        out.y = -this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 求模\r\n     */\r\n    len() {\r\n        return Math.hypot(this.x, this.y);\r\n    }\r\n    /**\r\n     * 平方模（节省求平方根操作）\r\n     */\r\n    len_s() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    /**\r\n     * 单位化\r\n     */\r\n    nol() {\r\n        let len = this.len();\r\n        if (len === 0) {\r\n            return new Vector();\r\n        }\r\n        this.x = this.x / len;\r\n        this.y = this.y / len;\r\n        return this;\r\n    }\r\n    /**\r\n     * 缩放\r\n     * @param n\r\n     */\r\n    scl(n, out) {\r\n        out = out || new Vector();\r\n        out.x = n * this.x;\r\n        out.y = n * this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 反向\r\n     */\r\n    inv(out) {\r\n        out = out || new Vector();\r\n        out.x = -this.x;\r\n        out.y = -this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 判断两向量是否相等\r\n     * @param v\r\n     */\r\n    eql(v) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    /**\r\n     * 求两向量夹角(弧度制)\r\n     * @param v\r\n     */\r\n    ang(v) {\r\n        return Math.acos(this.dot(v) / (this.len() * v.len()));\r\n    }\r\n    /**\r\n     * 克隆向量\r\n     */\r\n    col() {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n    /**\r\n     * 绕某点旋转向量\r\n     * @param radian 角度（弧度制）\r\n     * @param point 绕的点\r\n     */\r\n    rot(radian, point, out) {\r\n        point = point || new Vector();\r\n        out = out || new Vector();\r\n        let cos = Math.cos(radian), sin = Math.sin(radian), dx = this.x - point.x, dy = this.y - point.y;\r\n        out.x = point.x + (dx * cos - dy * sin);\r\n        out.y = point.y + (dx * sin + dy * cos);\r\n        return out;\r\n    }\r\n    /**\r\n     * 求一个向量（点）按照direction方向，延长len长度后的坐标\r\n     * @param direction\r\n     * @param len\r\n     */\r\n    loc(direction, len, out) {\r\n        out = out || new Vector();\r\n        direction = direction.nol();\r\n        out.x = this.x + direction.x * len;\r\n        out.y = this.y + direction.y * len;\r\n        return out;\r\n    }\r\n}\r\nexports.Vector = Vector;\r\n;\r\nexports._tempVector1 = new Vector();\r\nexports._tempVector2 = new Vector();\r\nexports._tempVector3 = new Vector();\r\nexports._tempVector4 = new Vector();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Vertices = exports.Poly = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst bound_1 = __webpack_require__(6);\r\nconst util_1 = __webpack_require__(0);\r\n// 一个顶点信息包\r\nclass Poly {\r\n    constructor(body, vertexList) {\r\n        this.id = util_1.Util.id();\r\n        this.body = body;\r\n        this.vertexList = vertexList;\r\n        this.axes = exports.Vertices.getAxes(vertexList);\r\n        this.centroid = exports.Vertices.getCentroid(vertexList);\r\n        this.bound = exports.Vertices.getBound(vertexList);\r\n    }\r\n}\r\nexports.Poly = Poly;\r\n;\r\n// 顶点操作工具\r\nexports.Vertices = {\r\n    /**\r\n     * 创造顶点信息包\r\n     * @param body 顶点所属的刚体\r\n     * @param vertices 顶点集\r\n     */\r\n    create(body, vertexList) {\r\n        return new Poly(body, vertexList);\r\n    },\r\n    /**\r\n     * 获取多边形中心点\r\n     * @param vertexList\r\n     */\r\n    getCenter(vertexList) {\r\n        let range = this.getRange(vertexList), centerX = (range.max.x + range.min.x) / 2, centerY = (range.max.y + range.min.y) / 2;\r\n        return new vector_1.Vector(centerX, centerY);\r\n    },\r\n    /**\r\n     * 获取多边形质心\r\n     * @param vertexList\r\n     */\r\n    getCentroid(vertexList) {\r\n        let area = this.getArea(vertexList), centroid = new vector_1.Vector(0, 0), cross = 0, temp, j;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            j = (i + 1) % vertexList.length;\r\n            cross = vertexList[i].cro(vertexList[j]);\r\n            temp = vertexList[i].add(vertexList[j]).scl(cross);\r\n            centroid.add(temp, centroid);\r\n        }\r\n        return centroid.scl(1 / (6 * area), centroid);\r\n    },\r\n    /**\r\n     * 获取多边形面积\r\n     * @param vertexList\r\n     */\r\n    getArea(vertexList) {\r\n        let area = 0, j = vertexList.length - 1;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            area += (vertexList[j].x - vertexList[i].x) * (vertexList[j].y + vertexList[i].y);\r\n            j = i;\r\n        }\r\n        return area / 2;\r\n    },\r\n    /**\r\n     * 获取多边形的转动惯量\r\n     * 公式来自：https://blog.csdn.net/weixin_34194702/article/details/93587529\r\n     * @param vertexList\r\n     * @param mass 质量\r\n     * @param position\r\n     */\r\n    getInertia(vertexList, mass, position) {\r\n        let numerator = 0, denominator = 0, v = vertexList, cur, next, cross;\r\n        for (let n = 0; n < v.length; n++) {\r\n            cur = v[n].sub(position, cur);\r\n            next = v[(n + 1) % v.length].sub(position, next);\r\n            cross = Math.abs(cur.cro(next));\r\n            numerator += cross * (cur.dot(cur) + cur.dot(next) + next.dot(next));\r\n            denominator += cross;\r\n        }\r\n        return (mass / 6) * (numerator / denominator);\r\n    },\r\n    /**\r\n     * 求顶点围成的所有面的轴\r\n     * @param vertexList\r\n     */\r\n    getAxes(vertexList) {\r\n        let v = vertexList, axis, axes = [], i, j;\r\n        for (i = 0; i < v.length; i++) {\r\n            j = (i + 1) % v.length;\r\n            axis = v[j].sub(v[i]).nor().nol();\r\n            axes.push({\r\n                value: axis,\r\n                opposite: null,\r\n                origin: vertexList,\r\n                supportVertexIndex: null,\r\n                oppositeVertexIndex: null\r\n            });\r\n        }\r\n        return axes;\r\n    },\r\n    /**\r\n     * 获取顶点集的范围\r\n     * @param vertexList\r\n     */\r\n    getRange(vertexList) {\r\n        let xList = vertexList.map(v => v.x), yList = vertexList.map(v => v.y);\r\n        return {\r\n            min: new vector_1.Vector(Math.min.apply(Math, xList), Math.min.apply(Math, yList)),\r\n            max: new vector_1.Vector(Math.max.apply(Math, xList), Math.max.apply(Math, yList))\r\n        };\r\n    },\r\n    /**\r\n     * 获取顶点集形成的包围盒\r\n     * @param vertexList\r\n     */\r\n    getBound(vertexList) {\r\n        let range = exports.Vertices.getRange(vertexList);\r\n        return new bound_1.Bound(range.min, range.max);\r\n    },\r\n    /**\r\n     * 使用斜率筛去共线的轴\r\n     * @param axes 要筛选的轴\r\n     */\r\n    uniqueAxes(axes) {\r\n        let axisVector, tmpAxes = [], axesTable = {}, i, gradient;\r\n        for (i = 0; i < axes.length; i++) {\r\n            axisVector = axes[i].value;\r\n            gradient = (axisVector.y === 0) ? Infinity : (axisVector.x / axisVector.y);\r\n            // 限制精度\r\n            gradient = gradient.toFixed(3).toString();\r\n            axesTable[gradient] = axes[i];\r\n        }\r\n        Object.keys(axesTable).map(item => {\r\n            tmpAxes.push(axesTable[item]);\r\n        });\r\n        return tmpAxes;\r\n    },\r\n    /**\r\n     * 旋转顶点\r\n     * @param poly 多边形\r\n     * @param radian 弧度\r\n     * @param point 绕点\r\n     */\r\n    rotate(poly, radian, point) {\r\n        let vertexList = poly.vertexList, axes = poly.axes, i;\r\n        // 转动顶点\r\n        for (i = 0; i < vertexList.length; i++) {\r\n            vertexList[i].rot(radian, point, vertexList[i]);\r\n        }\r\n        // 转动轴\r\n        for (i = 0; i < axes.length; i++) {\r\n            axes[i].value.rot(radian, null, axes[i].value);\r\n        }\r\n        // 更新几何中心\r\n        poly.centroid.rot(radian, point, poly.centroid);\r\n        // 更新包围盒\r\n        poly.bound.update(poly.vertexList);\r\n    },\r\n    /**\r\n     * 位移顶点\r\n     * @param poly 多边形\r\n     * @param distance 位移向量\r\n     */\r\n    translate(poly, distance) {\r\n        let v = poly.vertexList, i;\r\n        // 位移顶点\r\n        for (i = 0; i < v.length; i++) {\r\n            v[i].x += distance.x;\r\n            v[i].y += distance.y;\r\n        }\r\n        poly.centroid.x += distance.x;\r\n        poly.centroid.y += distance.y;\r\n        // 位移包围盒\r\n        poly.bound.translate(distance);\r\n    },\r\n    /**\r\n     * 将凹多边形分解为多个子凸多边形\r\n     * @param poly\r\n     */\r\n    divide(poly) {\r\n        // 将拆分出来的多边形保存到这个数组\r\n        let parts = [], v = poly.vertexList.slice(0), partA, partB, vertexListA, vertexListB, axes = poly.axes.slice(0), axesA = [], axesB = [], xAxis, vTest, vDiv, dividePointA, dividePointB, len = v.length, i, j, cur, next, next2, flag = false;\r\n        for (i = 0; i < len; i++) {\r\n            cur = i;\r\n            next = (i + 1) % len;\r\n            next2 = (i + 2) % len;\r\n            xAxis = v[next].sub(v[cur]);\r\n            vTest = v[next2].sub(v[cur]);\r\n            if (xAxis.cro(vTest) < 0) {\r\n                for (j = i + 3; j < len; j++) {\r\n                    vDiv = v[j].sub(v[cur]);\r\n                    if (xAxis.cro(vDiv) > 0) {\r\n                        flag = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (flag)\r\n                    break;\r\n            }\r\n        }\r\n        // 获取两个分割点\r\n        dividePointA = v[next],\r\n            dividePointB = v[j];\r\n        // 拆分为两个多边形vertexListA和vertexListB\r\n        vertexListB = v.splice(next2, j - next2);\r\n        vertexListA = v;\r\n        vertexListB.unshift(dividePointA);\r\n        vertexListB.push(dividePointB);\r\n        // 将轴分别提取到两个图形中\r\n        for (i = 0; i < axes.length; i++) {\r\n            if (i >= next && i < j) {\r\n                axesB.push(axes[i]);\r\n            }\r\n            else {\r\n                axesA.push(axes[i]);\r\n            }\r\n        }\r\n        axesB.push(null);\r\n        axesA.splice(next, 0, null);\r\n        partA = exports.Vertices.create(poly.body, vertexListA);\r\n        partB = exports.Vertices.create(poly.body, vertexListB);\r\n        partA.axes = axesA;\r\n        partB.axes = axesB;\r\n        // 检测拆分出来的两个多边形是否是凹多边形，若果是，继续递归拆分\r\n        if (this.isConcave(vertexListA)) {\r\n            parts.push(...this.divide(partA));\r\n        }\r\n        else {\r\n            parts.push(partA);\r\n        }\r\n        if (this.isConcave(vertexListB)) {\r\n            parts.push(...this.divide(partB));\r\n        }\r\n        else {\r\n            parts.push(partB);\r\n        }\r\n        return parts;\r\n    },\r\n    /**\r\n     * 判断是否包含顶点（射线法）\r\n     * 参考：https://www.cnblogs.com/anningwang/p/7581545.html\r\n     * @param vertexList\r\n     * @param point 检测的顶点\r\n     */\r\n    isContains(vertexList, point) {\r\n        let v = vertexList, cur, next, len = vertexList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            cur = v[i], next = v[(i + 1) % len];\r\n            if ((point.x - cur.x) * (next.y - cur.y) + (point.y - cur.y) * (cur.x - next.x) > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    /**\r\n     * 判断是否为凹多边形\r\n     * @param vertexList\r\n     */\r\n    isConcave(vertexList) {\r\n        let v = vertexList, \r\n        // 上两向量间的叉积\r\n        prevCor, \r\n        // 当前两向量的叉积\r\n        curCor, \r\n        // 上一顶点到当前顶点的向量\r\n        prev2Cur, \r\n        // 当前顶点到下一顶点的向量\r\n        cur2Next, len = v.length, i, j, k;\r\n        for (i = 1; i < len; i++) {\r\n            j = i - 1;\r\n            k = (i + 1) % len;\r\n            prev2Cur = v[i].sub(v[j]);\r\n            cur2Next = v[k].sub(v[i]);\r\n            // 计算向量叉积\r\n            curCor = prev2Cur.cro(cur2Next) >= 0 ? 1 : -1;\r\n            if (prevCor !== undefined && prevCor !== curCor) {\r\n                return true;\r\n            }\r\n            prevCor = curCor;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * 转换到世界坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2World(point, vertexList) {\r\n        return vertexList.map(v => v.add(point, v));\r\n    },\r\n    /**\r\n     * 转换到本地坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2Local(point, vertexList) {\r\n        return vertexList.map(v => v.sub(point, v));\r\n    },\r\n    /**\r\n     * 求多边形在某个轴的投影\r\n     * @param vertexList\r\n     * @param axis 投影轴\r\n     */\r\n    projection(vertexList, axis) {\r\n        let projection, minProjection = Infinity, maxProjection = -Infinity;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            projection = vertexList[i].dot(axis);\r\n            if (projection < minProjection) {\r\n                minProjection = projection;\r\n            }\r\n            if (projection > maxProjection) {\r\n                maxProjection = projection;\r\n            }\r\n        }\r\n        return {\r\n            min: minProjection,\r\n            max: maxProjection\r\n        };\r\n    },\r\n    /**\r\n     * 计算顶点集中离给定点最近的顶点\r\n     * @param point 给定点\r\n     * @param vertexList 顶点集\r\n     */\r\n    getClosestVertex(point, vertexList) {\r\n        let v = vertexList, i, min = Infinity, length, index, len = v.length;\r\n        for (i = 0; i < len; i++) {\r\n            length = v[i].sub(point).len();\r\n            if (length < min) {\r\n                min = length;\r\n                index = i;\r\n            }\r\n        }\r\n        return vertexList[index];\r\n    },\r\n    /**\r\n     * 寻找顶点集中所有凹点\r\n     * @param vertexList\r\n     */\r\n    findCaves(vertexList) {\r\n        let caves = [], v = vertexList, prevVertex, curVertex, nextVertex, len = v.length, i;\r\n        for (i = 1; i < len; i++) {\r\n            prevVertex = v[i - 1];\r\n            curVertex = v[i];\r\n            nextVertex = v[(i + 1) % len];\r\n            // 利用叉乘判断\r\n            if (curVertex.sub(prevVertex).cro(nextVertex.sub(curVertex)) < 0) {\r\n                caves.push(curVertex);\r\n            }\r\n        }\r\n        return caves;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\n/**\r\n * 事件管理器\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Event = void 0;\r\nclass EventEmitter {\r\n    /**\r\n     * 绑定事件\r\n     * @param obj\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    bind(obj, eventName, fn) {\r\n        obj.methods[eventName] = fn;\r\n    }\r\n    /**\r\n     * 解绑事件\r\n     * @param obj\r\n     * @param eventName\r\n     */\r\n    unBind(obj, eventName) {\r\n        obj.methods[eventName] = null;\r\n    }\r\n    /**\r\n     * 事件发射\r\n     * @param obj\r\n     * @param eventName 事件名称\r\n     */\r\n    emit(obj, eventName, ...para) {\r\n        obj.methods[eventName] && typeof obj.methods[eventName] === 'function' && obj.methods[eventName](...para);\r\n    }\r\n}\r\nexports.Event = new EventEmitter();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQvZXZlbnRFbWl0dGVyLnRzP2NlOTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBOztHQUVHOzs7QUFJSCxNQUFNLFlBQVk7SUFFZDs7Ozs7T0FLRztJQUNILElBQUksQ0FBQyxHQUFRLEVBQUUsU0FBaUIsRUFBRSxFQUFZO1FBQzFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLEdBQVEsRUFBRSxTQUFpQjtRQUM5QixHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNsQyxDQUFDO0lBR0Q7Ozs7T0FJRztJQUNILElBQUksQ0FBSSxHQUFRLEVBQUUsU0FBaUIsRUFBRSxHQUFHLElBQVM7UUFDN0MsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssVUFBVSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM5RyxDQUFDO0NBQ0o7QUFHWSxhQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQyIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiDkuovku7bnrqHnkIblmahcclxuICovXHJcblxyXG5cclxuXHJcbmNsYXNzIEV2ZW50RW1pdHRlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu5Hlrprkuovku7ZcclxuICAgICAqIEBwYXJhbSBvYmogXHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIFxyXG4gICAgICogQHBhcmFtIGZuIFxyXG4gICAgICovXHJcbiAgICBiaW5kKG9iajogYW55LCBldmVudE5hbWU6IHN0cmluZywgZm46IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgb2JqLm1ldGhvZHNbZXZlbnROYW1lXSA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Kej57uR5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gb2JqIFxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSBcclxuICAgICAqL1xyXG4gICAgdW5CaW5kKG9iajogYW55LCBldmVudE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIG9iai5tZXRob2RzW2V2ZW50TmFtZV0gPSBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS6i+S7tuWPkeWwhFxyXG4gICAgICogQHBhcmFtIG9iaiBcclxuICAgICAqIEBwYXJhbSBldmVudE5hbWUg5LqL5Lu25ZCN56ewIFxyXG4gICAgICovXHJcbiAgICBlbWl0PFQ+KG9iajogYW55LCBldmVudE5hbWU6IHN0cmluZywgLi4ucGFyYTogYW55KSB7XHJcbiAgICAgICAgb2JqLm1ldGhvZHNbZXZlbnROYW1lXSAmJiB0eXBlb2Ygb2JqLm1ldGhvZHNbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmoubWV0aG9kc1tldmVudE5hbWVdKC4uLnBhcmEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Arcs = exports.Arc = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\nconst bound_1 = __webpack_require__(6);\r\n// 一个圆形信息包\r\nclass Arc {\r\n    constructor(body, centroid, radius) {\r\n        this.id = body.id;\r\n        this.body = body;\r\n        this.centroid = centroid;\r\n        this.radius = radius;\r\n        this.bound = exports.Arcs.getBound(centroid, radius);\r\n    }\r\n}\r\nexports.Arc = Arc;\r\nexports.Arcs = {\r\n    /**\r\n     * 创造圆形信息包\r\n     * @param body\r\n     */\r\n    create(body) {\r\n        return new Arc(body, body.position.col(), body.radius);\r\n    },\r\n    /**\r\n     * 获取两个圆的圆心间的距离\r\n     * @param circleA\r\n     * @param circleB\r\n     */\r\n    distance(circleA, circleB) {\r\n        return circleA.centroid.sub(circleB.centroid).len();\r\n    },\r\n    /**\r\n     * 获取圆形和顶点集间的轴\r\n     * @param vertices 顶点信息\r\n     */\r\n    getAxes(circle, poly) {\r\n        let closestVertex = vertices_1.Vertices.getClosestVertex(circle.centroid, poly.vertexList);\r\n        return {\r\n            value: closestVertex.sub(circle.centroid).nol(),\r\n            opposite: null,\r\n            origin: null,\r\n            supportVertexIndex: null,\r\n            oppositeVertexIndex: null\r\n        };\r\n    },\r\n    getBound(centroid, radius) {\r\n        let min = new vector_1.Vector(centroid.x - radius, centroid.y - radius), max = new vector_1.Vector(centroid.x + radius, centroid.y + radius);\r\n        return new bound_1.Bound(min, max);\r\n    },\r\n    /**\r\n     * 获取圆形在给定轴上的投影\r\n     * @param axis\r\n     */\r\n    projection(circle, axis) {\r\n        let len = circle.centroid.pro(axis);\r\n        return {\r\n            min: len - circle.radius,\r\n            max: len + circle.radius\r\n        };\r\n    },\r\n    /**\r\n     * 查看圆形是否包含某个点\r\n     * @param circle\r\n     * @param point\r\n     */\r\n    isContains(circle, point) {\r\n        return circle.radius * circle.radius - circle.centroid.sub(point).len_s() > 0;\r\n    },\r\n    /**\r\n     * 位移圆形\r\n     * @param arc\r\n     * @param distance 位移向量\r\n     */\r\n    translate(arc, distance) {\r\n        arc.centroid.x += distance.x;\r\n        arc.centroid.y += distance.y;\r\n        // 位移包围盒\r\n        arc.bound.translate(distance);\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FyY3MudHM/MjcyZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBd0M7QUFFeEMsMENBQWtEO0FBQ2xELHVDQUEyQztBQUkzQyxVQUFVO0FBQ1YsTUFBYSxHQUFHO0lBT1osWUFBWSxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxNQUFjO1FBQ3RELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLFlBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQWRELGtCQWNDO0FBS1ksWUFBSSxHQUFHO0lBQ2hCOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxJQUFZO1FBQ2YsT0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBWSxFQUFFLE9BQVk7UUFDL0IsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxNQUFXLEVBQUUsSUFBVTtRQUMzQixJQUFJLGFBQWEsR0FBRyxtQkFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hGLE9BQU87WUFDSCxLQUFLLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQy9DLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLElBQUk7WUFDWixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLG1CQUFtQixFQUFFLElBQUk7U0FDNUIsQ0FBQztJQUNOLENBQUM7SUFFRCxRQUFRLENBQUMsUUFBZ0IsRUFBRSxNQUFjO1FBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksZUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQzFELEdBQUcsR0FBRyxJQUFJLGVBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBRS9ELE9BQU8sSUFBSSxhQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVk7UUFDaEMsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEMsT0FBTztZQUNILEdBQUcsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU07WUFDeEIsR0FBRyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTTtTQUMzQixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsTUFBVyxFQUFFLEtBQWE7UUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxHQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxDQUFDLEdBQVEsRUFBRSxRQUFnQjtRQUNoQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFN0IsUUFBUTtRQUNSLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSixDQUFDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSBcIi4uL2JvZHkvY2lyY2xlXCI7XHJcbmltcG9ydCB7IEF4aXMsIFBvbHksIFZlcnRpY2VzIH0gZnJvbSBcIi4vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgQm91bmQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL2JvdW5kXCI7XHJcblxyXG5cclxuXHJcbi8vIOS4gOS4quWchuW9ouS/oeaBr+WMhVxyXG5leHBvcnQgY2xhc3MgQXJjIHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBjZW50cm9pZDogVmVjdG9yO1xyXG4gICAgcmFkaXVzOiBudW1iZXI7XHJcbiAgICBib2R5OiBDaXJjbGU7XHJcbiAgICBib3VuZDogQm91bmQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYm9keTogQ2lyY2xlLCBjZW50cm9pZDogVmVjdG9yLCByYWRpdXM6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuaWQgPSBib2R5LmlkO1xyXG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcbiAgICAgICAgdGhpcy5jZW50cm9pZCA9IGNlbnRyb2lkO1xyXG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xyXG4gICAgICAgIHRoaXMuYm91bmQgPSBBcmNzLmdldEJvdW5kKGNlbnRyb2lkLCByYWRpdXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgQXJjcyA9IHtcclxuICAgIC8qKlxyXG4gICAgICog5Yib6YCg5ZyG5b2i5L+h5oGv5YyFXHJcbiAgICAgKiBAcGFyYW0gYm9keSBcclxuICAgICAqL1xyXG4gICAgY3JlYXRlKGJvZHk6IENpcmNsZSk6IEFyYyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcmMoYm9keSwgYm9keS5wb3NpdGlvbi5jb2woKSwgYm9keS5yYWRpdXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4pOS4quWchueahOWchuW/g+mXtOeahOi3neemu1xyXG4gICAgICogQHBhcmFtIGNpcmNsZUEgXHJcbiAgICAgKiBAcGFyYW0gY2lyY2xlQiBcclxuICAgICAqL1xyXG4gICAgZGlzdGFuY2UoY2lyY2xlQTogQXJjLCBjaXJjbGVCOiBBcmMpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBjaXJjbGVBLmNlbnRyb2lkLnN1YihjaXJjbGVCLmNlbnRyb2lkKS5sZW4oKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blnIblvaLlkozpobbngrnpm4bpl7TnmoTovbRcclxuICAgICAqIEBwYXJhbSB2ZXJ0aWNlcyDpobbngrnkv6Hmga9cclxuICAgICAqL1xyXG4gICAgZ2V0QXhlcyhjaXJjbGU6IEFyYywgcG9seTogUG9seSk6IEF4aXMge1xyXG4gICAgICAgIGxldCBjbG9zZXN0VmVydGV4ID0gVmVydGljZXMuZ2V0Q2xvc2VzdFZlcnRleChjaXJjbGUuY2VudHJvaWQsIHBvbHkudmVydGV4TGlzdCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IGNsb3Nlc3RWZXJ0ZXguc3ViKGNpcmNsZS5jZW50cm9pZCkubm9sKCksXHJcbiAgICAgICAgICAgIG9wcG9zaXRlOiBudWxsLFxyXG4gICAgICAgICAgICBvcmlnaW46IG51bGwsXHJcbiAgICAgICAgICAgIHN1cHBvcnRWZXJ0ZXhJbmRleDogbnVsbCxcclxuICAgICAgICAgICAgb3Bwb3NpdGVWZXJ0ZXhJbmRleDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIGdldEJvdW5kKGNlbnRyb2lkOiBWZWN0b3IsIHJhZGl1czogbnVtYmVyKTogQm91bmQge1xyXG4gICAgICAgIGxldCBtaW4gPSBuZXcgVmVjdG9yKGNlbnRyb2lkLnggLSByYWRpdXMsIGNlbnRyb2lkLnkgLSByYWRpdXMpLFxyXG4gICAgICAgICAgICBtYXggPSBuZXcgVmVjdG9yKGNlbnRyb2lkLnggKyByYWRpdXMsIGNlbnRyb2lkLnkgKyByYWRpdXMpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEJvdW5kKG1pbiwgbWF4KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blnIblvaLlnKjnu5nlrprovbTkuIrnmoTmipXlvbFcclxuICAgICAqIEBwYXJhbSBheGlzIFxyXG4gICAgICovXHJcbiAgICBwcm9qZWN0aW9uKGNpcmNsZTogQXJjLCBheGlzOiBWZWN0b3IpOiB7bWluOiBudW1iZXIsIG1heDogbnVtYmVyfSB7XHJcbiAgICAgICAgbGV0IGxlbiA9IGNpcmNsZS5jZW50cm9pZC5wcm8oYXhpcyk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1pbjogbGVuIC0gY2lyY2xlLnJhZGl1cyxcclxuICAgICAgICAgICAgbWF4OiBsZW4gKyBjaXJjbGUucmFkaXVzXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvlnIblvaLmmK/lkKbljIXlkKvmn5DkuKrngrlcclxuICAgICAqIEBwYXJhbSBjaXJjbGUgXHJcbiAgICAgKiBAcGFyYW0gcG9pbnQgXHJcbiAgICAgKi9cclxuICAgIGlzQ29udGFpbnMoY2lyY2xlOiBBcmMsIHBvaW50OiBWZWN0b3IpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gY2lyY2xlLnJhZGl1cypjaXJjbGUucmFkaXVzIC0gY2lyY2xlLmNlbnRyb2lkLnN1Yihwb2ludCkubGVuX3MoKSA+IDA7IFxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS9jeenu+WchuW9olxyXG4gICAgICogQHBhcmFtIGFyY1xyXG4gICAgICogQHBhcmFtIGRpc3RhbmNlIOS9jeenu+WQkemHj1xyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUoYXJjOiBBcmMsIGRpc3RhbmNlOiBWZWN0b3IpIHtcclxuICAgICAgICBhcmMuY2VudHJvaWQueCArPSBkaXN0YW5jZS54O1xyXG4gICAgICAgIGFyYy5jZW50cm9pZC55ICs9IGRpc3RhbmNlLnk7XHJcblxyXG4gICAgICAgIC8vIOS9jeenu+WMheWbtOebklxyXG4gICAgICAgIGFyYy5ib3VuZC50cmFuc2xhdGUoZGlzdGFuY2UpO1xyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ContactConstraint = exports.Contact = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\n// 接触约束\r\nclass Contact {\r\n    constructor(vertex, depth) {\r\n        this.position = vertex;\r\n        this.shareNormal = 0;\r\n        this.shareTangent = 0;\r\n        this.inverseMass = 0;\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.depth = depth;\r\n        this.bias = 0;\r\n    }\r\n}\r\nexports.Contact = Contact;\r\n/**\r\n * 碰撞求解器\r\n */\r\nclass ContactConstraint {\r\n    constructor() {\r\n        this.iterations = 20;\r\n        this.slop = 0.02;\r\n        this.biasFactor = 0.2;\r\n    }\r\n    /**\r\n     * 创建一个接触约束\r\n     * @param vertex\r\n     * @param depth\r\n     */\r\n    create(vertex, depth) {\r\n        return new Contact(vertex, depth);\r\n    }\r\n    /**\r\n     * 求解接触约束\r\n     * @param manifolds\r\n     * @param dt\r\n     */\r\n    solve(manifolds, dt) {\r\n        this.preSolveVelocity(manifolds, dt);\r\n        for (let i = 0; i < this.iterations; i++) {\r\n            this.solveVelocity(manifolds, dt);\r\n        }\r\n    }\r\n    /**\r\n     * 预处理\r\n     * @param manifolds 碰撞流形\r\n     * @param dt 步长\r\n     */\r\n    preSolveVelocity(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, i, j;\r\n        for (i = 0; i < manifolds.length; ++i) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                // 接触点到刚体A质心的距离\r\n                contact.offsetA = contact.position.sub(bodyA.position),\r\n                    // 接触点到刚体B质心的距离\r\n                    contact.offsetB = contact.position.sub(bodyB.position);\r\n                let invMassNormal = manifold.inverseMass, invMassTangent = manifold.inverseMass, r1 = contact.offsetA, r2 = contact.offsetB, rn1 = contact.offsetA.dot(normal), rn2 = contact.offsetB.dot(normal), rt1 = contact.offsetA.dot(tangent), rt2 = contact.offsetB.dot(tangent);\r\n                // 计算 J(M^-1)(J^T).\r\n                invMassNormal += bodyA.invInertia * (r1.dot(r1) - rn1 * rn1);\r\n                invMassNormal += bodyB.invInertia * (r2.dot(r2) - rn2 * rn2);\r\n                invMassTangent += bodyA.invInertia * (r1.dot(r1) - rt1 * rt1);\r\n                invMassTangent += bodyB.invInertia * (r2.dot(r2) - rt2 * rt2);\r\n                // 保存 J(M^-1)(J^T)得倒数\r\n                contact.shareNormal = 1 / invMassNormal;\r\n                contact.shareTangent = 1 / invMassTangent;\r\n                contact.bias = this.biasFactor * (1 / dt) * Math.max(0, contact.depth - this.slop);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 正式处理\r\n     * 使用sequential impulse进行快速收敛\r\n     * 参考：https://kevinyu.net/2018/01/17/understanding-constraint-solver-in-physics-engine/\r\n     * @param manifolds\r\n     * @private dt\r\n     */\r\n    solveVelocity(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, normalImpulse, tangentImpulse, maxFriction, relativeNormal, relativeTangent, impulse = vector_1._tempVector3, i, j;\r\n        for (i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                let velocityPointA, // 刚体A质心相对碰撞点的速度\r\n                velocityPointB, // 刚体B质心相对碰撞点的速度\r\n                relativeVelocity; // 相对速度\r\n                vector_1._tempVector1.x = 0;\r\n                vector_1._tempVector1.y = 0;\r\n                vector_1._tempVector2.x = 0;\r\n                vector_1._tempVector2.y = 0;\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算法向相对速度\r\n                relativeNormal = normal.dot(relativeVelocity);\r\n                // 计算法向冲量\r\n                normalImpulse = manifold.restitution * (relativeNormal + contact.bias) * contact.shareNormal;\r\n                // sequential impulse方法，收敛法向冲量\r\n                let oldNormalImpulse = contact.normalImpulse;\r\n                contact.normalImpulse += normalImpulse;\r\n                contact.normalImpulse = Math.max(contact.normalImpulse, 0);\r\n                normalImpulse = contact.normalImpulse - oldNormalImpulse;\r\n                // 应用冲量\r\n                impulse.x = normal.x * normalImpulse;\r\n                impulse.y = normal.y * normalImpulse;\r\n                if (!bodyA.sleeping && !bodyA.fixed) {\r\n                    bodyA.applyImpulse(impulse, contact.offsetA, dt);\r\n                }\r\n                if (!bodyB.sleeping && !bodyB.fixed) {\r\n                    bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB, dt);\r\n                }\r\n                // --------------------------------------------------------------------------------------------\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算切向相对速度\r\n                relativeTangent = tangent.dot(relativeVelocity);\r\n                // 计算切向冲量\r\n                tangentImpulse = relativeTangent * contact.shareTangent;\r\n                // 计算最大摩擦力\r\n                maxFriction = manifold.friction * contact.normalImpulse;\r\n                // sequential impulse方法，收敛切向冲量\r\n                let oldTangentImpulse = contact.tangentImpulse;\r\n                contact.tangentImpulse = util_1.Util.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\r\n                tangentImpulse = contact.tangentImpulse - oldTangentImpulse;\r\n                // 应用冲量\r\n                impulse.x = tangent.x * tangentImpulse;\r\n                impulse.y = tangent.y * tangentImpulse;\r\n                if (!bodyA.sleeping && !bodyA.fixed) {\r\n                    bodyA.applyImpulse(impulse, contact.offsetA, dt);\r\n                }\r\n                if (!bodyB.sleeping && !bodyB.fixed) {\r\n                    bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB, dt);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ContactConstraint = ContactConstraint;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Bound = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\n// AABB包围盒（速度扩展的）\r\nclass Bound {\r\n    constructor(min, max) {\r\n        this.min = new vector_1.Vector();\r\n        this.max = new vector_1.Vector();\r\n        this.set(min, max);\r\n    }\r\n    /**\r\n     * 设置包围盒范围\r\n     *\r\n     *  min ----------|\r\n     *   |            |\r\n     *   |            |\r\n     *   | --------- max\r\n     *\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    set(min, max) {\r\n        this.min.x = min.x;\r\n        this.min.y = min.y;\r\n        this.max.x = max.x;\r\n        this.max.y = max.y;\r\n    }\r\n    /**\r\n     * 位移包围盒\r\n     * @param distance\r\n     */\r\n    translate(distance) {\r\n        this.min.x += distance.x;\r\n        this.min.y += distance.y;\r\n        this.max.x += distance.x;\r\n        this.max.y += distance.y;\r\n    }\r\n    /**\r\n     * 更新包围盒（通常发生在刚体发生旋转，min和max都要重新计算）\r\n     * @param vertexList\r\n     */\r\n    update(vertexList) {\r\n        let range = vertices_1.Vertices.getRange(vertexList);\r\n        this.min.x = range.min.x;\r\n        this.min.y = range.min.y;\r\n        this.max.x = range.max.x;\r\n        this.max.y = range.max.y;\r\n    }\r\n    /**\r\n     * 两包围盒求交集\r\n     * @param b\r\n     */\r\n    intersect(b) {\r\n        let x, y, maxX, maxY, overlapsX, overlapsY;\r\n        x = Math.max(this.min.x, b.min.x);\r\n        maxX = Math.min(this.max.x, b.max.x);\r\n        y = Math.max(this.min.y, b.min.y);\r\n        maxY = Math.min(this.max.y, b.max.y);\r\n        overlapsX = maxX - x;\r\n        overlapsY = maxY - y;\r\n        if (overlapsX < 0 || overlapsY < 0)\r\n            return null;\r\n        vector_1._tempVector1.x = x;\r\n        vector_1._tempVector1.y = y;\r\n        vector_1._tempVector2.x = x + overlapsX;\r\n        vector_1._tempVector2.y = y + overlapsY;\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 求多个包围盒的并集\r\n     * @param arg\r\n     */\r\n    union(bound) {\r\n        let min = vector_1._tempVector1, max = vector_1._tempVector2;\r\n        min.x = Math.min(this.min.x, bound.min.x);\r\n        min.y = Math.min(this.min.x, bound.min.x);\r\n        max.x = Math.max(this.max.y, bound.max.y);\r\n        max.y = Math.max(this.max.y, bound.max.y);\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 判断与另一个包围盒是否相交\r\n     * @param bound\r\n     */\r\n    isIntersect(bound) {\r\n        return (this.min.x < bound.max.x && this.max.x > bound.min.x) && (this.min.y < bound.max.y && bound.min.y < this.max.y);\r\n    }\r\n    /**\r\n     * 求一个包围盒是否包含另一个包围盒\r\n     * @param bound\r\n     */\r\n    isContains(bound) {\r\n        return this.min.x <= bound.min.x &&\r\n            this.min.y <= bound.min.y &&\r\n            this.max.x >= bound.max.x &&\r\n            this.max.y >= bound.max.y;\r\n    }\r\n    /**\r\n     * 查看点是否在包围盒中\r\n     * @param point\r\n     */\r\n    contains(point) {\r\n        return point.x >= this.min.x &&\r\n            point.x <= this.max.x &&\r\n            point.y >= this.min.y &&\r\n            point.y <= this.max.y;\r\n    }\r\n}\r\nexports.Bound = Bound;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Manifold = exports.Collision = void 0;\r\nconst util_1 = __webpack_require__(0);\r\n/**\r\n * 一个碰撞结构，包含了碰撞的所有信息\r\n */\r\nclass Collision {\r\n    constructor() {\r\n        // 分离轴\r\n        this.axis = {\r\n            value: null,\r\n            oppositeVertexIndex: null,\r\n            supportVertexIndex: null,\r\n            opposite: null,\r\n            origin: null\r\n        };\r\n    }\r\n}\r\nexports.Collision = Collision;\r\n;\r\n/**\r\n * 碰撞流形\r\n * 主要用于记录相互碰撞的刚体和进行碰撞缓存\r\n */\r\nclass Manifold {\r\n    constructor(collision, timeStamp) {\r\n        this.bodyA = collision.bodyA;\r\n        this.bodyB = collision.bodyB;\r\n        this.partA = collision.partA;\r\n        this.partB = collision.partB;\r\n        this.id = util_1.Util.compositeId(this.partA.id, this.partB.id);\r\n        this.collision = collision;\r\n        this.isActive = true;\r\n        this.confirmedActive = true;\r\n        this.timeCreated = timeStamp;\r\n        this.timeUpdated = timeStamp;\r\n        this.friction = 0;\r\n        this.restitution = 0;\r\n        this.inverseMass = 0;\r\n        this.update(collision, timeStamp);\r\n    }\r\n    /**\r\n     * 更新流形\r\n     * @param collision 碰撞信息\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(collision, timeStamp) {\r\n        this.collision = collision;\r\n        // 如果该碰撞对真的发生了碰撞\r\n        if (collision.collide) {\r\n            let bodyA, bodyB;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            this.friction = Math.sqrt(bodyA.friction * bodyB.friction);\r\n            this.restitution = (bodyA.restitution + bodyB.restitution) / 2;\r\n            this.inverseMass = bodyA.invMass + bodyB.invMass;\r\n            this.toggleActive(true, timeStamp);\r\n        }\r\n        // 否则\r\n        else {\r\n            this.isActive && this.toggleActive(false, timeStamp);\r\n        }\r\n    }\r\n    /**\r\n     * 更改流形激活状态\r\n     * @param active 激活状态\r\n     * @param timeStamp 时间戳\r\n     */\r\n    toggleActive(active, timeStamp) {\r\n        this.isActive = active;\r\n        if (active) {\r\n            this.timeUpdated = timeStamp;\r\n        }\r\n    }\r\n}\r\nexports.Manifold = Manifold;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL21hbmlmb2xkLnRzP2JiZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsc0NBQXNDO0FBYXRDOztHQUVHO0FBRUgsTUFBYSxTQUFTO0lBQXRCO1FBU0ksTUFBTTtRQUNOLFNBQUksR0FBUztZQUNULEtBQUssRUFBRSxJQUFJO1lBQ1gsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLElBQUk7U0FDZixDQUFDO0lBU04sQ0FBQztDQUFBO0FBekJELDhCQXlCQztBQUFBLENBQUM7QUFHRjs7O0dBR0c7QUFDSCxNQUFhLFFBQVE7SUEyQmpCLFlBQVksU0FBb0IsRUFBRSxTQUFpQjtRQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxXQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsU0FBb0IsRUFBRSxTQUFpQjtRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUUzQixnQkFBZ0I7UUFDaEIsSUFBRyxTQUFTLENBQUMsT0FBTyxFQUFFO1lBQ2xCLElBQUksS0FBVyxFQUFFLEtBQVcsQ0FBQztZQUU3QixLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUN4QixLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUV4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUVqRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN0QztRQUNELEtBQUs7YUFDQTtZQUNELElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFlBQVksQ0FBQyxNQUFlLEVBQUUsU0FBaUI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFFdkIsSUFBRyxNQUFNLEVBQUU7WUFDUCxJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztTQUNoQztJQUNMLENBQUM7Q0FDSjtBQXBGRCw0QkFvRkMiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHkgfSBmcm9tIFwiLi4vYm9keS9ib2R5XCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IEF4aXMsIFBvbHksIFZlcnRleExpc3QgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcbmltcG9ydCB7IEFyYyB9IGZyb20gXCIuLi9jb21tb24vYXJjc1wiO1xyXG5pbXBvcnQgeyBDb250YWN0IH0gZnJvbSBcIi4uL2NvbnN0cmFpbnQvY29udGFjdFwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDnorDmkp7kv6Hmga/vvIznorDmkp7mtYHlvaLvvIzmjqXop6bngrlcclxuICovXHJcblxyXG5leHBvcnQgdHlwZSBHZW9tZXRyeSA9IFBvbHkgfCBBcmM7XHJcblxyXG5cclxuLyoqXHJcbiAqIOS4gOS4queisOaSnue7k+aehO+8jOWMheWQq+S6hueisOaSnueahOaJgOacieS/oeaBr1xyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsaXNpb24ge1xyXG4gICAgLy8g56Kw5pKe5Yia5L2TQVxyXG4gICAgYm9keUE6IEJvZHk7XHJcbiAgICAvLyDnorDmkp7liJrkvZNCXHJcbiAgICBib2R5QjogQm9keTtcclxuICAgIC8vIOeisOaSnuWtkOWbvuW9okFcclxuICAgIHBhcnRBOiBHZW9tZXRyeTtcclxuICAgIC8vIOeisOaSnuWtkOWbvuW9okJcclxuICAgIHBhcnRCOiBHZW9tZXRyeTtcclxuICAgIC8vIOWIhuemu+i9tFxyXG4gICAgYXhpczogQXhpcyA9IHtcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICBvcHBvc2l0ZVZlcnRleEluZGV4OiBudWxsLFxyXG4gICAgICAgIHN1cHBvcnRWZXJ0ZXhJbmRleDogbnVsbCxcclxuICAgICAgICBvcHBvc2l0ZTogbnVsbCxcclxuICAgICAgICBvcmlnaW46IG51bGxcclxuICAgIH07XHJcbiAgICAvLyDnorDmkp7ms5Xnur9cclxuICAgIG5vcm1hbDogVmVjdG9yO1xyXG4gICAgLy8g56Kw5pKe5YiH57q/XHJcbiAgICB0YW5nZW50OiBWZWN0b3I7XHJcbiAgICAvLyDmjqXop6bngrlcclxuICAgIGNvbnRhY3RzOiBDb250YWN0W107XHJcbiAgICAvLyDmmK/lkKblj5HnlJ/kuobnorDmkp5cclxuICAgIGNvbGxpZGU6IGJvb2xlYW47XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIOeisOaSnua1geW9olxyXG4gKiDkuLvopoHnlKjkuo7orrDlvZXnm7jkupLnorDmkp7nmoTliJrkvZPlkozov5vooYznorDmkp7nvJPlrZhcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNYW5pZm9sZCB7XHJcbiAgICAvLyBpZFxyXG4gICAgaWQ6IHN0cmluZztcclxuXHJcbiAgICBib2R5QTogQm9keTtcclxuICAgIGJvZHlCOiBCb2R5O1xyXG4gICAgcGFydEE6IEdlb21ldHJ5O1xyXG4gICAgcGFydEI6IEdlb21ldHJ5O1xyXG4gICAgLy8g56Kw5pKe5L+h5oGvXHJcbiAgICBjb2xsaXNpb246IENvbGxpc2lvbjtcclxuICAgIC8vIOa/gOa0u+eKtuaAgVxyXG4gICAgLy8g5r+A5rS754q25oCB55qE5oSP5oCd5Y2z5LiK5LiA5qyh5pu05paw5pe25rWB5b2i5piv5ZCm5Y+R55Sf56Kw5pKe77yM6Iul5piv77yM5YiZ6KGo56S66K+l5rWB5b2i5Zyo5r+A5rS754q25oCBXHJcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICAgIC8vIOehruiupOa/gOa0u+eKtuaAgVxyXG4gICAgLy8g56Gu6K6k5r+A5rS754q25oCB5oSP5oCd5Y2z5piv5b2T5YmN5pu05paw5pe25rWB5b2i5piv5ZCm5r+A5rS7XHJcbiAgICBjb25maXJtZWRBY3RpdmU6IGJvb2xlYW47XHJcbiAgICAvLyDmtYHlvaLliJvlu7rml7bpl7RcclxuICAgIHRpbWVDcmVhdGVkOiBudW1iZXI7XHJcbiAgICAvLyDmtYHlvaLmm7TmlrDml7bpl7RcclxuICAgIHRpbWVVcGRhdGVkOiBudW1iZXI7XHJcbiAgICAvLyDmkanmk6bliptcclxuICAgIGZyaWN0aW9uOiBudW1iZXI7XHJcbiAgICAvLyDmgaLlpI3ns7vmlbBcclxuICAgIHJlc3RpdHV0aW9uOiBudW1iZXI7XHJcbiAgICAvLyDotKjph4/lkozlgJLmlbBcclxuICAgIGludmVyc2VNYXNzOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sbGlzaW9uOiBDb2xsaXNpb24sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5ib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcclxuICAgICAgICB0aGlzLmJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xyXG4gICAgICAgIHRoaXMucGFydEEgPSBjb2xsaXNpb24ucGFydEE7XHJcbiAgICAgICAgdGhpcy5wYXJ0QiA9IGNvbGxpc2lvbi5wYXJ0QjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbC5jb21wb3NpdGVJZCh0aGlzLnBhcnRBLmlkLCB0aGlzLnBhcnRCLmlkKTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbiA9IGNvbGxpc2lvbjtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNvbmZpcm1lZEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50aW1lQ3JlYXRlZCA9IHRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLnRpbWVVcGRhdGVkID0gdGltZVN0YW1wO1xyXG4gICAgICAgIHRoaXMuZnJpY3Rpb24gPSAwO1xyXG4gICAgICAgIHRoaXMucmVzdGl0dXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuaW52ZXJzZU1hc3MgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZShjb2xsaXNpb24sIHRpbWVTdGFtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDmtYHlvaJcclxuICAgICAqIEBwYXJhbSBjb2xsaXNpb24g56Kw5pKe5L+h5oGvXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIOaXtumXtOaIs1xyXG4gICAgICovXHJcbiAgICB1cGRhdGUoY29sbGlzaW9uOiBDb2xsaXNpb24sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb24gPSBjb2xsaXNpb247XHJcblxyXG4gICAgICAgIC8vIOWmguaenOivpeeisOaSnuWvueecn+eahOWPkeeUn+S6hueisOaSnlxyXG4gICAgICAgIGlmKGNvbGxpc2lvbi5jb2xsaWRlKSB7XHJcbiAgICAgICAgICAgIGxldCBib2R5QTogQm9keSwgYm9keUI6IEJvZHk7XHJcblxyXG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcclxuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZyaWN0aW9uID0gTWF0aC5zcXJ0KGJvZHlBLmZyaWN0aW9uICogYm9keUIuZnJpY3Rpb24pO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3RpdHV0aW9uID0gKGJvZHlBLnJlc3RpdHV0aW9uICsgYm9keUIucmVzdGl0dXRpb24pIC8gMjtcclxuICAgICAgICAgICAgdGhpcy5pbnZlcnNlTWFzcyA9IGJvZHlBLmludk1hc3MgKyBib2R5Qi5pbnZNYXNzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50b2dnbGVBY3RpdmUodHJ1ZSwgdGltZVN0YW1wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5ZCm5YiZXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgJiYgdGhpcy50b2dnbGVBY3RpdmUoZmFsc2UsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05pS55rWB5b2i5r+A5rS754q25oCBXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlIOa/gOa0u+eKtuaAgVxyXG4gICAgICogQHBhcmFtIHRpbWVTdGFtcCDml7bpl7TmiLNcclxuICAgICAqL1xyXG4gICAgdG9nZ2xlQWN0aXZlKGFjdGl2ZTogYm9vbGVhbiwgdGltZVN0YW1wOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gYWN0aXZlO1xyXG5cclxuICAgICAgICBpZihhY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lVXBkYXRlZCA9IHRpbWVTdGFtcDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 刚体基类：所有刚体继承自Body\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Body = exports.bodyType = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\nconst eventEmitter_1 = __webpack_require__(3);\r\n/**\r\n * 刚体类型\r\n * 圆形：0\r\n * 多边形：1\r\n * 胶囊体：2\r\n * 平面：3\r\n * 复合体：4\r\n */\r\nvar bodyType;\r\n(function (bodyType) {\r\n    bodyType[bodyType["circle"] = 0] = "circle";\r\n    bodyType[bodyType["polygon"] = 1] = "polygon";\r\n    bodyType[bodyType["capsule"] = 2] = "capsule";\r\n    bodyType[bodyType["composite"] = 3] = "composite";\r\n})(bodyType = exports.bodyType || (exports.bodyType = {}));\r\n;\r\nclass Body {\r\n    constructor(opt, type) {\r\n        this.id = util_1.Util.id();\r\n        this.type = type;\r\n        this.engine = null;\r\n        this.data = null;\r\n        this.origin = new vector_1.Vector(0, 0);\r\n        this.position = new vector_1.Vector(0, 0);\r\n        this.rotation = 0;\r\n        this.velocity = new vector_1.Vector(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.motion = 0;\r\n        this.mass = 10;\r\n        this.area = 0;\r\n        this.density = 1;\r\n        this.inertia = 0;\r\n        this.invInertia = 0;\r\n        this.force = new vector_1.Vector(0, 0);\r\n        this.torque = 0;\r\n        this.friction = 0.4;\r\n        this.restitution = 0.9;\r\n        this.constraint = null;\r\n        this.fixed = false;\r\n        this.sleeping = false;\r\n        this.sleepCounter = 0;\r\n        this.mask = 1;\r\n        this.parts = [];\r\n        this.bound = null;\r\n        this.collisionNum = 0;\r\n        this.methods = {\r\n            filter: (maskA, maskB) => { return true; },\r\n            beforeAppend: (body) => { },\r\n            afterAppend: (body) => { },\r\n            beforeRemove: (body) => { },\r\n            afterRemove: (body) => { },\r\n            sleepStart: (body) => { },\r\n            sleepEnd: (body) => { }\r\n        };\r\n        util_1.Util.extend(this, opt);\r\n        if (this.fixed)\r\n            this.sleeping = true;\r\n        this.init(opt);\r\n        this.area = this.getArea();\r\n        this.density = this.getDensity();\r\n        this.invMass = this.getInvMass();\r\n        this.position = this.getCentroid();\r\n        this.inertia = this.getInertia();\r\n        this.invInertia = this.getInvInertia();\r\n        this.motion = 0;\r\n        // 设置渲染函数\r\n        this.setRender(() => { });\r\n    }\r\n    /**\r\n     * 初始化一些数据\r\n     */\r\n    init(opt) { }\r\n    /**\r\n     * 计算质量倒数\r\n     */\r\n    getInvMass() {\r\n        return (this.mass === 0 || this.fixed) ? 0 : 1 / this.mass;\r\n    }\r\n    /**\r\n     * 计算转动惯量倒数\r\n     */\r\n    getInvInertia() {\r\n        return (this.inertia === 0 || this.fixed) ? 0 : 1 / this.inertia;\r\n    }\r\n    /**\r\n     * 计算密度\r\n     */\r\n    getDensity() {\r\n        return this.mass / this.area;\r\n    }\r\n    /**\r\n     * 计算面积\r\n     * @override\r\n     */\r\n    getArea() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 计算质心\r\n     * @override\r\n     */\r\n    getCentroid() {\r\n        return null;\r\n    }\r\n    /**\r\n     * 计算转动惯量\r\n     * @override\r\n     */\r\n    getInertia() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 设置用户想要携带的信息数据\r\n     * @param data 数据\r\n     */\r\n    setData(data) {\r\n        if (data !== null && data !== undefined) {\r\n            this.data = data;\r\n        }\r\n    }\r\n    /**\r\n     * 设置刚体的引擎属性\r\n     * @param engine\r\n     */\r\n    setEngine(engine) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * 设置渲染函数\r\n     * @param fn\r\n     */\r\n    setRender(fn) {\r\n        if (fn && typeof fn === \'function\')\r\n            this.render = fn;\r\n    }\r\n    /**\r\n     * 位移刚体\r\n     * @override\r\n     * @param distance 位移向量\r\n     */\r\n    translate(distance) { }\r\n    /**\r\n     * 旋转刚体\r\n     * @override\r\n     * @param angle 角度\r\n     * @param point 绕点\r\n     */\r\n    rotate(angle, point) { }\r\n    /**\r\n     * 发生碰撞\r\n     * @param body\r\n     */\r\n    collide(body) {\r\n        this.collisionNum++;\r\n        // 触发碰撞钩子\r\n        eventEmitter_1.Event.emit(this, \'collide\', this, body);\r\n    }\r\n    /**\r\n     * 发生分离\r\n     */\r\n    separate() {\r\n        this.collisionNum--;\r\n        // 触发分离钩子\r\n        if (this.collisionNum === 0) {\r\n            eventEmitter_1.Event.emit(this, \'isolate\', this);\r\n        }\r\n    }\r\n    /**\r\n     * 应用冲量\r\n     * @param impulse 冲量\r\n     * @param offset 作用点（本地坐标系）\r\n     * @param dt 步长\r\n     */\r\n    applyImpulse(impulse, offset, dt) {\r\n        this.velocity.x += impulse.x * this.invMass;\r\n        this.velocity.y += impulse.y * this.invMass;\r\n        this.angularVelocity += this.invInertia * offset.cro(impulse);\r\n    }\r\n    /**\r\n     * 应用力\r\n     * @param force 力\r\n     * @param offset 作用点（本地坐标系）\r\n     */\r\n    applyForce(force, offset) {\r\n        this.force.x += force.x;\r\n        this.force.y += force.y;\r\n        if (offset !== undefined) {\r\n            this.torque += offset.cro(this.force);\r\n        }\r\n    }\r\n    /**\r\n     * 积分受力\r\n     * @param dt\r\n     */\r\n    integrateForces(dt) {\r\n        if (this.fixed || this.sleeping) {\r\n            return;\r\n        }\r\n        this.velocity.x += dt * this.force.x * this.invMass;\r\n        this.velocity.y += dt * this.force.y * this.invMass;\r\n        this.angularVelocity += dt * this.torque * this.invInertia;\r\n    }\r\n    /**\r\n     * 积分速度\r\n     * - 使用隐式欧拉积分\r\n     * @param dt\r\n     */\r\n    integrateVelocities(dt) {\r\n        if (this.fixed || this.sleeping) {\r\n            return;\r\n        }\r\n        let dx = dt * this.velocity.x, dy = dt * this.velocity.y, dr = dt * this.angularVelocity;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.rotation += dr;\r\n        vector_1._tempVector1.x = dx;\r\n        vector_1._tempVector1.y = dy;\r\n        //位移刚体\r\n        this.translate(vector_1._tempVector1);\r\n        // 旋转刚体\r\n        if (dr !== 0) {\r\n            this.rotate(dr, this.position);\r\n        }\r\n        // 更新标量速度\r\n        let speed = Math.hypot(dx, dy), angularSpeed = Math.abs(dr);\r\n        //更新动量\r\n        this.motion = speed * speed + angularSpeed * angularSpeed;\r\n        this.force.x = 0;\r\n        this.force.y = 0;\r\n        this.torque = 0;\r\n    }\r\n}\r\nexports.Body = Body;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 多边形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Polygon = void 0;\r\nconst body_1 = __webpack_require__(8);\r\nconst vertices_1 = __webpack_require__(2);\r\nclass Polygon extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.polygon);\r\n        // 用户一开始便设置了旋转的情况\r\n        if (this.rotation) {\r\n            this.rotate(this.rotation, this.position);\r\n        }\r\n    }\r\n    init(opt) {\r\n        // 将向量转化为顶点\r\n        if (opt.vertices) {\r\n            this.vertexList = opt.vertices.slice(0);\r\n        }\r\n        // 顶点数 > 3才构成多边形\r\n        if (this.vertexList && this.vertexList.length < 3)\r\n            return;\r\n        this.parts = this.getParts();\r\n    }\r\n    /**\r\n     * 获取世界坐标\r\n     */\r\n    getPoly() {\r\n        return vertices_1.Vertices.create(this, vertices_1.Vertices.transform2World(this.origin, this.vertexList));\r\n    }\r\n    getArea() {\r\n        return Math.abs(vertices_1.Vertices.getArea(this.vertexList));\r\n    }\r\n    getCentroid() {\r\n        return vertices_1.Vertices.getCentroid(this.vertexList);\r\n    }\r\n    getInertia() {\r\n        return vertices_1.Vertices.getInertia(this.vertexList, this.mass, this.position);\r\n    }\r\n    translate(distance) {\r\n        // 位移图形原点\r\n        this.origin.x += distance.x;\r\n        this.origin.y += distance.y;\r\n        // 位移多边形顶点\r\n        vertices_1.Vertices.translate(this.poly, distance);\r\n        // 若多边形是凹多边形, 位移子多边形包围盒\r\n        if (this.isConcave) {\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                let part = this.parts[i];\r\n                part.centroid.x += distance.x;\r\n                part.centroid.y += distance.y;\r\n                part.bound.translate(distance);\r\n            }\r\n        }\r\n    }\r\n    rotate(radian, point) {\r\n        // 旋转顶点\r\n        vertices_1.Vertices.rotate(this.poly, radian, point);\r\n        // 若多边形是凹多边形, 更新子多边形包围盒\r\n        if (this.isConcave) {\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                let part = this.parts[i];\r\n                part.centroid.rot(radian, point, part.centroid);\r\n                part.bound.update(part.vertexList);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 分割多边形\r\n     * 若是凹多边形，则先分割为多个凸多边形，然后凸多边形再分割为小三角形\r\n     * 若是凸多边形，则直接分割为小三角形\r\n     */\r\n    getParts() {\r\n        let parts = [], poly = this.getPoly();\r\n        // 若是凹多边形\r\n        if (vertices_1.Vertices.isConcave(poly.vertexList)) {\r\n            this.isConcave = true;\r\n            parts = vertices_1.Vertices.divide(poly);\r\n        }\r\n        // 若是凸多边形\r\n        else {\r\n            parts = [poly];\r\n        }\r\n        this.bound = poly.bound;\r\n        this.poly = poly;\r\n        return parts;\r\n    }\r\n}\r\nexports.Polygon = Polygon;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Torque = void 0;\r\nconst interface_1 = __webpack_require__(11);\r\nconst bodiesFactory_1 = __webpack_require__(22);\r\nconst vector_1 = __webpack_require__(1);\r\ninterface_1.TorqueWorld['body'] = new bodiesFactory_1.BodiesFactory();\r\ninterface_1.TorqueWorld['math'] = {\r\n    vector: (x, y) => new vector_1.Vector(x, y)\r\n};\r\nexports.Torque = interface_1.TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdG9ycXVlLnRzP2JhZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQStDO0FBQy9DLGdEQUFxRDtBQUNyRCx3Q0FBdUM7QUFFdkMsdUJBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztBQUMxQyx1QkFBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHO0lBQ2xCLE1BQU0sRUFBRSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDckQsQ0FBQztBQUVXLGNBQU0sR0FBRyx1QkFBVyxDQUFDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9ycXVlV29ybGQgfSBmcm9tIFwiLi9jb3JlL2ludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBCb2RpZXNGYWN0b3J5IH0gZnJvbSBcIi4vY29yZS9ib2RpZXNGYWN0b3J5XCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuL21hdGgvdmVjdG9yXCI7XHJcblxyXG5Ub3JxdWVXb3JsZFsnYm9keSddID0gbmV3IEJvZGllc0ZhY3RvcnkoKTtcclxuVG9ycXVlV29ybGRbJ21hdGgnXSA9IHtcclxuICAgIHZlY3RvcjogKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiBuZXcgVmVjdG9yKHgsIHkpXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVG9ycXVlID0gVG9ycXVlV29ybGQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TorqueWorld = void 0;\r\nconst util_1 = __webpack_require__(0);\r\nconst engine_1 = __webpack_require__(12);\r\nconst eventEmitter_1 = __webpack_require__(3);\r\n// Torque主类\r\nclass TorqueWorld {\r\n    constructor(width, height, opt) {\r\n        this.engine = new engine_1.Engine(width, height, opt);\r\n    }\r\n    /**\r\n     * 增加刚体\r\n     * @param body\r\n     */\r\n    append(body) {\r\n        if (Array.isArray(body)) {\r\n            body.map(b => this.append(b));\r\n        }\r\n        else {\r\n            eventEmitter_1.Event.emit(body, 'beforeAppend', body);\r\n            body.setEngine(this.engine);\r\n            this.engine.bodies.push(body);\r\n            eventEmitter_1.Event.emit(body, 'afterAppend', body);\r\n        }\r\n    }\r\n    /**\r\n     * 移除刚体\r\n     * @param body\r\n     */\r\n    remove(body) {\r\n        eventEmitter_1.Event.emit(body, 'beforeRemove', body);\r\n        util_1.Util.remove(this.engine.bodies, body);\r\n        eventEmitter_1.Event.emit(body, 'afterRemove', body);\r\n    }\r\n    /**\r\n     * 清空引擎\r\n     */\r\n    clear() {\r\n        this.engine.bodies.map(body => this.remove(body));\r\n        this.engine.manifoldTable.clear();\r\n    }\r\n    /**\r\n     * 克隆刚体\r\n     * @param body\r\n     */\r\n    clone(body) {\r\n        return null;\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setEngineOption(opt) {\r\n        this.engine.setOption(opt);\r\n    }\r\n    /**\r\n     * 添加时间步函数\r\n     * @param fn\r\n     */\r\n    step(fn) {\r\n        this.engine.timeStepper.addStep(fn);\r\n    }\r\n    /**\r\n     * 开始运行\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        this.engine.timeStepper.start(frameNumLimit);\r\n    }\r\n    /**\r\n     * 暂停运行\r\n     */\r\n    pause() {\r\n        this.engine.timeStepper.pause();\r\n    }\r\n}\r\nexports.TorqueWorld = TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9pbnRlcmZhY2UudHM/MjY1ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBc0M7QUFDdEMseUNBQTZDO0FBQzdDLDhDQUE4QztBQU85QyxXQUFXO0FBQ1gsTUFBYSxXQUFXO0lBR3BCLFlBQVksS0FBYSxFQUFFLE1BQWMsRUFBRSxHQUFlO1FBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLElBQW1CO1FBQ3RCLElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQ0k7WUFDRCxvQkFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QixvQkFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQztJQUNEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxJQUFVO1FBQ2Isb0JBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QyxXQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RDLG9CQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLElBQVU7UUFDWixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZUFBZSxDQUFDLEdBQWM7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksQ0FBQyxFQUF3QjtRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxhQUFzQjtRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQTlFRCxrQ0E4RUMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IEVuZ2luZSwgRW5naW5lT3B0IH0gZnJvbSBcIi4vZW5naW5lXCI7XHJcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSBcIi4uL2V2ZW50L2V2ZW50RW1pdHRlclwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyBUb3JxdWXkuLvnsbtcclxuZXhwb3J0IGNsYXNzIFRvcnF1ZVdvcmxkIHtcclxuICAgIHByaXZhdGUgZW5naW5lOiBFbmdpbmU7XHJcblxyXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdD86IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lID0gbmV3IEVuZ2luZSh3aWR0aCwgaGVpZ2h0LCBvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5aKe5Yqg5Yia5L2TXHJcbiAgICAgKiBAcGFyYW0gYm9keSBcclxuICAgICAqL1xyXG4gICAgYXBwZW5kKGJvZHk6IEJvZHkgfCBCb2R5W10pIHtcclxuICAgICAgICBpZihBcnJheS5pc0FycmF5KGJvZHkpKSB7XHJcbiAgICAgICAgICAgIGJvZHkubWFwKGIgPT4gdGhpcy5hcHBlbmQoYikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgRXZlbnQuZW1pdChib2R5LCAnYmVmb3JlQXBwZW5kJywgYm9keSk7XHJcbiAgICAgICAgICAgIGJvZHkuc2V0RW5naW5lKHRoaXMuZW5naW5lKTtcclxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuYm9kaWVzLnB1c2goYm9keSk7XHJcbiAgICAgICAgICAgIEV2ZW50LmVtaXQoYm9keSwgJ2FmdGVyQXBwZW5kJywgYm9keSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICByZW1vdmUoYm9keTogQm9keSkge1xyXG4gICAgICAgIEV2ZW50LmVtaXQoYm9keSwgJ2JlZm9yZVJlbW92ZScsIGJvZHkpO1xyXG4gICAgICAgIFV0aWwucmVtb3ZlKHRoaXMuZW5naW5lLmJvZGllcywgYm9keSk7XHJcbiAgICAgICAgRXZlbnQuZW1pdChib2R5LCAnYWZ0ZXJSZW1vdmUnLCBib2R5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4heepuuW8leaTjlxyXG4gICAgICovXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZS5ib2RpZXMubWFwKGJvZHkgPT4gdGhpcy5yZW1vdmUoYm9keSkpO1xyXG4gICAgICAgIHRoaXMuZW5naW5lLm1hbmlmb2xkVGFibGUuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFi+mahuWImuS9k1xyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKi9cclxuICAgIGNsb25lKGJvZHk6IEJvZHkpOiBCb2R5IHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruW8leaTjuWPguaVsFxyXG4gICAgICogQHBhcmFtIG9wdCBcclxuICAgICAqL1xyXG4gICAgc2V0RW5naW5lT3B0aW9uKG9wdDogRW5naW5lT3B0KSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUuc2V0T3B0aW9uKG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDml7bpl7TmraXlh73mlbBcclxuICAgICAqIEBwYXJhbSBmbiBcclxuICAgICAqL1xyXG4gICAgc3RlcChmbjogKGR0OiBudW1iZXIpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZS50aW1lU3RlcHBlci5hZGRTdGVwKGZuKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8gOWni+i/kOihjFxyXG4gICAgICogQHBhcmFtIGZyYW1lTnVtTGltaXQg6ZmQ5Yi26L+Q6KGM5aSa5bCR5bin5YGc5LiLXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0KGZyYW1lTnVtTGltaXQ/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZS50aW1lU3RlcHBlci5zdGFydChmcmFtZU51bUxpbWl0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaaguWBnOi/kOihjFxyXG4gICAgICovXHJcbiAgICBwYXVzZSgpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZS50aW1lU3RlcHBlci5wYXVzZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Engine = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\nconst timeStepper_1 = __webpack_require__(13);\r\nconst detector_1 = __webpack_require__(14);\r\nconst sleeping_1 = __webpack_require__(20);\r\nconst manifoldTable_1 = __webpack_require__(21);\r\nconst eventEmitter_1 = __webpack_require__(3);\r\nconst contact_1 = __webpack_require__(5);\r\nlet TimeList = [], TestFlag = false;\r\nlet test = document.getElementById('test');\r\nif (test) {\r\n    test.addEventListener('click', () => {\r\n        TestFlag = true;\r\n    });\r\n}\r\n// 主引擎\r\nclass Engine {\r\n    constructor(width, height, opt) {\r\n        this.testFlag = false;\r\n        this.timeList = [];\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        this.gravity = new vector_1.Vector(0, 9);\r\n        this.enableSleeping = true;\r\n        this.enableCollisionDetection = true;\r\n        this.enableCollisionResolve = true;\r\n        this.methods = {\r\n            onTickStart: () => { },\r\n            onTickEnd: () => { },\r\n            beforeUpdate: () => { },\r\n            afterUpdate: () => { },\r\n            beforeRender: () => { },\r\n            afterRender: () => { },\r\n            onStart: () => { },\r\n            onPause: () => { },\r\n            collisionStart: (manifolds) => { },\r\n            collisionActive: (manifolds) => { },\r\n            collisionEnd: (manifolds) => { }\r\n        };\r\n        util_1.Util.merge(this, opt);\r\n        this.bodies = [];\r\n        this.timeStepper = new timeStepper_1.TimeStepper(this, opt);\r\n        this.detector = new detector_1.Detector(this, opt);\r\n        this.manifoldTable = new manifoldTable_1.ManifoldTable(opt);\r\n        this.contactConstraint = new contact_1.ContactConstraint();\r\n        this.sleeping = new sleeping_1.Sleeping(opt);\r\n    }\r\n    /**\r\n     * 引擎更新\r\n     * @param dt 步长\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(dt, timeStamp) {\r\n        let broadPhasePair = [], collisions = [];\r\n        if (this.enableSleeping) {\r\n            // 更新刚体的休眠/唤醒状态\r\n            this.sleeping.update(this.bodies);\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            let force = this.gravity.scl(this.bodies[i].mass * 50);\r\n            // 应用受力\r\n            this.bodies[i].applyForce(force);\r\n            // 积分受力\r\n            this.bodies[i].integrateForces(dt);\r\n        }\r\n        // 解决所有约束\r\n        // this.resolver.solveConstraint();\r\n        // 是否开启碰撞检测\r\n        if (this.enableCollisionDetection) {\r\n            // 粗阶段检测\r\n            broadPhasePair = this.detector.broadPhase.detect(this.bodies);\r\n            let start = performance.now();\r\n            // 细阶段检测\r\n            collisions = this.detector.narrowPhase.detect(broadPhasePair);\r\n            let end = performance.now(), range = 60;\r\n            if (TestFlag) {\r\n                if (TimeList.length < range) {\r\n                    TimeList.push(end - start);\r\n                }\r\n                else {\r\n                    let total = TimeList.reduce((t, cur) => {\r\n                        return t + cur;\r\n                    });\r\n                    console.log(total / range);\r\n                    TestFlag = false;\r\n                    TimeList.length = 0;\r\n                }\r\n            }\r\n            //console.log(collisions);\r\n            this.manifoldTable.update(collisions, timeStamp);\r\n            // 移除缓存表超时的碰撞对\r\n            this.manifoldTable.filter(timeStamp);\r\n            // 是否开启了碰撞求解\r\n            if (this.enableCollisionResolve) {\r\n                // 若发现有休眠的刚体发生碰撞，则唤醒\r\n                if (this.enableSleeping)\r\n                    this.sleeping.afterCollision(this.manifoldTable.list);\r\n                // 求解碰撞约束\r\n                this.contactConstraint.solve(this.manifoldTable.list, dt);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            // 积分速度\r\n            this.bodies[i].integrateVelocities(dt);\r\n        }\r\n        this.manifoldTable.collisionStart.length &&\r\n            eventEmitter_1.Event.emit(this, 'collisionStart', this.manifoldTable.collisionStart);\r\n        this.manifoldTable.collisionActive.length &&\r\n            eventEmitter_1.Event.emit(this, 'collisionActive', this.manifoldTable.collisionActive);\r\n        this.manifoldTable.collisionEnd.length &&\r\n            eventEmitter_1.Event.emit(this, 'collisionEnd', this.manifoldTable.collisionEnd);\r\n    }\r\n    /**\r\n     * 渲染物理引擎\r\n     * @param dt\r\n     */\r\n    render(dt) {\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            if (this.bodies[i].sleeping || this.bodies[i].fixed) {\r\n                continue;\r\n            }\r\n            // 渲染刚体\r\n            this.bodies[i].render(this.bodies[i], dt);\r\n        }\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setOption(opt) {\r\n        util_1.Util.merge(this, opt);\r\n        util_1.Util.merge(this.timeStepper, opt);\r\n    }\r\n}\r\nexports.Engine = Engine;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TimeStepper = void 0;\r\nconst util_1 = __webpack_require__(0);\r\nconst eventEmitter_1 = __webpack_require__(3);\r\n/**\r\n * 时间步迭代器\r\n */\r\nclass TimeStepper {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.status = false;\r\n        this.tickProcessorList = [];\r\n        this.fps = opt.fps || 60;\r\n        this.deltaFixed = opt.deltaFixed === undefined ? true : opt.deltaFixed;\r\n        this.deltaRecordLimit = 60;\r\n        util_1.Util.merge(this, opt);\r\n        this.dt = 1 / this.fps;\r\n        this.dtMin = this.dt;\r\n        this.dtMax = this.dt * 2;\r\n        this.frameCounter = 0;\r\n        this.frameStamp = 0;\r\n        this.prevTime = 0;\r\n        this.frameTotal = 0;\r\n        this.frameNumLimit = -1;\r\n        this.deltaRecorder = [];\r\n    }\r\n    /**\r\n     * 一次tick，也就是一次模拟\r\n     * @param timeStamp 当前时间戳\r\n     */\r\n    tick(timeStamp = 0) {\r\n        let dt;\r\n        // 固定dt\r\n        if (this.deltaFixed === false) {\r\n            // 动态计算dt\r\n            dt = (timeStamp - this.prevTime) || this.dt;\r\n            this.prevTime = timeStamp;\r\n            // 根据过去的变化步长情况，优化当前步长，使引擎稳定\r\n            this.deltaRecorder.push(dt);\r\n            this.deltaRecorder = this.deltaRecorder.slice(-this.deltaRecordLimit);\r\n            dt = util_1.Util.clamp(Math.min.apply(Math, this.deltaRecorder), this.dtMin, this.dtMax);\r\n            // 更新dt\r\n            this.dt = dt;\r\n        }\r\n        // 动态计算fps\r\n        this.frameCounter += 1;\r\n        if (timeStamp - this.frameStamp >= 1000) {\r\n            this.fps = this.frameCounter * ((timeStamp - this.frameStamp) / 1000);\r\n            this.frameStamp = timeStamp;\r\n            this.frameCounter = 0;\r\n        }\r\n        eventEmitter_1.Event.emit(this.engine, 'onTickStart');\r\n        // 更新物理引擎\r\n        eventEmitter_1.Event.emit(this.engine, 'beforeUpdate');\r\n        this.engine.update(this.dt, timeStamp);\r\n        eventEmitter_1.Event.emit(this.engine, 'afterUpdate');\r\n        // 渲染物理引擎\r\n        eventEmitter_1.Event.emit(this.engine, 'beforeRender');\r\n        this.engine.render(this.dt);\r\n        eventEmitter_1.Event.emit(this.engine, 'afterRender');\r\n        // 执行用户自定义函数\r\n        this.tickProcessorList.map(fn => fn(timeStamp));\r\n        eventEmitter_1.Event.emit(this.engine, 'onTickEnd');\r\n        this.frameTotal++;\r\n        if (this.frameNumLimit > 0 && this.frameTotal >= this.frameNumLimit) {\r\n            this.pause();\r\n            return;\r\n        }\r\n        this.raf = window.requestAnimationFrame(this.tick.bind(this));\r\n    }\r\n    /**\r\n     * 在一次tick中增加额外自定义的处理函数\r\n     * @param fn 要增加的处理函数\r\n     */\r\n    addStep(fn) {\r\n        typeof fn === 'function' && this.tickProcessorList.push(fn);\r\n    }\r\n    /**\r\n     * 开始模拟\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        if (this.status)\r\n            return;\r\n        if (frameNumLimit && frameNumLimit > 0) {\r\n            this.frameNumLimit = frameNumLimit;\r\n        }\r\n        this.status = true;\r\n        eventEmitter_1.Event.emit(this.engine, 'onStart');\r\n        this.tick();\r\n    }\r\n    /**\r\n     * 暂停模拟\r\n     */\r\n    pause() {\r\n        if (!this.status)\r\n            return;\r\n        this.status = false;\r\n        this.frameTotal = 0;\r\n        eventEmitter_1.Event.emit(this.engine, 'pause');\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n}\r\nexports.TimeStepper = TimeStepper;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Detector = void 0;\r\nconst broadPhase_1 = __webpack_require__(15);\r\nconst narrowPhase_1 = __webpack_require__(16);\r\n/**\r\n * 碰撞检测\r\n */\r\nclass Detector {\r\n    constructor(engine, opt) {\r\n        this.broadPhase = new broadPhase_1.BroadPhase(engine, opt);\r\n        this.narrowPhase = new narrowPhase_1.NarrowPhase(engine, opt);\r\n    }\r\n}\r\nexports.Detector = Detector;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2RldGVjdG9yLnRzPzhiODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTBDO0FBQzFDLDhDQUE0QztBQUc1Qzs7R0FFRztBQUlILE1BQWEsUUFBUTtJQU1qQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSx1QkFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBVkQsNEJBVUMiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcm9hZFBoYXNlIH0gZnJvbSBcIi4vYnJvYWRQaGFzZVwiO1xyXG5pbXBvcnQgeyBOYXJyb3dQaGFzZSB9IGZyb20gXCIuL25hcnJvd1BoYXNlXCI7XHJcbmltcG9ydCB7IEVuZ2luZSwgRW5naW5lT3B0IH0gZnJvbSBcIi4uL2NvcmUvZW5naW5lXCI7XHJcblxyXG4vKipcclxuICog56Kw5pKe5qOA5rWLXHJcbiAqL1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGV0ZWN0b3Ige1xyXG4gICAgLy8g57KX5qOA5p+lXHJcbiAgICBicm9hZFBoYXNlOiBCcm9hZFBoYXNlO1xyXG4gICAgLy8g57uG5qOA5rWLXHJcbiAgICBuYXJyb3dQaGFzZTogTmFycm93UGhhc2U7ICAgXHJcblxyXG4gICAgY29uc3RydWN0b3IoZW5naW5lOiBFbmdpbmUsIG9wdDogRW5naW5lT3B0KSB7XHJcbiAgICAgICAgdGhpcy5icm9hZFBoYXNlID0gbmV3IEJyb2FkUGhhc2UoZW5naW5lLCBvcHQpO1xyXG4gICAgICAgIHRoaXMubmFycm93UGhhc2UgPSBuZXcgTmFycm93UGhhc2UoZW5naW5lLCBvcHQpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BroadPhase = void 0;\r\nconst util_1 = __webpack_require__(0);\r\nclass BroadPhase {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * 检测\r\n     * @param bodies 所有刚体\r\n     */\r\n    detect(bodies) {\r\n        return this.sweepAndPrune(bodies);\r\n    }\r\n    /**\r\n     * 查看刚体是否出了可视区\r\n     * @param bound\r\n     */\r\n    isBodyOutWindow(bound) {\r\n        return bound.max.y < 0 || bound.min.x > this.engine.width || bound.min.y > this.engine.height || bound.max.x < 0;\r\n    }\r\n    /**\r\n     * 查看两个刚体是否允许发生碰撞\r\n     * @param bodyA\r\n     * @param bodyB\r\n     */\r\n    canCollide(bodyA, bodyB) {\r\n        // 若bodies[i]的碰撞过滤器过滤了bodies[i]，不进行检测\r\n        if (!bodyA.methods.filter(bodyA.mask, bodyB.mask) || !bodyB.methods.filter(bodyB.mask, bodyA.mask))\r\n            return false;\r\n        // 若刚体已经移出可视区了，跳过\r\n        if (this.isBodyOutWindow(bodyA.bound) || this.isBodyOutWindow(bodyB.bound))\r\n            return false;\r\n        // 两个静态刚体 ，跳过\r\n        if (bodyA.fixed && bodyB.fixed)\r\n            return false;\r\n        // 两个睡眠刚体，跳过\r\n        if (bodyA.sleeping && bodyB.sleeping)\r\n            return false;\r\n        return true;\r\n    }\r\n    /**\r\n     * Sweep & Prune\r\n     * @param bodies\r\n     */\r\n    sweepAndPrune(bodies) {\r\n        let broadPhasePairList = [], i, j, len = bodies.length;\r\n        // 包围盒在x轴上排序 （直接插入排序）\r\n        // 第一次排序时包围盒趋向于无序，这时复杂度为O(n^2) \r\n        // 而因为时间相干性，在之后的每帧包围盒趋向有序，此时直接插入排序效率最高，为O(nlogn)\r\n        util_1.Util.insertSort(bodies, (bodyA, bodyB) => bodyA.bound.min.x - bodyB.bound.min.x);\r\n        for (i = 0; i < len; i++) {\r\n            for (j = i + 1; j < len; j++) {\r\n                let boundA = bodies[i].bound, boundB = bodies[j].bound;\r\n                // 已经不可能发生碰撞了，跳出循环\r\n                if (boundA.max.x < boundB.min.x)\r\n                    break;\r\n                // 若A，B不可以发生碰撞，返回\r\n                if (!this.canCollide(bodies[i], bodies[j]))\r\n                    continue;\r\n                // 一个个对比包围盒是否相交\r\n                if (boundA.min.y < boundB.max.y && boundB.min.y < boundA.max.y) {\r\n                    broadPhasePairList.push({\r\n                        bodyA: bodies[i],\r\n                        bodyB: bodies[j],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return broadPhasePairList;\r\n    }\r\n}\r\nexports.BroadPhase = BroadPhase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2Jyb2FkUGhhc2UudHM/ZWRmYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBc0M7QUFrQnRDLE1BQWEsVUFBVTtJQUduQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsTUFBYztRQUNqQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNLLGVBQWUsQ0FBQyxLQUFZO1FBQ2hDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNySCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLFVBQVUsQ0FBQyxLQUFXLEVBQUUsS0FBVztRQUN2QyxxQ0FBcUM7UUFDckMsSUFBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFaEgsaUJBQWlCO1FBQ2pCLElBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFeEYsYUFBYTtRQUNiLElBQUcsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRTVDLFlBQVk7UUFDWixJQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVE7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssYUFBYSxDQUFDLE1BQWM7UUFDaEMsSUFBSSxrQkFBa0IsR0FBcUIsRUFBRSxFQUN6QyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRTlCLHFCQUFxQjtRQUNyQiwrQkFBK0I7UUFDL0IsZ0RBQWdEO1FBQ2hELFdBQUksQ0FBQyxVQUFVLENBQU8sTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXZGLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JCLEtBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDekIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFDeEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBRTdCLGtCQUFrQjtnQkFDbEIsSUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQUUsTUFBTTtnQkFFdEMsaUJBQWlCO2dCQUNqQixJQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFFLFNBQVM7Z0JBRXBELGVBQWU7Z0JBQ2YsSUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDM0Qsa0JBQWtCLENBQUMsSUFBSSxDQUFDO3dCQUNwQixLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDaEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ25CLENBQUMsQ0FBQztpQkFDTjthQUNKO1NBQ0o7UUFFRCxPQUFPLGtCQUFrQixDQUFDO0lBQzlCLENBQUM7Q0FDSjtBQWhGRCxnQ0FnRkMiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBVdGlsIH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsXCI7XHJcbmltcG9ydCB7IEJvdW5kIH0gZnJvbSBcIi4vYm91bmRcIjtcclxuaW1wb3J0IHsgRW5naW5lLCBFbmdpbmVPcHQgfSBmcm9tIFwiLi4vY29yZS9lbmdpbmVcIjtcclxuXHJcbi8qKlxyXG4gKiDnspfmo4DmtYvpmLbmrrXvvIzkvb/nlKhTd2VlcCAmIFBydW5l566X5rOVXHJcbiAqIOWPguiAg++8mmh0dHBzOi8vbGluay5zcHJpbmdlci5jb20vYXJ0aWNsZS8xMC4xMDA3L3MwMDM3MS0wMTMtMDg4MC03XHJcbiAqL1xyXG5cclxuXHJcbi8vIOeyl+ajgOa1i+mYtuauteeUn+aIkOeahOe7k+aenOWvuee7k+aehFxyXG5leHBvcnQgdHlwZSBicm9hZFBoYXNlUGFpciA9IHtcclxuICAgIGJvZHlBOiBCb2R5O1xyXG4gICAgYm9keUI6IEJvZHk7XHJcbn07XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCcm9hZFBoYXNlIHtcclxuICAgIGVuZ2luZTogRW5naW5lO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVuZ2luZTogRW5naW5lLCBvcHQ6IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qOA5rWLXHJcbiAgICAgKiBAcGFyYW0gYm9kaWVzIOaJgOacieWImuS9k1xyXG4gICAgICovXHJcbiAgICBkZXRlY3QoYm9kaWVzOiBCb2R5W10pOiBicm9hZFBoYXNlUGFpcltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zd2VlcEFuZFBydW5lKGJvZGllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvliJrkvZPmmK/lkKblh7rkuoblj6/op4bljLpcclxuICAgICAqIEBwYXJhbSBib3VuZCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0JvZHlPdXRXaW5kb3coYm91bmQ6IEJvdW5kKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGJvdW5kLm1heC55IDwgMCB8fCBib3VuZC5taW4ueCA+IHRoaXMuZW5naW5lLndpZHRoIHx8IGJvdW5kLm1pbi55ID4gdGhpcy5lbmdpbmUuaGVpZ2h0IHx8IGJvdW5kLm1heC54IDwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeeci+S4pOS4quWImuS9k+aYr+WQpuWFgeiuuOWPkeeUn+eisOaSnlxyXG4gICAgICogQHBhcmFtIGJvZHlBIFxyXG4gICAgICogQHBhcmFtIGJvZHlCIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbkNvbGxpZGUoYm9keUE6IEJvZHksIGJvZHlCOiBCb2R5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8g6IulYm9kaWVzW2ld55qE56Kw5pKe6L+H5ruk5Zmo6L+H5ruk5LqGYm9kaWVzW2ld77yM5LiN6L+b6KGM5qOA5rWLXHJcbiAgICAgICAgaWYoIWJvZHlBLm1ldGhvZHMuZmlsdGVyKGJvZHlBLm1hc2ssIGJvZHlCLm1hc2spIHx8ICFib2R5Qi5tZXRob2RzLmZpbHRlcihib2R5Qi5tYXNrLCBib2R5QS5tYXNrKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOiLpeWImuS9k+W3sue7j+enu+WHuuWPr+inhuWMuuS6hu+8jOi3s+i/h1xyXG4gICAgICAgIGlmKHRoaXMuaXNCb2R5T3V0V2luZG93KGJvZHlBLmJvdW5kKSB8fCB0aGlzLmlzQm9keU91dFdpbmRvdyhib2R5Qi5ib3VuZCkpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8g5Lik5Liq6Z2Z5oCB5Yia5L2TIO+8jOi3s+i/h1xyXG4gICAgICAgIGlmKGJvZHlBLmZpeGVkICYmIGJvZHlCLmZpeGVkKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIOS4pOS4quedoeecoOWImuS9k++8jOi3s+i/h1xyXG4gICAgICAgIGlmKGJvZHlBLnNsZWVwaW5nICYmIGJvZHlCLnNsZWVwaW5nKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3dlZXAgJiBQcnVuZVxyXG4gICAgICogQHBhcmFtIGJvZGllcyBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzd2VlcEFuZFBydW5lKGJvZGllczogQm9keVtdKTogYnJvYWRQaGFzZVBhaXJbXSB7XHJcbiAgICAgICAgbGV0IGJyb2FkUGhhc2VQYWlyTGlzdDogYnJvYWRQaGFzZVBhaXJbXSA9IFtdLFxyXG4gICAgICAgICAgICBpLCBqLCBsZW4gPSBib2RpZXMubGVuZ3RoO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOWMheWbtOebkuWcqHjovbTkuIrmjpLluo8g77yI55u05o6l5o+S5YWl5o6S5bqP77yJXHJcbiAgICAgICAgLy8g56ys5LiA5qyh5o6S5bqP5pe25YyF5Zu055uS6LaL5ZCR5LqO5peg5bqP77yM6L+Z5pe25aSN5p2C5bqm5Li6TyhuXjIpIFxyXG4gICAgICAgIC8vIOiAjOWboOS4uuaXtumXtOebuOW5suaAp++8jOWcqOS5i+WQjueahOavj+W4p+WMheWbtOebkui2i+WQkeacieW6j++8jOatpOaXtuebtOaOpeaPkuWFpeaOkuW6j+aViOeOh+acgOmrmO+8jOS4uk8obmxvZ24pXHJcbiAgICAgICAgVXRpbC5pbnNlcnRTb3J0PEJvZHk+KGJvZGllcywgKGJvZHlBLCBib2R5QikgPT4gYm9keUEuYm91bmQubWluLnggLSBib2R5Qi5ib3VuZC5taW4ueCk7XHJcbiAgICBcclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3IoaiA9IGkgKyAxOyBqIDwgbGVuOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBib3VuZEEgPSBib2RpZXNbaV0uYm91bmQsXHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRCID0gYm9kaWVzW2pdLmJvdW5kO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOW3sue7j+S4jeWPr+iDveWPkeeUn+eisOaSnuS6hu+8jOi3s+WHuuW+queOr1xyXG4gICAgICAgICAgICAgICAgaWYoYm91bmRBLm1heC54IDwgYm91bmRCLm1pbi54KSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoi6VB77yMQuS4jeWPr+S7peWPkeeUn+eisOaSnu+8jOi/lOWbnlxyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuY2FuQ29sbGlkZShib2RpZXNbaV0sIGJvZGllc1tqXSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOS4gOS4quS4quWvueavlOWMheWbtOebkuaYr+WQpuebuOS6pFxyXG4gICAgICAgICAgICAgICAgaWYoYm91bmRBLm1pbi55IDwgYm91bmRCLm1heC55ICYmIGJvdW5kQi5taW4ueSA8IGJvdW5kQS5tYXgueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyb2FkUGhhc2VQYWlyTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUE6IGJvZGllc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUI6IGJvZGllc1tqXSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJyb2FkUGhhc2VQYWlyTGlzdDtcclxuICAgIH0gXHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.NarrowPhase = void 0;\r\nconst sat_1 = __webpack_require__(17);\r\nconst arcs_1 = __webpack_require__(4);\r\nconst vertices_1 = __webpack_require__(2);\r\nconst util_1 = __webpack_require__(0);\r\nclass NarrowPhase {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.SAT = new sat_1.SAT(opt);\r\n    }\r\n    /**\r\n     * 检测\r\n     * @param broadPhasePairList 粗检查生成的潜在碰撞对\r\n     */\r\n    detect(broadPhasePairList) {\r\n        let collisions = [], prevCollision = null, pair, partsA, partsB, partA, partB, i, j, k;\r\n        for (i = 0; i < broadPhasePairList.length; i++) {\r\n            pair = broadPhasePairList[i];\r\n            partsA = pair.bodyA.parts;\r\n            partsB = pair.bodyB.parts;\r\n            for (j = 0; j < partsA.length; j++) {\r\n                partA = partsA[j];\r\n                for (k = 0; k < partsB.length; k++) {\r\n                    partB = partsB[k];\r\n                    // 两个子图形包围盒不相交，跳过\r\n                    let axesA = partA instanceof vertices_1.Poly ? partA.axes : [], axesB = partB instanceof vertices_1.Poly ? partB.axes : [], intersection = partA.bound.isIntersect(partB.bound);\r\n                    if (!intersection)\r\n                        continue;\r\n                    prevCollision = this.getPrevCollision(partA, partB, this.engine.manifoldTable);\r\n                    // A,B皆为圆形\r\n                    if (partA instanceof arcs_1.Arc && partB instanceof arcs_1.Arc) {\r\n                        collisions.push(this.SAT.circleCollideCircle(partA, partB, prevCollision));\r\n                    }\r\n                    // A为多边形，B为圆形\r\n                    else if (partA instanceof vertices_1.Poly && partB instanceof arcs_1.Arc) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                    // A为圆形，B为多边形\r\n                    else if (partA instanceof arcs_1.Arc && partB instanceof vertices_1.Poly) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partB, partA, prevCollision));\r\n                    }\r\n                    // A,B皆为多边形\r\n                    else {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return collisions;\r\n    }\r\n    /**\r\n     * 获取上一次碰撞\r\n     * @param partA\r\n     * @param partB\r\n     * @param manifoldTable\r\n     */\r\n    getPrevCollision(partA, partB, manifoldTable) {\r\n        let id = util_1.Util.compositeId(partA.id, partB.id), manifold = manifoldTable.table[id];\r\n        if (this.engine.manifoldTable.enableCache && manifold && manifold.isActive) {\r\n            return manifold.collision;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nexports.NarrowPhase = NarrowPhase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SAT = void 0;\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\nconst arcs_1 = __webpack_require__(4);\r\nconst manifold_1 = __webpack_require__(7);\r\nconst vClosest_1 = __webpack_require__(18);\r\nconst contact_1 = __webpack_require__(5);\r\nconst util_1 = __webpack_require__(0);\r\nconst axesFilter_1 = __webpack_require__(19);\r\n/**\r\n * 分离轴算法\r\n * 参考：https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\r\n */\r\nclass SAT {\r\n    constructor(opt) {\r\n        // 是否开启SAT加速\r\n        this.enableSATBoost = true;\r\n        this.polySimplificationThreshold = 5;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 多边形 - 多边形或圆形（geometry）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param prevCollision\r\n     */\r\n    polygonCollideBody(poly, geometry, prevCollision) {\r\n        let canReuse = this.canReuseCollision(poly, geometry, prevCollision), collision = null, result = null, axes;\r\n        // 若能用缓存，使用缓存\r\n        if (canReuse) {\r\n            collision = prevCollision;\r\n            result = this.detect(poly, geometry, [collision.axis]);\r\n            if (result.minOverlap < 0) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n        }\r\n        // 若不能用缓存，则进行完整的测试\r\n        else {\r\n            collision = new manifold_1.Collision();\r\n            axes = this.getTestAxes(poly, geometry);\r\n            result = this.detect(poly, geometry, axes);\r\n            // 若发现两个刚体投影的重叠部分是负的，即表示它们没相交\r\n            if (result.minOverlap < 0) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            let axis = axes[result.index], normal = this.reviseNormal(axis.value, poly, geometry);\r\n            collision.axis.value = axis.value;\r\n            collision.axis.supportVertexIndex = axis.supportVertexIndex;\r\n            collision.axis.oppositeVertexIndex = axis.oppositeVertexIndex;\r\n            collision.axis.opposite = axis.opposite;\r\n            collision.axis.origin = axis.origin;\r\n            collision.normal = normal;\r\n            collision.tangent = normal.nor();\r\n            collision.partA = poly;\r\n            collision.partB = geometry;\r\n            collision.bodyA = poly.body;\r\n            collision.bodyB = geometry.body;\r\n        }\r\n        collision.collide = true;\r\n        // 计算碰撞点\r\n        collision.contacts = this.findContacts(poly, geometry, collision.normal, result.minOverlap);\r\n        return collision;\r\n    }\r\n    /**\r\n     * 圆形 - 圆形\r\n     * @param circleA\r\n     * @param circleB\r\n     * @param prevCollision\r\n     */\r\n    circleCollideCircle(arcA, arcB, prevCollision) {\r\n        let axis = {\r\n            value: arcA.centroid.sub(arcB.centroid, vector_1._tempVector1),\r\n            opposite: null,\r\n            origin: null,\r\n            supportVertexIndex: null,\r\n            oppositeVertexIndex: null\r\n        }, overlaps = (arcA.radius + arcB.radius) - axis.value.len(), collision = new manifold_1.Collision(), normal;\r\n        // 两圆心距离比两圆半径和要大，即没有发生碰撞\r\n        if (overlaps < 0) {\r\n            collision.collide = false;\r\n            return collision;\r\n        }\r\n        normal = this.reviseNormal(axis.value, arcA, arcB).nol();\r\n        collision.axis = axis;\r\n        collision.partA = arcA;\r\n        collision.partB = arcB;\r\n        collision.bodyA = arcA.body;\r\n        collision.bodyB = arcB.body;\r\n        collision.normal = normal;\r\n        collision.tangent = normal.nor();\r\n        let position = arcA.centroid.loc(normal.inv(vector_1._tempVector1), arcA.radius - overlaps / 2);\r\n        collision.contacts = [new contact_1.Contact(position, overlaps)];\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * --------------------------------------------------------------------------------------------------\r\n     */\r\n    /**\r\n     * 进行分离轴检测\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axes\r\n     */\r\n    detect(poly, geometry, axes) {\r\n        let minOverlap = Infinity, getOverlaps = this.enableSATBoost ? this.selectiveProjectionMethod : this.fullProjectionMethod, overlaps, i, index;\r\n        // 将两个刚体投影到所有轴上\r\n        for (i = 0; i < axes.length; i++) {\r\n            if (axes[i] === null) {\r\n                continue;\r\n            }\r\n            overlaps = getOverlaps(poly, geometry, axes[i]);\r\n            if (overlaps < 0) {\r\n                return {\r\n                    minOverlap: overlaps,\r\n                    index\r\n                };\r\n            }\r\n            if (overlaps < minOverlap) {\r\n                minOverlap = overlaps;\r\n                index = i;\r\n            }\r\n        }\r\n        return {\r\n            minOverlap,\r\n            index\r\n        };\r\n    }\r\n    /**\r\n     * 获取测试轴\r\n     * @param poly\r\n     * @param geometry\r\n     */\r\n    getTestAxes(poly, geometry) {\r\n        let axes, circleAxis;\r\n        // 若geometry是圆形，计算一条动态轴\r\n        if (geometry instanceof arcs_1.Arc) {\r\n            circleAxis = arcs_1.Arcs.getAxes(geometry, poly);\r\n        }\r\n        // 如果开启了加速功能，首先进行轴过滤\r\n        if (this.enableSATBoost) {\r\n            axes = axesFilter_1.axesFilter(poly, geometry);\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n        }\r\n        else {\r\n            axes = [];\r\n            axes.push(...poly.axes);\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n            else {\r\n                axes.push(...geometry.axes);\r\n            }\r\n        }\r\n        return axes;\r\n    }\r\n    /**\r\n     * 全投影法（传统）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     */\r\n    fullProjectionMethod(poly, geometry, axis) {\r\n        let axisVector = axis.value, partA = poly.vertexList, partB = geometry instanceof vertices_1.Poly ? geometry.vertexList : geometry, projection1, projection2;\r\n        // 若geometry是多边形\r\n        if (Array.isArray(partB)) {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = vertices_1.Vertices.projection(partB, axisVector);\r\n        }\r\n        // 是圆形\r\n        else {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = arcs_1.Arcs.projection(partB, axisVector);\r\n        }\r\n        return Math.min(projection1.max - projection2.min, projection2.max - projection1.min);\r\n    }\r\n    /**\r\n     * 选择投影法\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     */\r\n    selectiveProjectionMethod(poly, geometry, axis) {\r\n        let axisVector = axis.value, opposite = axis.opposite;\r\n        // 该轴是圆形和多边形的动态轴\r\n        if (opposite === null) {\r\n            let projection1 = vertices_1.Vertices.projection(poly.vertexList, axisVector), projection2 = arcs_1.Arcs.projection(geometry, axisVector);\r\n            return Math.min(projection1.max - projection2.min, projection2.max - projection1.min);\r\n        }\r\n        let supportVertex = axis.origin[axis.supportVertexIndex], supportProjection = supportVertex.dot(axisVector);\r\n        // 对面是圆形\r\n        if (opposite instanceof arcs_1.Arc) {\r\n            let circleProjection = arcs_1.Arcs.projection(opposite, axisVector);\r\n            return supportProjection - circleProjection.min;\r\n        }\r\n        let oppositeIndex = axis.oppositeVertexIndex, maxOverlap = -Infinity, prev, next, seekPrev = true, seekNext = true, lastPrevPro, lastNextPro, projection, overlap;\r\n        projection = opposite[oppositeIndex].dot(axisVector);\r\n        overlap = supportProjection - projection;\r\n        maxOverlap = overlap;\r\n        prev = next = oppositeIndex;\r\n        lastPrevPro = lastNextPro = projection;\r\n        do {\r\n            if (!seekPrev && !seekNext) {\r\n                break;\r\n            }\r\n            if (seekPrev) {\r\n                prev = prev > 0 ? prev - 1 : opposite.length - 1;\r\n                projection = opposite[prev].dot(axisVector);\r\n                overlap = supportProjection - projection;\r\n                if (projection > lastPrevPro) {\r\n                    seekPrev = false;\r\n                }\r\n                else {\r\n                    if (overlap > maxOverlap) {\r\n                        maxOverlap = overlap;\r\n                    }\r\n                    lastPrevPro = projection;\r\n                }\r\n            }\r\n            if (seekNext) {\r\n                next = (next + 1) % opposite.length;\r\n                projection = opposite[next].dot(axisVector);\r\n                overlap = supportProjection - projection;\r\n                if (projection > lastNextPro) {\r\n                    seekNext = false;\r\n                }\r\n                else {\r\n                    if (overlap > maxOverlap) {\r\n                        maxOverlap = overlap;\r\n                    }\r\n                    lastNextPro = projection;\r\n                }\r\n            }\r\n        } while (prev !== next);\r\n        return maxOverlap;\r\n    }\r\n    /**\r\n     * 修正碰撞法线方向，使其始终背向刚体A\r\n     * @param normal 要修正的法线\r\n     * @param bodyA 刚体A\r\n     * @param bodyB 刚体B\r\n     */\r\n    reviseNormal(normal, geometryA, geometryB) {\r\n        if (normal.dot(geometryB.centroid.sub(geometryA.centroid, vector_1._tempVector1)) > 0) {\r\n            return normal.inv();\r\n        }\r\n        return normal;\r\n    }\r\n    /**\r\n     * 查看碰撞缓存是否可以复用\r\n     * @param geometryA\r\n     * @param geometryB\r\n     * @param prevCollision 上一次的碰撞\r\n     */\r\n    canReuseCollision(geometryA, geometryB, prevCollision) {\r\n        // 若上次碰撞的缓存存在\r\n        if (prevCollision) {\r\n            let bodyA = geometryA.body, bodyB = geometryB.body, motion = Math.sqrt(bodyA.motion + bodyB.motion);\r\n            // 若上次碰撞判定为真，且当前碰撞对刚体趋于静止，可复用\r\n            return prevCollision.collide && motion < 0.05;\r\n        }\r\n        // 碰撞缓存不存在，直接判定无法复用\r\n        return false;\r\n    }\r\n    /**\r\n     * 寻找碰撞点\r\n     * @param poly\r\n     * @param geometry\r\n     * @param normal\r\n     * @param depth\r\n     */\r\n    findContacts(poly, geometry, normal, depth) {\r\n        if (geometry instanceof vertices_1.Poly) {\r\n            return vClosest_1.VClosest(poly.vertexList, geometry.vertexList, normal, depth);\r\n            //return VClip(poly, geometry, normal, depth);\r\n        }\r\n        else {\r\n            let vertex = geometry.centroid.loc(normal, geometry.radius - depth / 2);\r\n            return [new contact_1.Contact(vertex, depth)];\r\n        }\r\n    }\r\n}\r\nexports.SAT = SAT;\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.VClosest = void 0;\r\nconst vertices_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(1);\r\nconst contact_1 = __webpack_require__(5);\r\n/**\r\n * 将顶点按照在法线上投影的大小顺序排序\r\n * @param vertexList\r\n * @param normal\r\n */\r\nfunction findClosestVertexIndex(vertexList, normal) {\r\n    let projection, minProjection = Infinity, index;\r\n    for (let i = 0; i < vertexList.length; i++) {\r\n        projection = vertexList[i].dot(normal);\r\n        if (projection < minProjection) {\r\n            minProjection = projection;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n/**\r\n * 最近内部顶点法寻找碰撞点\r\n * 详见：https://github.com/phenomLi/Blog/issues/41\r\n * @param poly\r\n * @param geometry\r\n */\r\nfunction VClosest(vertexListA, vertexListB, normal, depth) {\r\n    let contacts = [], normalInv = normal.inv(vector_1._tempVector3), index, prev, next, testVertices = [], i;\r\n    // 寻找多边形A最接近多边形B的两个点\r\n    index = findClosestVertexIndex(vertexListA, normal);\r\n    prev = index > 0 ? index - 1 : vertexListA.length - 1;\r\n    next = index < vertexListA.length - 1 ? index + 1 : 0;\r\n    testVertices.push(vertexListA[prev]);\r\n    testVertices.push(vertexListA[index]);\r\n    testVertices.push(vertexListA[next]);\r\n    for (i = 0; i < testVertices.length; i++) {\r\n        // 查看这些点是否在多边形B内部\r\n        if (vertices_1.Vertices.isContains(vertexListB, testVertices[i])) {\r\n            // 如果是，则这个点记为一个碰撞点\r\n            contacts.push(new contact_1.Contact(testVertices[i], depth));\r\n        }\r\n    }\r\n    if (contacts.length >= 2) {\r\n        return contacts;\r\n    }\r\n    ;\r\n    testVertices.length = 0;\r\n    // 同理上面\r\n    index = findClosestVertexIndex(vertexListB, normalInv);\r\n    prev = index > 0 ? index - 1 : vertexListB.length - 1;\r\n    next = index < vertexListB.length - 1 ? index + 1 : 0;\r\n    testVertices.push(vertexListB[prev]);\r\n    testVertices.push(vertexListB[index]);\r\n    testVertices.push(vertexListB[next]);\r\n    for (i = 0; i < testVertices.length; i++) {\r\n        if (vertices_1.Vertices.isContains(vertexListA, testVertices[i])) {\r\n            contacts.push(new contact_1.Contact(testVertices[i], depth));\r\n        }\r\n    }\r\n    // 边界情况：即没有碰撞点的情况\r\n    if (contacts.length < 1) {\r\n        contacts.push(new contact_1.Contact(vertexListB[index], depth));\r\n    }\r\n    return contacts;\r\n}\r\nexports.VClosest = VClosest;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL3ZDbG9zZXN0LnRzPzAzZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMENBQWdFO0FBQ2hFLHdDQUFzRDtBQUN0RCx5Q0FBZ0Q7QUFHaEQ7Ozs7R0FJRztBQUNILFNBQVMsc0JBQXNCLENBQUMsVUFBc0IsRUFBRSxNQUFjO0lBQ2xFLElBQUksVUFBa0IsRUFDbEIsYUFBYSxHQUFXLFFBQVEsRUFDaEMsS0FBYSxDQUFDO0lBRWxCLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLElBQUcsVUFBVSxHQUFHLGFBQWEsRUFBRTtZQUMzQixhQUFhLEdBQUcsVUFBVSxDQUFDO1lBQzNCLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDYjtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUdEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFDLFdBQXVCLEVBQUUsV0FBdUIsRUFBRSxNQUFjLEVBQUUsS0FBYTtJQUNwRyxJQUFJLFFBQVEsR0FBYyxFQUFFLEVBQ3hCLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLHFCQUFZLENBQUMsRUFDcEMsS0FBYSxFQUFFLElBQVksRUFBRSxJQUFZLEVBQ3pDLFlBQVksR0FBYSxFQUFFLEVBQzNCLENBQUMsQ0FBQztJQUVOLG9CQUFvQjtJQUNwQixLQUFLLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELElBQUksR0FBRyxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBELFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDckMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN0QyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXJDLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxpQkFBaUI7UUFDakIsSUFBRyxtQkFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEQsa0JBQWtCO1lBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3REO0tBQ0o7SUFFRCxJQUFHLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sUUFBUSxDQUFDO0tBQ25CO0lBQUEsQ0FBQztJQUVGLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRXhCLE9BQU87SUFDUCxLQUFLLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZELElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELElBQUksR0FBRyxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBELFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDckMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN0QyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXJDLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFHLG1CQUFRLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN0RDtLQUNKO0lBRUQsaUJBQWlCO0lBQ2pCLElBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDcEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBbkRELDRCQW1EQyIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF4aXMsIFZlcnRleExpc3QsIFZlcnRpY2VzIH0gZnJvbSBcIi4uL2NvbW1vbi92ZXJ0aWNlc1wiO1xyXG5pbXBvcnQgeyBWZWN0b3IsIF90ZW1wVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBDb250YWN0IH0gZnJvbSBcIi4uL2NvbnN0cmFpbnQvY29udGFjdFwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDlsIbpobbngrnmjInnhaflnKjms5Xnur/kuIrmipXlvbHnmoTlpKflsI/pobrluo/mjpLluo9cclxuICogQHBhcmFtIHZlcnRleExpc3QgXHJcbiAqIEBwYXJhbSBub3JtYWwgXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdFZlcnRleEluZGV4KHZlcnRleExpc3Q6IFZlcnRleExpc3QsIG5vcm1hbDogVmVjdG9yKTogbnVtYmVyIHtcclxuICAgIGxldCBwcm9qZWN0aW9uOiBudW1iZXIsXHJcbiAgICAgICAgbWluUHJvamVjdGlvbjogbnVtYmVyID0gSW5maW5pdHksXHJcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdmVydGV4TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHByb2plY3Rpb24gPSB2ZXJ0ZXhMaXN0W2ldLmRvdChub3JtYWwpO1xyXG5cclxuICAgICAgICBpZihwcm9qZWN0aW9uIDwgbWluUHJvamVjdGlvbikge1xyXG4gICAgICAgICAgICBtaW5Qcm9qZWN0aW9uID0gcHJvamVjdGlvbjtcclxuICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5kZXg7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog5pyA6L+R5YaF6YOo6aG254K55rOV5a+75om+56Kw5pKe54K5XHJcbiAqIOivpuinge+8mmh0dHBzOi8vZ2l0aHViLmNvbS9waGVub21MaS9CbG9nL2lzc3Vlcy80MVxyXG4gKiBAcGFyYW0gcG9seSBcclxuICogQHBhcmFtIGdlb21ldHJ5IFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFZDbG9zZXN0KHZlcnRleExpc3RBOiBWZXJ0ZXhMaXN0LCB2ZXJ0ZXhMaXN0QjogVmVydGV4TGlzdCwgbm9ybWFsOiBWZWN0b3IsIGRlcHRoOiBudW1iZXIpOiBDb250YWN0W10ge1xyXG4gICAgbGV0IGNvbnRhY3RzOiBDb250YWN0W10gPSBbXSxcclxuICAgICAgICBub3JtYWxJbnYgPSBub3JtYWwuaW52KF90ZW1wVmVjdG9yMyksXHJcbiAgICAgICAgaW5kZXg6IG51bWJlciwgcHJldjogbnVtYmVyLCBuZXh0OiBudW1iZXIsXHJcbiAgICAgICAgdGVzdFZlcnRpY2VzOiBWZWN0b3JbXSA9IFtdLFxyXG4gICAgICAgIGk7XHJcblxyXG4gICAgLy8g5a+75om+5aSa6L655b2iQeacgOaOpei/keWkmui+ueW9okLnmoTkuKTkuKrngrlcclxuICAgIGluZGV4ID0gZmluZENsb3Nlc3RWZXJ0ZXhJbmRleCh2ZXJ0ZXhMaXN0QSwgbm9ybWFsKTtcclxuICAgIHByZXYgPSBpbmRleCA+IDA/IGluZGV4IC0gMTogdmVydGV4TGlzdEEubGVuZ3RoIC0gMTtcclxuICAgIG5leHQgPSBpbmRleCA8IHZlcnRleExpc3RBLmxlbmd0aCAtIDE/IGluZGV4ICsgMTogMDtcclxuXHJcbiAgICB0ZXN0VmVydGljZXMucHVzaCh2ZXJ0ZXhMaXN0QVtwcmV2XSk7XHJcbiAgICB0ZXN0VmVydGljZXMucHVzaCh2ZXJ0ZXhMaXN0QVtpbmRleF0pO1xyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEFbbmV4dF0pO1xyXG5cclxuICAgIGZvcihpID0gMDsgaSA8IHRlc3RWZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vIOafpeeci+i/meS6m+eCueaYr+WQpuWcqOWkmui+ueW9okLlhoXpg6hcclxuICAgICAgICBpZihWZXJ0aWNlcy5pc0NvbnRhaW5zKHZlcnRleExpc3RCLCB0ZXN0VmVydGljZXNbaV0pKSB7XHJcbiAgICAgICAgICAgIC8vIOWmguaenOaYr++8jOWImei/meS4queCueiusOS4uuS4gOS4queisOaSnueCuVxyXG4gICAgICAgICAgICBjb250YWN0cy5wdXNoKG5ldyBDb250YWN0KHRlc3RWZXJ0aWNlc1tpXSwgZGVwdGgpKTtcclxuICAgICAgICB9IFxyXG4gICAgfVxyXG5cclxuICAgIGlmKGNvbnRhY3RzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhY3RzO1xyXG4gICAgfTtcclxuXHJcbiAgICB0ZXN0VmVydGljZXMubGVuZ3RoID0gMDtcclxuXHJcbiAgICAvLyDlkIznkIbkuIrpnaJcclxuICAgIGluZGV4ID0gZmluZENsb3Nlc3RWZXJ0ZXhJbmRleCh2ZXJ0ZXhMaXN0Qiwgbm9ybWFsSW52KTtcclxuICAgIHByZXYgPSBpbmRleCA+IDA/IGluZGV4IC0gMTogdmVydGV4TGlzdEIubGVuZ3RoIC0gMTtcclxuICAgIG5leHQgPSBpbmRleCA8IHZlcnRleExpc3RCLmxlbmd0aCAtIDE/IGluZGV4ICsgMTogMDtcclxuXHJcbiAgICB0ZXN0VmVydGljZXMucHVzaCh2ZXJ0ZXhMaXN0QltwcmV2XSk7XHJcbiAgICB0ZXN0VmVydGljZXMucHVzaCh2ZXJ0ZXhMaXN0QltpbmRleF0pO1xyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEJbbmV4dF0pO1xyXG5cclxuICAgIGZvcihpID0gMDsgaSA8IHRlc3RWZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmKFZlcnRpY2VzLmlzQ29udGFpbnModmVydGV4TGlzdEEsIHRlc3RWZXJ0aWNlc1tpXSkpIHtcclxuICAgICAgICAgICAgY29udGFjdHMucHVzaChuZXcgQ29udGFjdCh0ZXN0VmVydGljZXNbaV0sIGRlcHRoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOi+ueeVjOaDheWGte+8muWNs+ayoeacieeisOaSnueCueeahOaDheWGtVxyXG4gICAgaWYoY29udGFjdHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIGNvbnRhY3RzLnB1c2gobmV3IENvbnRhY3QodmVydGV4TGlzdEJbaW5kZXhdLCBkZXB0aCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb250YWN0cztcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.axesFilter = void 0;\r\nconst vertices_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(1);\r\nfunction axesFilter(geometryA, geometryB) {\r\n    let centroidVector = geometryA.centroid.sub(geometryB.centroid, vector_1._tempVector1), axesA, axesB, supportIndexA, supportIndexB, i, res = [];\r\n    if (geometryA instanceof vertices_1.Poly) {\r\n        axesA = findClosestAxes(geometryA, geometryB, centroidVector, geometryB.centroid);\r\n        supportIndexA = Array.isArray(axesA) ? axesA[0].supportVertexIndex : axesA;\r\n    }\r\n    if (geometryB instanceof vertices_1.Poly) {\r\n        axesB = findClosestAxes(geometryB, geometryA, centroidVector.inv(centroidVector), geometryA.centroid);\r\n        supportIndexB = Array.isArray(axesB) ? axesB[0].supportVertexIndex : axesB;\r\n    }\r\n    if (Array.isArray(axesA)) {\r\n        for (i = 0; i < axesA.length; i++) {\r\n            axesA[i].oppositeVertexIndex = supportIndexB;\r\n            res.push(axesA[i]);\r\n        }\r\n    }\r\n    if (Array.isArray(axesB)) {\r\n        for (i = 0; i < axesB.length; i++) {\r\n            axesB[i].oppositeVertexIndex = supportIndexA;\r\n            res.push(axesB[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexports.axesFilter = axesFilter;\r\n/**\r\n * @param poly\r\n * @param geometry\r\n * @param centroidVector\r\n * @param oppositeCentroid\r\n */\r\nfunction findClosestAxes(poly, geometry, centroidVector, oppositeCentroid) {\r\n    let v = poly.vertexList, axes = poly.axes, centroid = poly.centroid, vertex, projection, minProjection = Infinity, index = -1, opposite = geometry instanceof vertices_1.Poly ? geometry.vertexList : geometry, res = [];\r\n    for (let i = 0; i < v.length; i++) {\r\n        vertex = v[i];\r\n        projection = vertex.dot(centroidVector);\r\n        if (projection < minProjection) {\r\n            if (index > -1) {\r\n                let d1 = (v[i].x - oppositeCentroid.x) ** 2 + (v[i].y - oppositeCentroid.y) ** 2, d2 = (v[index].x - oppositeCentroid.x) ** 2 + (v[index].y - oppositeCentroid.y) ** 2;\r\n                // 投影比完就比距离\r\n                if (d1 < d2) {\r\n                    minProjection = projection;\r\n                    index = i;\r\n                }\r\n            }\r\n            else {\r\n                minProjection = projection;\r\n                index = i;\r\n            }\r\n        }\r\n    }\r\n    let prev = index > 0 ? index - 1 : v.length - 1, next = index < v.length - 1 ? index + 1 : 0, prevAxis = axes[prev], indexAxis = axes[index];\r\n    if (prevAxis && testEdge(centroid, centroidVector, v[index], v[prev])) {\r\n        prevAxis.supportVertexIndex = index;\r\n        prevAxis.opposite = opposite;\r\n        prevAxis.origin = poly.vertexList;\r\n        res.push(prevAxis);\r\n    }\r\n    if (indexAxis && testEdge(centroid, centroidVector, v[index], v[next])) {\r\n        indexAxis.supportVertexIndex = index;\r\n        indexAxis.opposite = opposite;\r\n        indexAxis.origin = poly.vertexList;\r\n        res.push(indexAxis);\r\n    }\r\n    if (res.length) {\r\n        return res;\r\n    }\r\n    return index;\r\n}\r\nfunction testEdge(centroid, centroidVector, support, opposite) {\r\n    let v1 = support.sub(centroid, vector_1._tempVector2), v2 = opposite.sub(centroid, vector_1._tempVector3);\r\n    return v1.cro(centroidVector) * v2.cro(centroidVector) <= 0;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Sleeping = void 0;\r\nconst util_1 = __webpack_require__(0);\r\nconst eventEmitter_1 = __webpack_require__(3);\r\n/**\r\n * 休眠管理器\r\n */\r\nclass Sleeping {\r\n    constructor(opt) {\r\n        this.sleepThreshold = 60;\r\n        this.sleepMotionThreshold = 0.0007;\r\n        this.wakeMotionThreshold = 0.8;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 使刚体睡眠\r\n     * @param body\r\n     */\r\n    sleep(body) {\r\n        body.sleeping = true;\r\n        body.sleepCounter = this.sleepThreshold;\r\n        body.velocity.x = 0;\r\n        body.velocity.y = 0;\r\n        body.angularVelocity = 0;\r\n        body.motion = 0;\r\n        eventEmitter_1.Event.emit(body, 'sleepStart', body);\r\n    }\r\n    /**\r\n     * 唤醒刚体\r\n     * @param body\r\n     */\r\n    wake(body) {\r\n        body.sleeping = false;\r\n        body.sleepCounter = 0;\r\n        eventEmitter_1.Event.emit(body, 'sleepEnd', body);\r\n    }\r\n    /**\r\n     * 改变刚体的状态，使其唤醒或休眠\r\n     * @param bodies\r\n     */\r\n    update(bodies) {\r\n        let body, i;\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            if (body.fixed)\r\n                continue;\r\n            let motion = body.motion;\r\n            // 若刚体合外力不为0，则唤醒\r\n            // if (body.force.x !== 0 || body.force.y !== 0) {\r\n            //     this.wake(body);\r\n            //     continue;\r\n            // }\r\n            // 若刚体已经休眠，则返回\r\n            if (body.sleeping)\r\n                continue;\r\n            // 若刚体动量 < 休眠阈值，则刚体休眠计算 + 1\r\n            if (motion < this.sleepMotionThreshold) {\r\n                body.sleepCounter += 1;\r\n                // 若刚体休眠计数器达到休眠阈值，则进行休眠\r\n                if (body.sleepCounter >= this.sleepThreshold) {\r\n                    this.sleep(body);\r\n                }\r\n            }\r\n            else {\r\n                if (body.sleepCounter > 0) {\r\n                    body.sleepCounter -= 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 刚体碰撞后，判断是否需要唤醒\r\n     * @param manifolds\r\n     */\r\n    afterCollision(manifolds) {\r\n        let manifold, bodyA, bodyB;\r\n        // wake up bodies involved in collisions\r\n        for (var i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            bodyA = manifold.bodyA;\r\n            bodyB = manifold.bodyB;\r\n            // 若A为休眠状态且B的动量大于休眠阈值，唤醒A\r\n            if (!bodyA.fixed && bodyA.sleeping && bodyB.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyA);\r\n                continue;\r\n            }\r\n            // B同理上面\r\n            if (!bodyB.fixed && bodyB.sleeping && bodyA.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyB);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Sleeping = Sleeping;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9zbGVlcGluZy50cz9kNWNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHNDQUFzQztBQUN0Qyw4Q0FBOEM7QUFJOUM7O0dBRUc7QUFFSCxNQUFhLFFBQVE7SUFXakIsWUFBWSxHQUFjO1FBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUM7UUFDbkMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztRQUUvQixXQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLElBQVU7UUFDWixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUVoQixvQkFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLENBQUMsSUFBVTtRQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLG9CQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxNQUFjO1FBQ2pCLElBQUksSUFBVSxFQUNWLENBQUMsQ0FBQztRQUVOLEtBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpCLElBQUcsSUFBSSxDQUFDLEtBQUs7Z0JBQUUsU0FBUztZQUV4QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRXpCLGdCQUFnQjtZQUNoQixrREFBa0Q7WUFDbEQsdUJBQXVCO1lBQ3ZCLGdCQUFnQjtZQUNoQixJQUFJO1lBRUosY0FBYztZQUNkLElBQUcsSUFBSSxDQUFDLFFBQVE7Z0JBQUUsU0FBUztZQUUzQiwyQkFBMkI7WUFDM0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUNwQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQztnQkFFdkIsdUJBQXVCO2dCQUN2QixJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtvQkFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDcEI7YUFDSjtpQkFDSTtnQkFDRCxJQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxFQUFFO29CQUN2QixJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQztpQkFDMUI7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWMsQ0FBQyxTQUFxQjtRQUNoQyxJQUFJLFFBQWtCLEVBQ2xCLEtBQVcsRUFBRSxLQUFXLENBQUM7UUFFN0Isd0NBQXdDO1FBQ3hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDdkIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFFdkIseUJBQXlCO1lBQ3pCLElBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQzFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pCLFNBQVM7YUFDWjtZQUVELFFBQVE7WUFDUixJQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUMxRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqQixTQUFTO2FBQ1o7U0FDSjtJQUNMLENBQUM7Q0FDSjtBQWpIRCw0QkFpSEMiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBFbmdpbmVPcHQgfSBmcm9tIFwiLi9lbmdpbmVcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5pbXBvcnQgeyBFdmVudCB9IGZyb20gXCIuLi9ldmVudC9ldmVudEVtaXR0ZXJcIjtcclxuaW1wb3J0IHsgTWFuaWZvbGQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL21hbmlmb2xkXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIOS8keecoOeuoeeQhuWZqFxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBTbGVlcGluZyB7XHJcblxyXG4gICAgLy8g5Yik5a6a5LyR55yg5bin5qCR6ZiI5YC8XHJcbiAgICBzbGVlcFRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgLy8g5Yik5a6a5LyR55yg5Yqo6YeP6ZiI5YC8XHJcbiAgICBzbGVlcE1vdGlvblRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgLy8g5Yik5a6a5ZSk6YaS5Yqo6YeP6ZiI5YC8XHJcbiAgICB3YWtlTW90aW9uVGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICAvLyDlgY/lt67ns7vmlbBcclxuICAgIG1pbkJpYXM6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuc2xlZXBUaHJlc2hvbGQgPSA2MDtcclxuICAgICAgICB0aGlzLnNsZWVwTW90aW9uVGhyZXNob2xkID0gMC4wMDA3O1xyXG4gICAgICAgIHRoaXMud2FrZU1vdGlvblRocmVzaG9sZCA9IDAuODtcclxuXHJcbiAgICAgICAgVXRpbC5tZXJnZSh0aGlzLCBvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5L2/5Yia5L2T552h55ygXHJcbiAgICAgKiBAcGFyYW0gYm9keSBcclxuICAgICAqL1xyXG4gICAgc2xlZXAoYm9keTogQm9keSkge1xyXG4gICAgICAgIGJvZHkuc2xlZXBpbmcgPSB0cnVlO1xyXG4gICAgICAgIGJvZHkuc2xlZXBDb3VudGVyID0gdGhpcy5zbGVlcFRocmVzaG9sZDtcclxuXHJcbiAgICAgICAgYm9keS52ZWxvY2l0eS54ID0gMDtcclxuICAgICAgICBib2R5LnZlbG9jaXR5LnkgPSAwO1xyXG4gICAgICAgIGJvZHkuYW5ndWxhclZlbG9jaXR5ID0gMDtcclxuICAgICAgICBib2R5Lm1vdGlvbiA9IDA7XHJcblxyXG4gICAgICAgIEV2ZW50LmVtaXQoYm9keSwgJ3NsZWVwU3RhcnQnLCBib2R5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWUpOmGkuWImuS9k1xyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKi9cclxuICAgIHdha2UoYm9keTogQm9keSkge1xyXG4gICAgICAgIGJvZHkuc2xlZXBpbmcgPSBmYWxzZTtcclxuICAgICAgICBib2R5LnNsZWVwQ291bnRlciA9IDA7XHJcbiAgICAgICAgRXZlbnQuZW1pdChib2R5LCAnc2xlZXBFbmQnLCBib2R5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaUueWPmOWImuS9k+eahOeKtuaAge+8jOS9v+WFtuWUpOmGkuaIluS8keecoFxyXG4gICAgICogQHBhcmFtIGJvZGllc1xyXG4gICAgICovXHJcbiAgICB1cGRhdGUoYm9kaWVzOiBCb2R5W10pIHtcclxuICAgICAgICBsZXQgYm9keTogQm9keSxcclxuICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XHJcblxyXG4gICAgICAgICAgICBpZihib2R5LmZpeGVkKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBtb3Rpb24gPSBib2R5Lm1vdGlvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIOiLpeWImuS9k+WQiOWkluWKm+S4jeS4ujDvvIzliJnllKTphpJcclxuICAgICAgICAgICAgLy8gaWYgKGJvZHkuZm9yY2UueCAhPT0gMCB8fCBib2R5LmZvcmNlLnkgIT09IDApIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMud2FrZShib2R5KTtcclxuICAgICAgICAgICAgLy8gICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAvLyDoi6XliJrkvZPlt7Lnu4/kvJHnnKDvvIzliJnov5Tlm55cclxuICAgICAgICAgICAgaWYoYm9keS5zbGVlcGluZykgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAvLyDoi6XliJrkvZPliqjph48gPCDkvJHnnKDpmIjlgLzvvIzliJnliJrkvZPkvJHnnKDorqHnrpcgKyAxXHJcbiAgICAgICAgICAgIGlmIChtb3Rpb24gPCB0aGlzLnNsZWVwTW90aW9uVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciArPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOiLpeWImuS9k+S8keecoOiuoeaVsOWZqOi+vuWIsOS8keecoOmYiOWAvO+8jOWImei/m+ihjOS8keecoFxyXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkuc2xlZXBDb3VudGVyID49IHRoaXMuc2xlZXBUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsZWVwKGJvZHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChib2R5LnNsZWVwQ291bnRlciA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciAtPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yia5L2T56Kw5pKe5ZCO77yM5Yik5pat5piv5ZCm6ZyA6KaB5ZSk6YaSXHJcbiAgICAgKiBAcGFyYW0gbWFuaWZvbGRzXHJcbiAgICAgKi9cclxuICAgIGFmdGVyQ29sbGlzaW9uKG1hbmlmb2xkczogTWFuaWZvbGRbXSkge1xyXG4gICAgICAgIGxldCBtYW5pZm9sZDogTWFuaWZvbGQsXHJcbiAgICAgICAgICAgIGJvZHlBOiBCb2R5LCBib2R5QjogQm9keTtcclxuXHJcbiAgICAgICAgLy8gd2FrZSB1cCBib2RpZXMgaW52b2x2ZWQgaW4gY29sbGlzaW9uc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFuaWZvbGRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1hbmlmb2xkID0gbWFuaWZvbGRzW2ldO1xyXG4gICAgICAgICAgICBib2R5QSA9IG1hbmlmb2xkLmJvZHlBO1xyXG4gICAgICAgICAgICBib2R5QiA9IG1hbmlmb2xkLmJvZHlCO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g6IulQeS4uuS8keecoOeKtuaAgeS4lELnmoTliqjph4/lpKfkuo7kvJHnnKDpmIjlgLzvvIzllKTphpJBXHJcbiAgICAgICAgICAgIGlmKCFib2R5QS5maXhlZCAmJiBib2R5QS5zbGVlcGluZyAmJiBib2R5Qi5tb3Rpb24gPiB0aGlzLndha2VNb3Rpb25UaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2FrZShib2R5QSk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQuWQjOeQhuS4iumdolxyXG4gICAgICAgICAgICBpZighYm9keUIuZml4ZWQgJiYgYm9keUIuc2xlZXBpbmcgJiYgYm9keUEubW90aW9uID4gdGhpcy53YWtlTW90aW9uVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndha2UoYm9keUIpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ManifoldTable = void 0;\r\nconst manifold_1 = __webpack_require__(7);\r\nconst util_1 = __webpack_require__(0);\r\nclass ManifoldTable {\r\n    constructor(opt) {\r\n        this.enableCache = false;\r\n        this.manifoldRemoveThreshold = 1000;\r\n        this.table = {};\r\n        this.list = [];\r\n        this.collisionStart = [];\r\n        this.collisionEnd = [];\r\n        this.collisionActive = [];\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 更新所有流形\r\n     * @param collisions\r\n     * @param timeStamp\r\n     */\r\n    update(collisions, timeStamp) {\r\n        let manifold, id, collision, i;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n        // 清空确认激活状态\r\n        for (i = 0; i < this.list.length; i++) {\r\n            this.list[i].confirmedActive = false;\r\n        }\r\n        for (i = 0; i < collisions.length; i++) {\r\n            collision = collisions[i];\r\n            // 只有真实发生碰撞的碰撞对才会更新对应的流形\r\n            if (collision.collide) {\r\n                id = util_1.Util.compositeId(collision.partA.id, collision.partB.id);\r\n                manifold = this.table[id];\r\n                // 若对应流形存在\r\n                if (manifold) {\r\n                    // 若流形上一刻已经被激活\r\n                    if (manifold.isActive) {\r\n                        this.collisionActive.push(manifold);\r\n                    }\r\n                    // 否则表明该流形第一次发生碰撞\r\n                    else {\r\n                        this.collisionStart.push(manifold);\r\n                    }\r\n                    manifold.update(collision, timeStamp);\r\n                    manifold.confirmedActive = true;\r\n                }\r\n                // 若不存在，则创建对应流形\r\n                else {\r\n                    manifold = new manifold_1.Manifold(collision, timeStamp);\r\n                    this.table[id] = manifold;\r\n                    this.list.push(manifold);\r\n                    this.collisionStart.push(manifold);\r\n                }\r\n            }\r\n        }\r\n        // 遍历查找上一次发生碰撞且当前没有发生碰撞的流形\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            // ，将其激活状态取消\r\n            if (manifold.isActive && !manifold.confirmedActive) {\r\n                manifold.toggleActive(false, timeStamp);\r\n                // 标记为碰撞结束\r\n                this.collisionEnd.push(manifold);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 过滤超时的碰撞流形\r\n     * @param timeStamp\r\n     */\r\n    filter(timeStamp) {\r\n        let manifold, i;\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            // 若流形的两刚体有其一处于休眠状态，更新事件，不清除\r\n            if (manifold.bodyA.sleeping || manifold.bodyB.sleeping) {\r\n                manifold.timeUpdated = timeStamp;\r\n                continue;\r\n            }\r\n            // 若流形上次更新的时间离现在已经大于设定阈值，则需要清除\r\n            if (timeStamp - manifold.timeUpdated > this.manifoldRemoveThreshold) {\r\n                delete this.table[manifold.id];\r\n                this.list.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 清空流形表和队列\r\n     */\r\n    clear() {\r\n        this.table = {};\r\n        this.list.length = 0;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n    }\r\n}\r\nexports.ManifoldTable = ManifoldTable;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BodiesFactory = void 0;\r\nconst circle_1 = __webpack_require__(23);\r\nconst polygon_1 = __webpack_require__(9);\r\nconst rect_1 = __webpack_require__(24);\r\nconst vector_1 = __webpack_require__(1);\r\nconst util_1 = __webpack_require__(0);\r\nclass BodiesFactory {\r\n    /**\r\n     * 创造圆形\r\n     * @param x x\r\n     * @param y y\r\n     * @param radius 半径\r\n     * @param opt 配置项\r\n     */\r\n    Circle(x, y, radius, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            radius: radius\r\n        });\r\n        return new circle_1.Circle(opt);\r\n        ;\r\n    }\r\n    /**\r\n     * 创造多边形\r\n     * @param x x\r\n     * @param y y\r\n     * @param v 顶点集\r\n     * @param opt 配置项\r\n     */\r\n    Polygon(x, y, v, opt) {\r\n        opt = opt || {};\r\n        let vertices = v.map(vertex => new vector_1.Vector(vertex[0], vertex[1]));\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            vertices\r\n        });\r\n        return new polygon_1.Polygon(opt);\r\n    }\r\n    /**\r\n     * 创造矩形\r\n     * @param x x\r\n     * @param y y\r\n     * @param width 宽\r\n     * @param height 高\r\n     * @param opt 配置项\r\n     */\r\n    Rect(x, y, width, height, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            width,\r\n            height\r\n        });\r\n        return new rect_1.Rect(opt);\r\n    }\r\n}\r\nexports.BodiesFactory = BodiesFactory;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9ib2RpZXNGYWN0b3J5LnRzPzE2ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQW1EO0FBQ25ELHlDQUFzRDtBQUN0RCx1Q0FBNkM7QUFDN0Msd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUl0QyxNQUFhLGFBQWE7SUFFdEI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsTUFBYyxFQUFFLEdBQWU7UUFDeEQsR0FBRyxHQUFHLEdBQUcsSUFBZSxFQUFFLENBQUM7UUFFM0IsV0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDYixNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4QixNQUFNLEVBQUUsTUFBTTtTQUNqQixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksZUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUEsQ0FBQztJQUM1QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsT0FBTyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBa0IsRUFBRSxHQUFnQjtRQUM5RCxHQUFHLEdBQUcsR0FBRyxJQUFnQixFQUFFLENBQUM7UUFFNUIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksZUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpFLFdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2IsTUFBTSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsUUFBUTtTQUNYLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBSSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxHQUFhO1FBQ25FLEdBQUcsR0FBRyxHQUFHLElBQWEsRUFBRSxDQUFDO1FBRXpCLFdBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2IsTUFBTSxFQUFFLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDeEIsS0FBSztZQUNMLE1BQU07U0FDVCxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQTNERCxzQ0EyREMiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaXJjbGUsIENpcmNsZU9wdCB9IGZyb20gXCIuLi9ib2R5L2NpcmNsZVwiO1xyXG5pbXBvcnQgeyBQb2x5Z29uLCBQb2x5Z29uT3B0IH0gZnJvbSBcIi4uL2JvZHkvcG9seWdvblwiO1xyXG5pbXBvcnQgeyBSZWN0LCBSZWN0T3B0IH0gZnJvbSBcIi4uL2JvZHkvcmVjdFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQm9kaWVzRmFjdG9yeSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDlnIblvaJcclxuICAgICAqIEBwYXJhbSB4IHhcclxuICAgICAqIEBwYXJhbSB5IHlcclxuICAgICAqIEBwYXJhbSByYWRpdXMg5Y2K5b6EIFxyXG4gICAgICogQHBhcmFtIG9wdCDphY3nva7poblcclxuICAgICAqL1xyXG4gICAgQ2lyY2xlKHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgb3B0PzogQ2lyY2xlT3B0KTogQ2lyY2xlIHtcclxuICAgICAgICBvcHQgPSBvcHQgfHwgPENpcmNsZU9wdD57fTtcclxuXHJcbiAgICAgICAgVXRpbC5leHRlbmQob3B0LCB7XHJcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaXJjbGUob3B0KTs7XHJcbiAgICB9ICAgXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDlpJrovrnlvaJcclxuICAgICAqIEBwYXJhbSB4IHhcclxuICAgICAqIEBwYXJhbSB5IHlcclxuICAgICAqIEBwYXJhbSB2IOmhtueCuembhiBcclxuICAgICAqIEBwYXJhbSBvcHQg6YWN572u6aG5XHJcbiAgICAgKi9cclxuICAgIFBvbHlnb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIHY6IEFycmF5PG51bWJlcltdPiwgb3B0PzogUG9seWdvbk9wdCk6IFBvbHlnb24ge1xyXG4gICAgICAgIG9wdCA9IG9wdCB8fCA8UG9seWdvbk9wdD57fTtcclxuXHJcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gdi5tYXAodmVydGV4ID0+IG5ldyBWZWN0b3IodmVydGV4WzBdLCB2ZXJ0ZXhbMV0pKTtcclxuXHJcbiAgICAgICAgVXRpbC5leHRlbmQob3B0LCB7XHJcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSxcclxuICAgICAgICAgICAgdmVydGljZXNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uKG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDnn6nlvaJcclxuICAgICAqIEBwYXJhbSB4IHggXHJcbiAgICAgKiBAcGFyYW0geSB5XHJcbiAgICAgKiBAcGFyYW0gd2lkdGgg5a69IFxyXG4gICAgICogQHBhcmFtIGhlaWdodCDpq5hcclxuICAgICAqIEBwYXJhbSBvcHQg6YWN572u6aG5XHJcbiAgICAgKi9cclxuICAgIFJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvcHQ/OiBSZWN0T3B0KTogUmVjdCB7XHJcbiAgICAgICAgb3B0ID0gb3B0IHx8IDxSZWN0T3B0Pnt9O1xyXG5cclxuICAgICAgICBVdGlsLmV4dGVuZChvcHQsIHtcclxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yKHgsIHkpLFxyXG4gICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgUmVjdChvcHQpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Circle = void 0;\r\nconst body_1 = __webpack_require__(8);\r\nconst arcs_1 = __webpack_require__(4);\r\nclass Circle extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.circle);\r\n        this.arc = this.getArc();\r\n        this.parts = [this.arc];\r\n        this.bound = this.arc.bound;\r\n    }\r\n    getArea() {\r\n        return Math.PI * this.radius * this.radius;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.col();\r\n    }\r\n    getInertia() {\r\n        return 0.5 * this.mass * Math.pow(this.radius, 2);\r\n    }\r\n    /**\r\n     * 获取圆形信息包\r\n     */\r\n    getArc() {\r\n        return arcs_1.Arcs.create(this);\r\n    }\r\n    translate(distance) {\r\n        // 位移图形原点\r\n        this.origin.x += distance.x;\r\n        this.origin.y += distance.y;\r\n        // 位移圆形\r\n        arcs_1.Arcs.translate(this.arc, distance);\r\n    }\r\n}\r\nexports.Circle = Circle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9jaXJjbGUudHM/NWFiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBaUQ7QUFHakQsc0NBQTJDO0FBWTNDLE1BQWEsTUFBTyxTQUFRLFdBQUk7SUFLNUIsWUFBWSxHQUFjO1FBQ3RCLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0YsT0FBTyxXQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxTQUFTLENBQUMsUUFBZ0I7UUFDdEIsU0FBUztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU1QixPQUFPO1FBQ1AsV0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjtBQXhDRCx3QkF3Q0MiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5LCBCb2R5T3B0LCBib2R5VHlwZSB9IGZyb20gXCIuL2JvZHlcIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IEJvdW5kIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9ib3VuZFwiO1xyXG5pbXBvcnQgeyBBcmMsIEFyY3MgfSBmcm9tIFwiLi4vY29tbW9uL2FyY3NcIjtcclxuXHJcbi8qKlxyXG4gKiDlnIblvaLliJrkvZNcclxuICovXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaXJjbGVPcHQgZXh0ZW5kcyBCb2R5T3B0IHtcclxuICAgIHJhZGl1czogbnVtYmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENpcmNsZSBleHRlbmRzIEJvZHkge1xyXG4gICAgLy8g5Y2K5b6EXHJcbiAgICByYWRpdXM6IG51bWJlcjtcclxuICAgIGFyYzogQXJjO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdDogQ2lyY2xlT3B0KSB7XHJcbiAgICAgICAgc3VwZXIob3B0LCBib2R5VHlwZS5jaXJjbGUpO1xyXG5cclxuICAgICAgICB0aGlzLmFyYyA9IHRoaXMuZ2V0QXJjKCk7XHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFt0aGlzLmFyY107XHJcbiAgICAgICAgdGhpcy5ib3VuZCA9IHRoaXMuYXJjLmJvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFyZWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5QSSp0aGlzLnJhZGl1cyp0aGlzLnJhZGl1cztcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZW50cm9pZCgpOiBWZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jb2woKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJbmVydGlhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDAuNSAqIHRoaXMubWFzcyAqIE1hdGgucG93KHRoaXMucmFkaXVzLCAyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWchuW9ouS/oeaBr+WMhVxyXG4gICAgICovXHJcbiAgICBnZXRBcmMoKTogQXJjIHtcclxuICAgICAgICByZXR1cm4gQXJjcy5jcmVhdGUodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNsYXRlKGRpc3RhbmNlOiBWZWN0b3IpIHtcclxuICAgICAgICAvLyDkvY3np7vlm77lvaLljp/ngrlcclxuICAgICAgICB0aGlzLm9yaWdpbi54ICs9IGRpc3RhbmNlLng7XHJcbiAgICAgICAgdGhpcy5vcmlnaW4ueSArPSBkaXN0YW5jZS55O1xyXG5cclxuICAgICAgICAvLyDkvY3np7vlnIblvaJcclxuICAgICAgICBBcmNzLnRyYW5zbGF0ZSh0aGlzLmFyYywgZGlzdGFuY2UpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 矩形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Rect = void 0;\r\nconst polygon_1 = __webpack_require__(9);\r\nconst vector_1 = __webpack_require__(1);\r\nconst vertices_1 = __webpack_require__(2);\r\nclass Rect extends polygon_1.Polygon {\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n    getPoly() {\r\n        let leftTop = this.origin.col(), rightTop = leftTop.add(new vector_1.Vector(this.width, 0)), rightBottom = leftTop.add(new vector_1.Vector(this.width, this.height)), leftBottom = leftTop.add(new vector_1.Vector(0, this.height)), poly = vertices_1.Vertices.create(this, [leftTop, rightTop, rightBottom, leftBottom]);\r\n        return poly;\r\n    }\r\n    getArea() {\r\n        return this.width * this.height;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.add(new vector_1.Vector(this.width / 2, this.height / 2));\r\n    }\r\n    getInertia() {\r\n        return this.mass * (this.width * this.width + this.height * this.height) / 12;\r\n    }\r\n}\r\nexports.Rect = Rect;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9yZWN0LnRzPzJkYWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCx5Q0FBZ0Q7QUFDaEQsd0NBQXdDO0FBQ3hDLDBDQUFvRDtBQVVwRCxNQUFhLElBQUssU0FBUSxpQkFBTztJQU03QixZQUFZLEdBQVk7UUFDcEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUMzQixRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2pELFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQzlELFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDcEQsSUFBSSxHQUFHLG1CQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFL0UsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNwQyxDQUFDO0lBRUQsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNsRixDQUFDO0NBQ0o7QUEvQkQsb0JBK0JDIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOefqeW9ouWImuS9k1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFBvbHlnb24sIFBvbHlnb25PcHQgfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5pbXBvcnQgeyBQb2x5LCBWZXJ0aWNlcyB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZWN0T3B0IGV4dGVuZHMgUG9seWdvbk9wdCB7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmVjdCBleHRlbmRzIFBvbHlnb24ge1xyXG4gICAgLy8g5a69XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgLy8g6auYXHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IFJlY3RPcHQpIHtcclxuICAgICAgICBzdXBlcihvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvbHkoKTogUG9seSB7XHJcbiAgICAgICAgbGV0IGxlZnRUb3AgPSB0aGlzLm9yaWdpbi5jb2woKSxcclxuICAgICAgICAgICAgcmlnaHRUb3AgPSBsZWZ0VG9wLmFkZChuZXcgVmVjdG9yKHRoaXMud2lkdGgsIDApKSxcclxuICAgICAgICAgICAgcmlnaHRCb3R0b20gPSBsZWZ0VG9wLmFkZChuZXcgVmVjdG9yKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KSksXHJcbiAgICAgICAgICAgIGxlZnRCb3R0b20gPSBsZWZ0VG9wLmFkZChuZXcgVmVjdG9yKDAsIHRoaXMuaGVpZ2h0KSksXHJcbiAgICAgICAgICAgIHBvbHkgPSBWZXJ0aWNlcy5jcmVhdGUodGhpcywgW2xlZnRUb3AsIHJpZ2h0VG9wLCByaWdodEJvdHRvbSwgbGVmdEJvdHRvbV0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9seTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcmVhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZW50cm9pZCgpOiBWZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5hZGQobmV3IFZlY3Rvcih0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5lcnRpYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hc3MgKiAodGhpcy53aWR0aCAqIHRoaXMud2lkdGggKyB0aGlzLmhlaWdodCAqIHRoaXMuaGVpZ2h0KSAvIDEyO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n')}])}));