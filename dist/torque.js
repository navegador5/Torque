!function(Q,U){if("object"==typeof exports&&"object"==typeof module)module.exports=U();else if("function"==typeof define&&define.amd)define([],U);else{var F=U();for(var B in F)("object"==typeof exports?exports:Q)[B]=F[B]}}(window,(function(){return function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}return F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)F.d(B,I,function(U){return Q[U]}.bind(null,I));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=10)}([function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports._tempVector4 = exports._tempVector3 = exports._tempVector2 = exports._tempVector1 = exports.Vector = void 0;\r\n// 二维向量 {x, y}\r\nclass Vector {\r\n    constructor(x, y) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        if (x !== undefined && y !== undefined) {\r\n            this.set(x, y);\r\n        }\r\n    }\r\n    //-------------操作----------------\r\n    /**\r\n     * 设置值\r\n     * @param x\r\n     * @param y\r\n     */\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * 相加\r\n     * @param v\r\n     */\r\n    add(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x + v.x;\r\n        out.y = this.y + v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 相减\r\n     * @param v\r\n     */\r\n    sub(v, out) {\r\n        out = out || new Vector();\r\n        out.x = this.x - v.x;\r\n        out.y = this.y - v.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 点积\r\n     * @param v\r\n     */\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    /**\r\n     * 叉积\r\n     * @param v\r\n     */\r\n    cro(v) {\r\n        return this.x * v.y - v.x * this.y;\r\n    }\r\n    /**\r\n     * 与标量进行叉积\r\n     * @param n\r\n     */\r\n    croNum(n, out) {\r\n        out = out || new Vector();\r\n        out.x = -n * this.y;\r\n        out.y = n * this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 投影\r\n     * @param v\r\n     */\r\n    pro(v) {\r\n        return this.dot(v) / v.len();\r\n    }\r\n    /**\r\n     * 法向\r\n     */\r\n    nor(out) {\r\n        out = out || new Vector();\r\n        out.x = this.y;\r\n        out.y = -this.x;\r\n        return out;\r\n    }\r\n    /**\r\n     * 求模\r\n     */\r\n    len() {\r\n        return Math.hypot(this.x, this.y);\r\n    }\r\n    /**\r\n     * 平方模（节省求平方根操作）\r\n     */\r\n    len_s() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    /**\r\n     * 单位化\r\n     */\r\n    nol() {\r\n        let len = this.len();\r\n        if (len === 0) {\r\n            return new Vector();\r\n        }\r\n        this.x = this.x / len;\r\n        this.y = this.y / len;\r\n        return this;\r\n    }\r\n    /**\r\n     * 缩放\r\n     * @param n\r\n     */\r\n    scl(n, out) {\r\n        out = out || new Vector();\r\n        out.x = n * this.x;\r\n        out.y = n * this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 反向\r\n     */\r\n    inv(out) {\r\n        out = out || new Vector();\r\n        out.x = -this.x;\r\n        out.y = -this.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * 判断两向量是否相等\r\n     * @param v\r\n     */\r\n    eql(v) {\r\n        return this.x === v.x && this.y === v.y;\r\n    }\r\n    /**\r\n     * 求两向量夹角(弧度制)\r\n     * @param v\r\n     */\r\n    ang(v) {\r\n        return Math.acos(this.dot(v) / (this.len() * v.len()));\r\n    }\r\n    /**\r\n     * 克隆向量\r\n     */\r\n    col() {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n    /**\r\n     * 绕某点旋转向量\r\n     * @param radian 角度（弧度制）\r\n     * @param point 绕的点\r\n     */\r\n    rot(radian, point, out) {\r\n        out = out || new Vector();\r\n        let cos = Math.cos(radian), sin = Math.sin(radian), dx = this.x - point.x, dy = this.y - point.y;\r\n        out.x = point.x + (dx * cos - dy * sin);\r\n        out.y = point.y + (dx * sin + dy * cos);\r\n        return out;\r\n    }\r\n    /**\r\n     * 求一个向量（点）按照direction方向，延长len长度后的坐标\r\n     * @param direction\r\n     * @param len\r\n     */\r\n    loc(direction, len, out) {\r\n        out = out || new Vector();\r\n        direction = direction.nol();\r\n        out.x = this.x + direction.x * len;\r\n        out.y = this.y + direction.y * len;\r\n        return out;\r\n    }\r\n}\r\nexports.Vector = Vector;\r\n;\r\nexports._tempVector1 = new Vector();\r\nexports._tempVector2 = new Vector();\r\nexports._tempVector3 = new Vector();\r\nexports._tempVector4 = new Vector();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Util = void 0;\r\n// 常用工具函数\r\nexports.Util = {\r\n    _id: 0,\r\n    /**\r\n     * 生成一个id（整数类型）\r\n     */\r\n    id() {\r\n        return this._id++;\r\n    },\r\n    /**\r\n     * 根据两个id生成一个复合id（字符串类型）: 'id1.id2'\r\n     * @param id1\r\n     * @param id2\r\n     */\r\n    compositeId(id1, id2) {\r\n        if (id1 < id2) {\r\n            return id1 + '.' + id2;\r\n        }\r\n        else {\r\n            return id2 + '.' + id1;\r\n        }\r\n    },\r\n    /**\r\n     * 对象合并\r\n     * @param originOpt 源对象\r\n     * @param destOpt 目标对象\r\n     */\r\n    merge(originOpt, destOpt) {\r\n        if (!originOpt || !destOpt)\r\n            return;\r\n        for (let key in destOpt) {\r\n            if (typeof destOpt[key] === 'object' &&\r\n                !Array.isArray(destOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.merge(originOpt[key], destOpt[key]);\r\n            }\r\n            else {\r\n                if ((destOpt[key] !== null || destOpt[key] !== undefined) && originOpt[key] !== undefined) {\r\n                    originOpt[key] = destOpt[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 对象扩展\r\n     * @param originOpt 源对象\r\n     * @param extendOpt 扩展对象\r\n     */\r\n    extend(originOpt, extendOpt) {\r\n        if (!originOpt || !extendOpt)\r\n            return;\r\n        for (let key in extendOpt) {\r\n            if (typeof extendOpt[key] === 'object' &&\r\n                !Array.isArray(extendOpt[key]) &&\r\n                originOpt[key] !== null &&\r\n                originOpt[key] !== undefined) {\r\n                this.extend(originOpt[key], extendOpt[key]);\r\n            }\r\n            else {\r\n                if (extendOpt[key] !== null || extendOpt[key] !== undefined)\r\n                    originOpt[key] = extendOpt[key];\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * 从列表移除某个元素\r\n     * @param list 列表\r\n     * @param item 要移除的元素\r\n     */\r\n    remove(list, item) {\r\n        list.splice(list.findIndex(i => i['id'] === item['id']), 1);\r\n    },\r\n    /**\r\n     * 角度转弧度\r\n     * @param angle 角度\r\n     */\r\n    angle2Radian(angle) {\r\n        return (angle / 180) * Math.PI;\r\n    },\r\n    /**\r\n     * 弧度转角度\r\n     * @param radian 弧度\r\n     */\r\n    radian2Angle(radian) {\r\n        return radian / Math.PI * 180;\r\n    },\r\n    /**\r\n     * 返回页面加载完毕开始到当前的时间（微秒级，performance api）\r\n     */\r\n    now() {\r\n        return window.performance.now();\r\n    },\r\n    /**\r\n     * 直接插入排序\r\n     * @param list 要排序的列表\r\n     * @param fn 比较函数\r\n     */\r\n    insertSort(list, fn) {\r\n        let len = list.length, i, j, temp;\r\n        for (i = 1; i < len; i++) {\r\n            temp = list[i];\r\n            for (j = i - 1; j >= 0 && fn(list[j], temp) > 0; j--) {\r\n                list[j + 1] = list[j];\r\n            }\r\n            list[j + 1] = temp;\r\n        }\r\n    },\r\n    /**\r\n     * 对给定的value，收窄在min和max范围内\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     */\r\n    clamp(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    },\r\n    /**\r\n     * 返回一个数的正负号\r\n     * @param value\r\n     */\r\n    sign(value) {\r\n        return value < 0 ? -1 : 1;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 刚体基类：所有刚体继承自Body\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Body = exports.bodyType = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 刚体类型\r\n * 圆形：0\r\n * 多边形：1\r\n * 复合体：4\r\n */\r\nvar bodyType;\r\n(function (bodyType) {\r\n    bodyType[bodyType["circle"] = 0] = "circle";\r\n    bodyType[bodyType["polygon"] = 1] = "polygon";\r\n    bodyType[bodyType["composite"] = 2] = "composite";\r\n})(bodyType = exports.bodyType || (exports.bodyType = {}));\r\n;\r\nclass Body {\r\n    constructor(opt, type) {\r\n        this.id = util_1.Util.id();\r\n        this.stringId = this.id.toString();\r\n        this.type = type;\r\n        this.engine = null;\r\n        this.data = null;\r\n        this.origin = new vector_1.Vector(0, 0);\r\n        this.position = new vector_1.Vector(0, 0);\r\n        this.rotation = 0;\r\n        this.velocity = new vector_1.Vector(0, 0);\r\n        this.angularVelocity = 0;\r\n        this.motion = 0;\r\n        this.mass = 10;\r\n        this.area = 0;\r\n        this.density = 1;\r\n        this.inertia = 0;\r\n        this.invInertia = 0;\r\n        this.force = new vector_1.Vector(0, 0);\r\n        this.torque = 0;\r\n        this.friction = 0.4;\r\n        this.restitution = 0.9;\r\n        this.constraint = null;\r\n        this.static = false;\r\n        this.kinetic = false;\r\n        this.sleeping = false;\r\n        this.sleepCounter = 0;\r\n        this.mask = 1;\r\n        this.bound = null;\r\n        this.contactBodies = {};\r\n        this.parent = null;\r\n        this.parts = [this];\r\n        this.methods = {\r\n            filter: (maskA, maskB) => { return true; },\r\n            beforeAppend: (body) => { },\r\n            afterAppend: (body) => { },\r\n            beforeRemove: (body) => { },\r\n            afterRemove: (body) => { },\r\n            sleepStart: (body) => { },\r\n            sleepEnd: (body) => { },\r\n            onCollide: (body) => { }\r\n        };\r\n        util_1.Util.extend(this, opt);\r\n        this.beforeInitializeProperties(opt);\r\n        this.area = this.getArea();\r\n        this.density = this.getDensity();\r\n        this.invMass = this.getInvMass();\r\n        this.position = this.getCentroid();\r\n        this.inertia = this.getInertia();\r\n        this.invInertia = this.getInvInertia();\r\n        this.axes = this.getAxes();\r\n        this.bound = this.getBound();\r\n        this.motion = this.velocity.len() ** 2 + this.angularVelocity ** 2;\r\n        this.afterInitializeProperties(opt);\r\n        // 用户一开始便设置了旋转的情况\r\n        if (this.rotation) {\r\n            this.rotate(this.rotation, this.position);\r\n        }\r\n        // 设置渲染函数\r\n        this.setRender(() => { });\r\n    }\r\n    /**\r\n     * 初始化属性前\r\n     */\r\n    beforeInitializeProperties(opt) { }\r\n    /**\r\n     * 初始化属性后\r\n     * @param opt\r\n     */\r\n    afterInitializeProperties(opt) { }\r\n    // ------------------------------------------- getter---------------------------------------\r\n    /**\r\n     * 计算质量倒数\r\n     */\r\n    getInvMass() {\r\n        return (this.mass === 0 || this.static || this.kinetic) ? 0 : 1 / this.mass;\r\n    }\r\n    /**\r\n     * 计算转动惯量倒数\r\n     */\r\n    getInvInertia() {\r\n        return (this.inertia === 0 || this.static || this.kinetic) ? 0 : 1 / this.inertia;\r\n    }\r\n    /**\r\n     * 计算密度\r\n     */\r\n    getDensity() {\r\n        return this.mass / this.area;\r\n    }\r\n    /**\r\n     * 计算面积\r\n     * @override\r\n     */\r\n    getArea() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 计算质心\r\n     * @override\r\n     */\r\n    getCentroid() {\r\n        return null;\r\n    }\r\n    /**\r\n     * 计算转动惯量\r\n     * @override\r\n     * @param position 转动中心\r\n     */\r\n    getInertia(position) {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 获取轴\r\n     */\r\n    getAxes() {\r\n        return [];\r\n    }\r\n    /**\r\n     * 获取包围盒\r\n     */\r\n    getBound() {\r\n        return null;\r\n    }\r\n    // ------------------------------------------- setter ---------------------------------------\r\n    /**\r\n     * 设置线速度\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setVelocity(x, y) {\r\n        this.velocity.x = x;\r\n        this.velocity.y = y;\r\n    }\r\n    /**\r\n     * 设置角速度\r\n     * @param angularVelocity\r\n     */\r\n    setAngularVelocity(angularVelocity) {\r\n        this.angularVelocity = angularVelocity;\r\n    }\r\n    /**\r\n     * 设置位置\r\n     * @param x\r\n     * @param y\r\n     */\r\n    setPosition(x, y) {\r\n        let dx = x - this.position.x, dy = y - this.position.y;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.translate(dx, dy);\r\n    }\r\n    /**\r\n     * 设置旋转角度\r\n     * @param rotation\r\n     */\r\n    setRotation(rotation) {\r\n        this.rotation = rotation;\r\n        this.rotate(rotation, this.position);\r\n    }\r\n    /**\r\n     * 设置是否静态\r\n     * @param static\r\n     */\r\n    setStatic(sta) {\r\n        this.static = sta;\r\n    }\r\n    /**\r\n     * 设置是否运动\r\n     * @param kin\r\n     */\r\n    setKinetic(kin) {\r\n        this.kinetic = kin;\r\n    }\r\n    /**\r\n     * 设置用户想要携带的信息数据\r\n     * @param data 数据\r\n     */\r\n    setData(data) {\r\n        if (data !== null && data !== undefined) {\r\n            this.data = data;\r\n        }\r\n    }\r\n    /**\r\n     * 设置渲染函数\r\n     * @param fn\r\n     */\r\n    setRender(fn) {\r\n        if (fn && typeof fn === \'function\')\r\n            this.render = fn;\r\n    }\r\n    // ------------------------------------------- 内部方法 ----------------------------------------\r\n    /**\r\n     * 位移刚体\r\n     * @override\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(dx, dy) { }\r\n    /**\r\n     * 旋转刚体\r\n     * @override\r\n     * @param angle 角度\r\n     * @param point 绕点\r\n     */\r\n    rotate(angle, point) { }\r\n    /**\r\n     * 应用冲量\r\n     * @param impulse 冲量\r\n     * @param offset 作用点（本地坐标系）\r\n     * @param dt 步长\r\n     */\r\n    applyImpulse(impulse, offset) {\r\n        if (this.static || this.kinetic || this.sleeping)\r\n            return;\r\n        this.velocity.x += impulse.x * this.invMass;\r\n        this.velocity.y += impulse.y * this.invMass;\r\n        this.angularVelocity += this.invInertia * offset.cro(impulse);\r\n    }\r\n    /**\r\n     * 应用力\r\n     * @param force 力\r\n     * @param offset 作用点（本地坐标系）\r\n     */\r\n    applyForce(force, offset) {\r\n        if (this.static || this.kinetic)\r\n            return;\r\n        this.force.x += force.x;\r\n        this.force.y += force.y;\r\n        if (offset !== undefined) {\r\n            this.torque += offset.cro(this.force);\r\n        }\r\n    }\r\n    /**\r\n     * 积分受力\r\n     * @param dt\r\n     */\r\n    integrateForces(dt) {\r\n        if (this.static || this.kinetic || this.sleeping) {\r\n            return;\r\n        }\r\n        this.velocity.x += dt * this.force.x * this.invMass;\r\n        this.velocity.y += dt * this.force.y * this.invMass;\r\n        this.angularVelocity += dt * this.torque * this.invInertia;\r\n    }\r\n    /**\r\n     * 积分速度\r\n     * - 使用隐式欧拉积分\r\n     * @param dt\r\n     */\r\n    integrateVelocities(dt) {\r\n        if (this.static || this.sleeping) {\r\n            return;\r\n        }\r\n        let dx = dt * this.velocity.x, dy = dt * this.velocity.y, dr = dt * this.angularVelocity;\r\n        this.position.x += dx;\r\n        this.position.y += dy;\r\n        this.rotation += dr;\r\n        //位移刚体\r\n        this.translate(dx, dy);\r\n        // 旋转刚体\r\n        if (dr !== 0) {\r\n            this.rotate(dr, this.position);\r\n        }\r\n        // 更新标量速度\r\n        let speed = Math.hypot(dx, dy), angularSpeed = Math.abs(dr);\r\n        //更新动量\r\n        this.motion = speed * speed + angularSpeed * angularSpeed;\r\n        this.force.x = 0;\r\n        this.force.y = 0;\r\n        this.torque = 0;\r\n    }\r\n    // ------------------------------------------------ hook ------------------------------\r\n    /**\r\n     * 绑定沟子事件\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    on(eventName, fn) {\r\n        this.methods[eventName] = fn;\r\n    }\r\n    beforeAppend(engine) {\r\n        this.engine = engine;\r\n        if (this.static) {\r\n            this.sleeping = true;\r\n            this.engine.sleeping.sleep(this);\r\n        }\r\n        this.methods.beforeAppend(this);\r\n    }\r\n    afterAppend() { this.methods.afterAppend(this); }\r\n    beforeRemove() {\r\n        let sleeping = this.engine.sleeping, keys = Object.keys(this.contactBodies);\r\n        // 在删除一个刚体前，唤醒与之有碰撞的刚体\r\n        for (let i = 0; i < keys.length; i++) {\r\n            sleeping.wake(this.contactBodies[keys[i]]);\r\n        }\r\n        this.methods.beforeRemove(this);\r\n    }\r\n    afterRemove() { this.methods.afterRemove(this); }\r\n    sleepStart() { this.methods.sleepStart(this); }\r\n    sleepEnd() { this.methods.sleepEnd(this); }\r\n    onCollide(target) {\r\n        this.contactBodies[target.stringId] = target;\r\n        // 触发碰撞钩子\r\n        this.methods.onCollide(this);\r\n    }\r\n}\r\nexports.Body = Body;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Vertices = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst bound_1 = __webpack_require__(5);\r\n// 顶点操作工具\r\nexports.Vertices = {\r\n    /**\r\n     * 获取多边形中心点\r\n     * @param vertexList\r\n     */\r\n    getCenter(vertexList) {\r\n        let range = exports.Vertices.getRange(vertexList), centerX = (range.max.x + range.min.x) / 2, centerY = (range.max.y + range.min.y) / 2;\r\n        return new vector_1.Vector(centerX, centerY);\r\n    },\r\n    /**\r\n     * 获取多边形质心\r\n     * @param vertexList\r\n     */\r\n    getCentroid(vertexList) {\r\n        let area = exports.Vertices.getArea(vertexList), centroid = new vector_1.Vector(0, 0), cross = 0, temp, j;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            j = (i + 1) % vertexList.length;\r\n            cross = vertexList[i].cro(vertexList[j]);\r\n            temp = vertexList[i].add(vertexList[j]).scl(cross);\r\n            centroid.add(temp, centroid);\r\n        }\r\n        return centroid.scl(1 / (6 * area), centroid);\r\n    },\r\n    /**\r\n     * 获取多边形面积\r\n     * @param vertexList\r\n     */\r\n    getArea(vertexList) {\r\n        let area = 0, j = vertexList.length - 1;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            area += (vertexList[j].x - vertexList[i].x) * (vertexList[j].y + vertexList[i].y);\r\n            j = i;\r\n        }\r\n        return area / 2;\r\n    },\r\n    /**\r\n     * 获取多边形的转动惯量\r\n     * 公式来自：https://blog.csdn.net/weixin_34194702/article/details/93587529\r\n     * @param vertexList\r\n     * @param mass 质量\r\n     * @param position\r\n     */\r\n    getInertia(vertexList, mass, position) {\r\n        let numerator = 0, denominator = 0, v = vertexList, cur, next, cross;\r\n        for (let n = 0; n < v.length; n++) {\r\n            cur = v[n].sub(position, cur);\r\n            next = v[(n + 1) % v.length].sub(position, next);\r\n            cross = Math.abs(cur.cro(next));\r\n            numerator += cross * (cur.dot(cur) + cur.dot(next) + next.dot(next));\r\n            denominator += cross;\r\n        }\r\n        return (mass / 6) * (numerator / denominator);\r\n    },\r\n    /**\r\n     * 求三角形的转动惯量\r\n     * @param vertexList\r\n     * @param mass\r\n     * 参考：http://www.doc88.com/p-5456260484135.html\r\n     */\r\n    getTriInertia(vertexList, mass) {\r\n        let l1 = vertexList[0].sub(vertexList[1]).len_s(), l2 = vertexList[1].sub(vertexList[2]).len_s(), l3 = vertexList[2].sub(vertexList[0]).len_s();\r\n        return (l1 + l2 + l3) * (mass / 36);\r\n    },\r\n    /**\r\n     * 求顶点围成的所有面的轴\r\n     * @param vertexList\r\n     */\r\n    getAxes(vertexList) {\r\n        let v = vertexList, axis, axes = [], i, j;\r\n        for (i = 0; i < v.length; i++) {\r\n            j = (i + 1) % v.length;\r\n            axis = v[j].sub(v[i]).nor().nol();\r\n            axes.push({\r\n                value: axis,\r\n                opposite: null,\r\n                origin: vertexList,\r\n                supportVertexIndex: null,\r\n                oppositeVertexIndex: null,\r\n                edge: {\r\n                    start: v[i],\r\n                    end: v[j]\r\n                }\r\n            });\r\n        }\r\n        return axes;\r\n    },\r\n    /**\r\n     * 获取顶点集的范围\r\n     * @param vertexList\r\n     */\r\n    getRange(vertexList) {\r\n        let xList = vertexList.map(v => v.x), yList = vertexList.map(v => v.y);\r\n        return {\r\n            min: new vector_1.Vector(Math.min.apply(Math, xList), Math.min.apply(Math, yList)),\r\n            max: new vector_1.Vector(Math.max.apply(Math, xList), Math.max.apply(Math, yList))\r\n        };\r\n    },\r\n    /**\r\n     * 获取顶点集形成的包围盒\r\n     * @param vertexList\r\n     */\r\n    getBound(vertexList) {\r\n        let range = exports.Vertices.getRange(vertexList);\r\n        return new bound_1.Bound(range.min, range.max);\r\n    },\r\n    /**\r\n     * 使用斜率筛去共线的轴\r\n     * @param axes 要筛选的轴\r\n     */\r\n    uniqueAxes(axes) {\r\n        let axisVector, tmpAxes = [], axesTable = {}, i, gradient;\r\n        for (i = 0; i < axes.length; i++) {\r\n            axisVector = axes[i].value;\r\n            gradient = (axisVector.y === 0) ? Infinity : (axisVector.x / axisVector.y);\r\n            // 限制精度\r\n            gradient = gradient.toFixed(3).toString();\r\n            axesTable[gradient] = axes[i];\r\n        }\r\n        Object.keys(axesTable).map(item => {\r\n            tmpAxes.push(axesTable[item]);\r\n        });\r\n        return tmpAxes;\r\n    },\r\n    /**\r\n     * 旋转顶点\r\n     * @param vertexList 多边形顶点\r\n     * @param radian 弧度\r\n     * @param point 绕点\r\n     */\r\n    rotate(vertexList, radian, point) {\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            vertexList[i].rot(radian, point, vertexList[i]);\r\n        }\r\n    },\r\n    /**\r\n     * 位移顶点\r\n     * @param vertexList 多边形顶点\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(vertexList, dx, dy) {\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            vertexList[i].x += dx;\r\n            vertexList[i].y += dy;\r\n        }\r\n    },\r\n    /**\r\n     * 将凹多边形分解为多个子凸多边形\r\n     * @param vertexList\r\n     */\r\n    split(vertexList) {\r\n        // 将拆分出来的多边形保存到这个数组\r\n        let parts = [], vertexListA, vertexListB, xAxis, vTest, vDiv, dividePointA, dividePointB, len = vertexList.length, i, j, cur, next, next2, flag = false;\r\n        for (i = 0; i < len; i++) {\r\n            cur = i;\r\n            next = (i + 1) % len;\r\n            next2 = (i + 2) % len;\r\n            xAxis = vertexList[next].sub(vertexList[cur]);\r\n            vTest = vertexList[next2].sub(vertexList[cur]);\r\n            if (xAxis.cro(vTest) < 0) {\r\n                for (j = i + 3; j < len; j++) {\r\n                    vDiv = vertexList[j].sub(vertexList[cur]);\r\n                    if (xAxis.cro(vDiv) > 0) {\r\n                        flag = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (flag)\r\n                    break;\r\n            }\r\n        }\r\n        // 获取两个分割点\r\n        dividePointA = vertexList[next],\r\n            dividePointB = vertexList[j];\r\n        // 拆分为两个多边形vertexListA和vertexListB\r\n        vertexListB = vertexList.splice(next2, j - next2);\r\n        vertexListA = vertexList;\r\n        vertexListB.unshift(dividePointA);\r\n        vertexListB.push(dividePointB);\r\n        // 检测拆分出来的两个多边形是否是凹多边形，若果是，继续递归拆分\r\n        if (exports.Vertices.isConcave(vertexListA)) {\r\n            parts.push(...exports.Vertices.split(vertexListA));\r\n        }\r\n        else {\r\n            parts.push(vertexListA);\r\n        }\r\n        if (exports.Vertices.isConcave(vertexListB)) {\r\n            parts.push(...exports.Vertices.split(vertexListB));\r\n        }\r\n        else {\r\n            parts.push(vertexListB);\r\n        }\r\n        return parts;\r\n    },\r\n    /**\r\n     * 判断是否包含顶点（射线法）\r\n     * 参考：https://www.cnblogs.com/anningwang/p/7581545.html\r\n     * @param vertexList\r\n     * @param point 检测的顶点\r\n     */\r\n    isContains(vertexList, point) {\r\n        let v = vertexList, cur, next, len = vertexList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            cur = v[i], next = v[(i + 1) % len];\r\n            if ((point.x - cur.x) * (next.y - cur.y) + (point.y - cur.y) * (cur.x - next.x) > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    /**\r\n     * 判断是否为凹多边形\r\n     * @param vertexList\r\n     */\r\n    isConcave(vertexList) {\r\n        let v = vertexList, \r\n        // 上两向量间的叉积\r\n        prevCor, \r\n        // 当前两向量的叉积\r\n        curCor, \r\n        // 上一顶点到当前顶点的向量\r\n        prev2Cur, \r\n        // 当前顶点到下一顶点的向量\r\n        cur2Next, len = v.length, i, j, k;\r\n        for (i = 1; i < len; i++) {\r\n            j = i - 1;\r\n            k = (i + 1) % len;\r\n            prev2Cur = v[i].sub(v[j]);\r\n            cur2Next = v[k].sub(v[i]);\r\n            // 计算向量叉积\r\n            curCor = prev2Cur.cro(cur2Next) >= 0 ? 1 : -1;\r\n            if (prevCor !== undefined && prevCor !== curCor) {\r\n                return true;\r\n            }\r\n            prevCor = curCor;\r\n        }\r\n        return false;\r\n    },\r\n    /**\r\n     * 转换到世界坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2World(point, vertexList) {\r\n        return vertexList.map(v => v.add(point));\r\n    },\r\n    /**\r\n     * 转换到本地坐标\r\n     * @param point 参考点\r\n     * @param vertexList\r\n     */\r\n    transform2Local(point, vertexList) {\r\n        return vertexList.map(v => v.sub(point));\r\n    },\r\n    /**\r\n     * 求多边形在某个轴的投影\r\n     * @param vertexList\r\n     * @param axis 投影轴\r\n     */\r\n    projection(vertexList, axis) {\r\n        let projection, minProjection = Infinity, maxProjection = -Infinity;\r\n        for (let i = 0; i < vertexList.length; i++) {\r\n            projection = vertexList[i].dot(axis);\r\n            if (projection < minProjection) {\r\n                minProjection = projection;\r\n            }\r\n            if (projection > maxProjection) {\r\n                maxProjection = projection;\r\n            }\r\n        }\r\n        return {\r\n            min: minProjection,\r\n            max: maxProjection\r\n        };\r\n    },\r\n    /**\r\n     * 计算顶点集中离给定点最近的顶点\r\n     * @param point 给定点\r\n     * @param vertexList 顶点集\r\n     */\r\n    getClosestVertex(point, vertexList) {\r\n        let v = vertexList, i, min = Infinity, length, index, len = v.length;\r\n        for (i = 0; i < len; i++) {\r\n            length = v[i].sub(point).len();\r\n            if (length < min) {\r\n                min = length;\r\n                index = i;\r\n            }\r\n        }\r\n        return vertexList[index];\r\n    },\r\n    /**\r\n     * 寻找顶点集中所有凹点\r\n     * @param vertexList\r\n     */\r\n    findCaves(vertexList) {\r\n        let caves = [], v = vertexList, prevVertex, curVertex, nextVertex, len = v.length, i;\r\n        for (i = 1; i < len; i++) {\r\n            prevVertex = v[i - 1];\r\n            curVertex = v[i];\r\n            nextVertex = v[(i + 1) % len];\r\n            // 利用叉乘判断\r\n            if (curVertex.sub(prevVertex).cro(nextVertex.sub(curVertex)) < 0) {\r\n                caves.push(curVertex);\r\n            }\r\n        }\r\n        return caves;\r\n    },\r\n    /**\r\n     * 过滤共线的顶点\r\n     * @param vertexList\r\n     */\r\n    filterCollinearVertex(vertexList) {\r\n        let vertex, next, next2, len = vertexList.length, vNext, vNext2, removeIndex = [], i;\r\n        for (i = 0; i < len; i++) {\r\n            vertex = vertexList[i];\r\n            next = vertexList[(i + 1) % len];\r\n            next2 = vertexList[(i + 2) % len];\r\n            vNext = next.sub(vertex, vector_1._tempVector1);\r\n            vNext2 = next2.sub(vertex, vector_1._tempVector2);\r\n            if (vNext.cro(vNext2) === 0) {\r\n                removeIndex.push((i + 1) % len);\r\n            }\r\n        }\r\n        for (i = 0; i < removeIndex.length; i++) {\r\n            vertexList.splice(removeIndex[i], 1);\r\n        }\r\n        return vertexList;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ContactConstraint = exports.Contact = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\n// 接触约束\r\nclass Contact {\r\n    constructor(vertex, depth) {\r\n        this.position = vertex;\r\n        this.shareNormal = 0;\r\n        this.shareTangent = 0;\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.depth = depth;\r\n        this.bias = 0;\r\n    }\r\n}\r\nexports.Contact = Contact;\r\n/**\r\n * 碰撞求解器\r\n */\r\nclass ContactConstraint {\r\n    constructor() {\r\n        this.iterations = 20;\r\n        this.slop = 0.02;\r\n        this.biasFactor = 0.2;\r\n    }\r\n    /**\r\n     * 创建一个接触约束\r\n     * @param vertex\r\n     * @param depth\r\n     */\r\n    create(vertex, depth) {\r\n        return new Contact(vertex, depth);\r\n    }\r\n    /**\r\n     * 求解接触约束\r\n     * @param manifolds\r\n     * @param dt\r\n     */\r\n    solve(manifolds, dt) {\r\n        this.preSolveVelocity(manifolds, dt);\r\n        for (let i = 0; i < this.iterations; i++) {\r\n            this.solveVelocity(manifolds, dt);\r\n        }\r\n    }\r\n    /**\r\n     * 预处理\r\n     * @param manifolds 碰撞流形\r\n     * @param dt 步长\r\n     */\r\n    preSolveVelocity(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, i, j;\r\n        for (i = 0; i < manifolds.length; ++i) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                // 接触点到刚体A质心的距离\r\n                contact.offsetA = contact.position.sub(bodyA.position),\r\n                    // 接触点到刚体B质心的距离\r\n                    contact.offsetB = contact.position.sub(bodyB.position);\r\n                let invMassNormal = manifold.inverseMass, invMassTangent = manifold.inverseMass, r1 = contact.offsetA, r2 = contact.offsetB, rn1 = contact.offsetA.dot(normal), rn2 = contact.offsetB.dot(normal), rt1 = contact.offsetA.dot(tangent), rt2 = contact.offsetB.dot(tangent);\r\n                // 计算 J(M^-1)(J^T).\r\n                invMassNormal += bodyA.invInertia * (r1.dot(r1) - rn1 * rn1);\r\n                invMassNormal += bodyB.invInertia * (r2.dot(r2) - rn2 * rn2);\r\n                invMassTangent += bodyA.invInertia * (r1.dot(r1) - rt1 * rt1);\r\n                invMassTangent += bodyB.invInertia * (r2.dot(r2) - rt2 * rt2);\r\n                // 保存 J(M^-1)(J^T)得倒数\r\n                contact.shareNormal = 1 / invMassNormal;\r\n                contact.shareTangent = 1 / invMassTangent;\r\n                contact.bias = this.biasFactor * (1 / dt) * Math.max(0, contact.depth - this.slop);\r\n                // warm start\r\n                if (contact.normalImpulse !== 0 || contact.tangentImpulse !== 0) {\r\n                    let p = vector_1._tempVector3;\r\n                    p.x = normal.x * contact.normalImpulse + tangent.x * contact.tangentImpulse;\r\n                    p.y = normal.y * contact.normalImpulse + tangent.y * contact.tangentImpulse;\r\n                    bodyA.applyImpulse(p, contact.offsetA);\r\n                    bodyB.applyImpulse(p.inv(p), contact.offsetB);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 正式处理\r\n     * 使用sequential impulse进行快速收敛\r\n     * 参考：https://kevinyu.net/2018/01/17/understanding-constraint-solver-in-physics-engine/\r\n     * @param manifolds\r\n     * @private dt\r\n     */\r\n    solveVelocity(manifolds, dt) {\r\n        let manifold, collision, contact, bodyA, bodyB, normal, tangent, normalImpulse, tangentImpulse, maxFriction, velocityPointA, // 刚体A质心相对碰撞点的速度\r\n        velocityPointB, // 刚体B质心相对碰撞点的速度\r\n        relativeVelocity, // 相对速度\r\n        relativeNormalVelocity, relativeTangentVelocity, impulse = vector_1._tempVector3, i, j;\r\n        for (i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            if (!manifold.isActive)\r\n                continue;\r\n            collision = manifold.collision;\r\n            normal = collision.normal;\r\n            tangent = collision.tangent;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            for (j = 0; j < collision.contacts.length; j++) {\r\n                contact = collision.contacts[j];\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算法向相对速度\r\n                relativeNormalVelocity = normal.dot(relativeVelocity);\r\n                // 计算法向冲量\r\n                normalImpulse = manifold.restitution * (relativeNormalVelocity + contact.bias) * contact.shareNormal;\r\n                // sequential impulse方法，收敛法向冲量\r\n                let oldNormalImpulse = contact.normalImpulse;\r\n                contact.normalImpulse = Math.max(contact.normalImpulse + normalImpulse, 0);\r\n                normalImpulse = contact.normalImpulse - oldNormalImpulse;\r\n                // 应用冲量\r\n                impulse.x = normal.x * normalImpulse;\r\n                impulse.y = normal.y * normalImpulse;\r\n                bodyA.applyImpulse(impulse, contact.offsetA);\r\n                bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB);\r\n                // --------------------------------------------------------------------------------------------\r\n                contact.offsetA.croNum(bodyA.angularVelocity, vector_1._tempVector1);\r\n                contact.offsetB.croNum(bodyB.angularVelocity, vector_1._tempVector2);\r\n                velocityPointA = bodyA.velocity.add(vector_1._tempVector1, vector_1._tempVector1);\r\n                velocityPointB = bodyB.velocity.add(vector_1._tempVector2, vector_1._tempVector2);\r\n                relativeVelocity = velocityPointB.sub(velocityPointA, vector_1._tempVector1);\r\n                // 计算切向相对速度\r\n                relativeTangentVelocity = tangent.dot(relativeVelocity);\r\n                // 计算切向冲量\r\n                tangentImpulse = relativeTangentVelocity * contact.shareTangent;\r\n                // 计算最大摩擦力\r\n                maxFriction = manifold.friction * contact.normalImpulse;\r\n                // sequential impulse方法，收敛切向冲量\r\n                let oldTangentImpulse = contact.tangentImpulse;\r\n                contact.tangentImpulse = util_1.Util.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\r\n                tangentImpulse = contact.tangentImpulse - oldTangentImpulse;\r\n                // 应用冲量\r\n                impulse.x = tangent.x * tangentImpulse;\r\n                impulse.y = tangent.y * tangentImpulse;\r\n                bodyA.applyImpulse(impulse, contact.offsetA);\r\n                bodyB.applyImpulse(impulse.inv(impulse), contact.offsetB);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ContactConstraint = ContactConstraint;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Bound = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst vertices_1 = __webpack_require__(3);\r\n// AABB包围盒（速度扩展的）\r\nclass Bound {\r\n    constructor(min, max) {\r\n        this.min = new vector_1.Vector(0, 0);\r\n        this.max = new vector_1.Vector(0, 0);\r\n        this.set(min, max);\r\n    }\r\n    /**\r\n     * 设置包围盒范围\r\n     *\r\n     *  min ----------|\r\n     *   |            |\r\n     *   |            |\r\n     *   | --------- max\r\n     *\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    set(min, max) {\r\n        this.min.x = min.x;\r\n        this.min.y = min.y;\r\n        this.max.x = max.x;\r\n        this.max.y = max.y;\r\n    }\r\n    /**\r\n     * 位移包围盒\r\n     * @param dx\r\n     * @param dy\r\n     */\r\n    translate(dx, dy) {\r\n        this.min.x += dx;\r\n        this.min.y += dy;\r\n        this.max.x += dx;\r\n        this.max.y += dy;\r\n    }\r\n    /**\r\n     * 更新包围盒（通常发生在刚体发生旋转，min和max都要重新计算）\r\n     * @param vertexList\r\n     */\r\n    update(vertexList) {\r\n        let range = vertices_1.Vertices.getRange(vertexList);\r\n        this.min.x = range.min.x;\r\n        this.min.y = range.min.y;\r\n        this.max.x = range.max.x;\r\n        this.max.y = range.max.y;\r\n    }\r\n    /**\r\n     * 根据子包围盒更新包围盒\r\n     * @param bodies\r\n     */\r\n    updateByBounds(bodies) {\r\n        let bound, maxX = -Infinity, maxY = -Infinity, minX = Infinity, minY = Infinity;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            bound = bodies[i].bound;\r\n            if (bound.min.x < minX) {\r\n                minX = bound.min.x;\r\n            }\r\n            if (bound.min.y < minY) {\r\n                minY = bound.min.y;\r\n            }\r\n            if (bound.max.x > maxX) {\r\n                maxX = bound.max.x;\r\n            }\r\n            if (bound.max.y > maxY) {\r\n                maxY = bound.max.y;\r\n            }\r\n        }\r\n        this.min.x = minX;\r\n        this.min.y = minY;\r\n        this.max.x = maxX;\r\n        this.max.y = maxY;\r\n    }\r\n    /**\r\n     * 两包围盒求交集\r\n     * @param b\r\n     */\r\n    intersect(b) {\r\n        let x, y, maxX, maxY, overlapsX, overlapsY;\r\n        x = Math.max(this.min.x, b.min.x);\r\n        maxX = Math.min(this.max.x, b.max.x);\r\n        y = Math.max(this.min.y, b.min.y);\r\n        maxY = Math.min(this.max.y, b.max.y);\r\n        overlapsX = maxX - x;\r\n        overlapsY = maxY - y;\r\n        if (overlapsX < 0 || overlapsY < 0)\r\n            return null;\r\n        vector_1._tempVector1.x = x;\r\n        vector_1._tempVector1.y = y;\r\n        vector_1._tempVector2.x = x + overlapsX;\r\n        vector_1._tempVector2.y = y + overlapsY;\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 求多个包围盒的并集\r\n     * @param arg\r\n     */\r\n    union(bound) {\r\n        let min = vector_1._tempVector1, max = vector_1._tempVector2;\r\n        min.x = Math.min(this.min.x, bound.min.x);\r\n        min.y = Math.min(this.min.y, bound.min.y);\r\n        max.x = Math.max(this.max.x, bound.max.x);\r\n        max.y = Math.max(this.max.y, bound.max.y);\r\n        return new Bound(vector_1._tempVector1, vector_1._tempVector2);\r\n    }\r\n    /**\r\n     * 判断与另一个包围盒是否相交\r\n     * @param bound\r\n     */\r\n    isIntersect(bound) {\r\n        return (this.min.x < bound.max.x && this.max.x > bound.min.x) && (this.min.y < bound.max.y && bound.min.y < this.max.y);\r\n    }\r\n    /**\r\n     * 求一个包围盒是否包含另一个包围盒\r\n     * @param bound\r\n     */\r\n    isContains(bound) {\r\n        return this.min.x <= bound.min.x &&\r\n            this.min.y <= bound.min.y &&\r\n            this.max.x >= bound.max.x &&\r\n            this.max.y >= bound.max.y;\r\n    }\r\n    /**\r\n     * 查看点是否在包围盒中\r\n     * @param point\r\n     */\r\n    contains(point) {\r\n        return point.x >= this.min.x &&\r\n            point.x <= this.max.x &&\r\n            point.y >= this.min.y &&\r\n            point.y <= this.max.y;\r\n    }\r\n}\r\nexports.Bound = Bound;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Arcs = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst vertices_1 = __webpack_require__(3);\r\nconst bound_1 = __webpack_require__(5);\r\nconst _tempDynamicAxis = {\r\n    value: null,\r\n    opposite: null,\r\n    origin: null,\r\n    supportVertexIndex: null,\r\n    oppositeVertexIndex: null,\r\n    edge: null\r\n};\r\nexports.Arcs = {\r\n    /**\r\n     * 获取两个圆的圆心间的距离\r\n     * @param circleA\r\n     * @param circleB\r\n     */\r\n    distance(circleA, circleB) {\r\n        return circleA.position.sub(circleB.position).len();\r\n    },\r\n    /**\r\n     * 获取圆形和顶点集间的轴\r\n     * @param vertices 顶点信息\r\n     */\r\n    getAxes(circle, poly) {\r\n        let closestVertex = vertices_1.Vertices.getClosestVertex(circle.position, poly.vertexList);\r\n        _tempDynamicAxis.value = closestVertex.sub(circle.position).nol();\r\n        return _tempDynamicAxis;\r\n    },\r\n    getBound(centroid, radius) {\r\n        let min = new vector_1.Vector(centroid.x - radius, centroid.y - radius), max = new vector_1.Vector(centroid.x + radius, centroid.y + radius);\r\n        return new bound_1.Bound(min, max);\r\n    },\r\n    /**\r\n     * 获取圆形在给定轴上的投影\r\n     * @param axis\r\n     */\r\n    projection(circle, axis) {\r\n        let len = circle.position.pro(axis);\r\n        return {\r\n            min: len - circle.radius,\r\n            max: len + circle.radius\r\n        };\r\n    },\r\n    /**\r\n     * 查看圆形是否包含某个点\r\n     * @param circle\r\n     * @param point\r\n     */\r\n    isContains(circle, point) {\r\n        return circle.radius - (point.x - circle.position.x) ** 2 + (point.y - circle.position.y) > 0;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FyY3MudHM/MjcyZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBd0M7QUFFeEMsMENBQTRDO0FBQzVDLHVDQUFnQztBQUloQyxNQUFNLGdCQUFnQixHQUFTO0lBQzNCLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsSUFBSTtJQUNaLGtCQUFrQixFQUFFLElBQUk7SUFDeEIsbUJBQW1CLEVBQUUsSUFBSTtJQUN6QixJQUFJLEVBQUUsSUFBSTtDQUNiLENBQUM7QUFLVyxZQUFJLEdBQUc7SUFFaEI7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxPQUFlLEVBQUUsT0FBZTtRQUNyQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsT0FBTyxDQUFDLE1BQWMsRUFBRSxJQUFhO1FBQ2pDLElBQUksYUFBYSxHQUFHLG1CQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEYsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxFLE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFnQixFQUFFLE1BQWM7UUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxlQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsRUFDMUQsR0FBRyxHQUFHLElBQUksZUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFL0QsT0FBTyxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxNQUFjLEVBQUUsSUFBWTtRQUNuQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQyxPQUFPO1lBQ0gsR0FBRyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTTtZQUN4QixHQUFHLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNO1NBQzNCLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFVBQVUsQ0FBQyxNQUFjLEVBQUUsS0FBYTtRQUNwQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRyxDQUFDO0NBQ0osQ0FBQyIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IENpcmNsZSB9IGZyb20gXCIuLi9ib2R5L2NpcmNsZVwiO1xyXG5pbXBvcnQgeyBBeGlzLCBWZXJ0aWNlcyB9IGZyb20gXCIuL3ZlcnRpY2VzXCI7XHJcbmltcG9ydCB7IEJvdW5kIH0gZnJvbSBcIi4vYm91bmRcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuLi9ib2R5L3BvbHlnb25cIjtcclxuXHJcblxyXG5jb25zdCBfdGVtcER5bmFtaWNBeGlzOiBBeGlzID0ge1xyXG4gICAgdmFsdWU6IG51bGwsXHJcbiAgICBvcHBvc2l0ZTogbnVsbCxcclxuICAgIG9yaWdpbjogbnVsbCxcclxuICAgIHN1cHBvcnRWZXJ0ZXhJbmRleDogbnVsbCxcclxuICAgIG9wcG9zaXRlVmVydGV4SW5kZXg6IG51bGwsXHJcbiAgICBlZGdlOiBudWxsXHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgQXJjcyA9IHtcclxuIFxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuKTkuKrlnIbnmoTlnIblv4Ppl7TnmoTot53nprtcclxuICAgICAqIEBwYXJhbSBjaXJjbGVBIFxyXG4gICAgICogQHBhcmFtIGNpcmNsZUIgXHJcbiAgICAgKi9cclxuICAgIGRpc3RhbmNlKGNpcmNsZUE6IENpcmNsZSwgY2lyY2xlQjogQ2lyY2xlKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gY2lyY2xlQS5wb3NpdGlvbi5zdWIoY2lyY2xlQi5wb3NpdGlvbikubGVuKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5ZyG5b2i5ZKM6aG254K56ZuG6Ze055qE6L20XHJcbiAgICAgKiBAcGFyYW0gdmVydGljZXMg6aG254K55L+h5oGvXHJcbiAgICAgKi9cclxuICAgIGdldEF4ZXMoY2lyY2xlOiBDaXJjbGUsIHBvbHk6IFBvbHlnb24pOiBBeGlzIHtcclxuICAgICAgICBsZXQgY2xvc2VzdFZlcnRleCA9IFZlcnRpY2VzLmdldENsb3Nlc3RWZXJ0ZXgoY2lyY2xlLnBvc2l0aW9uLCBwb2x5LnZlcnRleExpc3QpO1xyXG5cclxuICAgICAgICBfdGVtcER5bmFtaWNBeGlzLnZhbHVlID0gY2xvc2VzdFZlcnRleC5zdWIoY2lyY2xlLnBvc2l0aW9uKS5ub2woKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIF90ZW1wRHluYW1pY0F4aXM7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldEJvdW5kKGNlbnRyb2lkOiBWZWN0b3IsIHJhZGl1czogbnVtYmVyKTogQm91bmQge1xyXG4gICAgICAgIGxldCBtaW4gPSBuZXcgVmVjdG9yKGNlbnRyb2lkLnggLSByYWRpdXMsIGNlbnRyb2lkLnkgLSByYWRpdXMpLFxyXG4gICAgICAgICAgICBtYXggPSBuZXcgVmVjdG9yKGNlbnRyb2lkLnggKyByYWRpdXMsIGNlbnRyb2lkLnkgKyByYWRpdXMpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEJvdW5kKG1pbiwgbWF4KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blnIblvaLlnKjnu5nlrprovbTkuIrnmoTmipXlvbFcclxuICAgICAqIEBwYXJhbSBheGlzIFxyXG4gICAgICovXHJcbiAgICBwcm9qZWN0aW9uKGNpcmNsZTogQ2lyY2xlLCBheGlzOiBWZWN0b3IpOiB7bWluOiBudW1iZXIsIG1heDogbnVtYmVyfSB7XHJcbiAgICAgICAgbGV0IGxlbiA9IGNpcmNsZS5wb3NpdGlvbi5wcm8oYXhpcyk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1pbjogbGVuIC0gY2lyY2xlLnJhZGl1cyxcclxuICAgICAgICAgICAgbWF4OiBsZW4gKyBjaXJjbGUucmFkaXVzXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvlnIblvaLmmK/lkKbljIXlkKvmn5DkuKrngrlcclxuICAgICAqIEBwYXJhbSBjaXJjbGUgXHJcbiAgICAgKiBAcGFyYW0gcG9pbnQgXHJcbiAgICAgKi9cclxuICAgIGlzQ29udGFpbnMoY2lyY2xlOiBDaXJjbGUsIHBvaW50OiBWZWN0b3IpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gY2lyY2xlLnJhZGl1cyAtIChwb2ludC54IC0gY2lyY2xlLnBvc2l0aW9uLngpICoqIDIgKyAocG9pbnQueSAtIGNpcmNsZS5wb3NpdGlvbi55KSA+IDA7IFxyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Manifold = exports.Collision = void 0;\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 碰撞信息，碰撞流形，接触点\r\n */\r\n// export type Geometry = Polygon | Circle;\r\n/**\r\n * 一个碰撞结构，包含了碰撞的所有信息\r\n */\r\nclass Collision {\r\n    constructor() {\r\n        // 分离轴\r\n        this.axis = {\r\n            value: null,\r\n            oppositeVertexIndex: null,\r\n            supportVertexIndex: null,\r\n            opposite: null,\r\n            origin: null,\r\n            edge: null\r\n        };\r\n    }\r\n}\r\nexports.Collision = Collision;\r\n;\r\n/**\r\n * 碰撞流形\r\n * 主要用于记录相互碰撞的刚体和进行碰撞缓存\r\n */\r\nclass Manifold {\r\n    constructor(collision, timeStamp) {\r\n        this.bodyA = collision.bodyA;\r\n        this.bodyB = collision.bodyB;\r\n        this.partA = collision.partA;\r\n        this.partB = collision.partB;\r\n        this.id = util_1.Util.compositeId(this.partA.id, this.partB.id);\r\n        this.collision = collision;\r\n        this.isActive = true;\r\n        this.confirmedActive = true;\r\n        this.timeCreated = timeStamp;\r\n        this.timeUpdated = timeStamp;\r\n        this.friction = 0;\r\n        this.restitution = 0;\r\n        this.inverseMass = 0;\r\n        this.update(collision, timeStamp);\r\n    }\r\n    /**\r\n     * 更新流形\r\n     * @param collision 碰撞信息\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(collision, timeStamp) {\r\n        this.collision = collision;\r\n        // 如果该碰撞对真的发生了碰撞\r\n        if (collision.collide) {\r\n            let bodyA, bodyB;\r\n            bodyA = collision.bodyA;\r\n            bodyB = collision.bodyB;\r\n            this.friction = Math.sqrt(bodyA.friction * bodyB.friction);\r\n            this.restitution = (bodyA.restitution + bodyB.restitution) / 2;\r\n            this.inverseMass = bodyA.invMass + bodyB.invMass;\r\n            this.toggleActive(true, timeStamp);\r\n        }\r\n        // 否则\r\n        else {\r\n            this.isActive && this.toggleActive(false, timeStamp);\r\n        }\r\n    }\r\n    /**\r\n     * 更改流形激活状态\r\n     * @param active 激活状态\r\n     * @param timeStamp 时间戳\r\n     */\r\n    toggleActive(active, timeStamp) {\r\n        this.isActive = active;\r\n        if (active) {\r\n            this.timeUpdated = timeStamp;\r\n        }\r\n    }\r\n}\r\nexports.Manifold = Manifold;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL21hbmlmb2xkLnRzP2JiZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsc0NBQXNDO0FBT3RDOztHQUVHO0FBRUgsMkNBQTJDO0FBRzNDOztHQUVHO0FBRUgsTUFBYSxTQUFTO0lBQXRCO1FBU0ksTUFBTTtRQUNOLFNBQUksR0FBUztZQUNULEtBQUssRUFBRSxJQUFJO1lBQ1gsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUM7SUFXTixDQUFDO0NBQUE7QUE1QkQsOEJBNEJDO0FBQUEsQ0FBQztBQUdGOzs7R0FHRztBQUNILE1BQWEsUUFBUTtJQTJCakIsWUFBWSxTQUFvQixFQUFFLFNBQWlCO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsRUFBRSxHQUFHLFdBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFvQixFQUFFLFNBQWlCO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBRTNCLGdCQUFnQjtRQUNoQixJQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxLQUFXLEVBQUUsS0FBVyxDQUFDO1lBRTdCLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3hCLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBRXhCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1lBRWpELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsS0FBSzthQUNBO1lBQ0QsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsWUFBWSxDQUFDLE1BQWUsRUFBRSxTQUFpQjtRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUV2QixJQUFHLE1BQU0sRUFBRTtZQUNQLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztDQUNKO0FBcEZELDRCQW9GQyIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQXhpcyB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuaW1wb3J0IHsgQ29udGFjdCB9IGZyb20gXCIuLi9jb25zdHJhaW50L2NvbnRhY3RcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuLi9ib2R5L3BvbHlnb25cIjtcclxuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSBcIi4uL2JvZHkvY2lyY2xlXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIOeisOaSnuS/oeaBr++8jOeisOaSnua1geW9ou+8jOaOpeinpueCuVxyXG4gKi9cclxuXHJcbi8vIGV4cG9ydCB0eXBlIEdlb21ldHJ5ID0gUG9seWdvbiB8IENpcmNsZTtcclxuXHJcblxyXG4vKipcclxuICog5LiA5Liq56Kw5pKe57uT5p6E77yM5YyF5ZCr5LqG56Kw5pKe55qE5omA5pyJ5L+h5oGvXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxpc2lvbiB7XHJcbiAgICAvLyDnorDmkp7liJrkvZNBXHJcbiAgICBib2R5QTogQm9keTtcclxuICAgIC8vIOeisOaSnuWImuS9k0JcclxuICAgIGJvZHlCOiBCb2R5O1xyXG4gICAgLy8g56Kw5pKe5a2Q5Zu+5b2iQVxyXG4gICAgcGFydEE6IEJvZHk7XHJcbiAgICAvLyDnorDmkp7lrZDlm77lvaJCXHJcbiAgICBwYXJ0QjogQm9keTtcclxuICAgIC8vIOWIhuemu+i9tFxyXG4gICAgYXhpczogQXhpcyA9IHtcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICBvcHBvc2l0ZVZlcnRleEluZGV4OiBudWxsLFxyXG4gICAgICAgIHN1cHBvcnRWZXJ0ZXhJbmRleDogbnVsbCxcclxuICAgICAgICBvcHBvc2l0ZTogbnVsbCxcclxuICAgICAgICBvcmlnaW46IG51bGwsXHJcbiAgICAgICAgZWRnZTogbnVsbFxyXG4gICAgfTtcclxuICAgIC8vIOeisOaSnuazlee6v1xyXG4gICAgbm9ybWFsOiBWZWN0b3I7XHJcbiAgICAvLyDnorDmkp7liIfnur9cclxuICAgIHRhbmdlbnQ6IFZlY3RvcjtcclxuICAgIC8vIOaOpeinpueCuVxyXG4gICAgY29udGFjdHM6IENvbnRhY3RbXTtcclxuICAgIC8vIOWvueS9jeWkmui+ueW9ouWcqOazlee6v+aWueWQkeS4iuacgOaOpei/keacrOWkmui+ueW9oueahOmhtueCueeahOS4i+agh1xyXG4gICAgb3Bwb3NpdGVDbG9zZXN0SW5kZXg6IG51bWJlcjtcclxuICAgIC8vIOaYr+WQpuWPkeeUn+S6hueisOaSnlxyXG4gICAgY29sbGlkZTogYm9vbGVhbjtcclxufTtcclxuXHJcblxyXG4vKipcclxuICog56Kw5pKe5rWB5b2iXHJcbiAqIOS4u+imgeeUqOS6juiusOW9leebuOS6kueisOaSnueahOWImuS9k+WSjOi/m+ihjOeisOaSnue8k+WtmFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1hbmlmb2xkIHtcclxuICAgIC8vIGlkXHJcbiAgICBpZDogc3RyaW5nO1xyXG5cclxuICAgIGJvZHlBOiBCb2R5O1xyXG4gICAgYm9keUI6IEJvZHk7XHJcbiAgICBwYXJ0QTogQm9keTtcclxuICAgIHBhcnRCOiBCb2R5O1xyXG4gICAgLy8g56Kw5pKe5L+h5oGvXHJcbiAgICBjb2xsaXNpb246IENvbGxpc2lvbjtcclxuICAgIC8vIOa/gOa0u+eKtuaAgVxyXG4gICAgLy8g5r+A5rS754q25oCB55qE5oSP5oCd5Y2z5LiK5LiA5qyh5pu05paw5pe25rWB5b2i5piv5ZCm5Y+R55Sf56Kw5pKe77yM6Iul5piv77yM5YiZ6KGo56S66K+l5rWB5b2i5Zyo5r+A5rS754q25oCBXHJcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICAgIC8vIOehruiupOa/gOa0u+eKtuaAgVxyXG4gICAgLy8g56Gu6K6k5r+A5rS754q25oCB5oSP5oCd5Y2z5piv5b2T5YmN5pu05paw5pe25rWB5b2i5piv5ZCm5r+A5rS7XHJcbiAgICBjb25maXJtZWRBY3RpdmU6IGJvb2xlYW47XHJcbiAgICAvLyDmtYHlvaLliJvlu7rml7bpl7RcclxuICAgIHRpbWVDcmVhdGVkOiBudW1iZXI7XHJcbiAgICAvLyDmtYHlvaLmm7TmlrDml7bpl7RcclxuICAgIHRpbWVVcGRhdGVkOiBudW1iZXI7XHJcbiAgICAvLyDmkanmk6bliptcclxuICAgIGZyaWN0aW9uOiBudW1iZXI7XHJcbiAgICAvLyDmgaLlpI3ns7vmlbBcclxuICAgIHJlc3RpdHV0aW9uOiBudW1iZXI7XHJcbiAgICAvLyDotKjph4/lkozlgJLmlbBcclxuICAgIGludmVyc2VNYXNzOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sbGlzaW9uOiBDb2xsaXNpb24sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5ib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcclxuICAgICAgICB0aGlzLmJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xyXG4gICAgICAgIHRoaXMucGFydEEgPSBjb2xsaXNpb24ucGFydEE7XHJcbiAgICAgICAgdGhpcy5wYXJ0QiA9IGNvbGxpc2lvbi5wYXJ0QjtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbC5jb21wb3NpdGVJZCh0aGlzLnBhcnRBLmlkLCB0aGlzLnBhcnRCLmlkKTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbiA9IGNvbGxpc2lvbjtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNvbmZpcm1lZEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50aW1lQ3JlYXRlZCA9IHRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLnRpbWVVcGRhdGVkID0gdGltZVN0YW1wO1xyXG4gICAgICAgIHRoaXMuZnJpY3Rpb24gPSAwO1xyXG4gICAgICAgIHRoaXMucmVzdGl0dXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuaW52ZXJzZU1hc3MgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZShjb2xsaXNpb24sIHRpbWVTdGFtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDmtYHlvaJcclxuICAgICAqIEBwYXJhbSBjb2xsaXNpb24g56Kw5pKe5L+h5oGvXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIOaXtumXtOaIs1xyXG4gICAgICovXHJcbiAgICB1cGRhdGUoY29sbGlzaW9uOiBDb2xsaXNpb24sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb24gPSBjb2xsaXNpb247XHJcblxyXG4gICAgICAgIC8vIOWmguaenOivpeeisOaSnuWvueecn+eahOWPkeeUn+S6hueisOaSnlxyXG4gICAgICAgIGlmKGNvbGxpc2lvbi5jb2xsaWRlKSB7XHJcbiAgICAgICAgICAgIGxldCBib2R5QTogQm9keSwgYm9keUI6IEJvZHk7XHJcblxyXG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcclxuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZyaWN0aW9uID0gTWF0aC5zcXJ0KGJvZHlBLmZyaWN0aW9uICogYm9keUIuZnJpY3Rpb24pO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3RpdHV0aW9uID0gKGJvZHlBLnJlc3RpdHV0aW9uICsgYm9keUIucmVzdGl0dXRpb24pIC8gMjtcclxuICAgICAgICAgICAgdGhpcy5pbnZlcnNlTWFzcyA9IGJvZHlBLmludk1hc3MgKyBib2R5Qi5pbnZNYXNzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50b2dnbGVBY3RpdmUodHJ1ZSwgdGltZVN0YW1wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5ZCm5YiZXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgJiYgdGhpcy50b2dnbGVBY3RpdmUoZmFsc2UsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05pS55rWB5b2i5r+A5rS754q25oCBXHJcbiAgICAgKiBAcGFyYW0gYWN0aXZlIOa/gOa0u+eKtuaAgVxyXG4gICAgICogQHBhcmFtIHRpbWVTdGFtcCDml7bpl7TmiLNcclxuICAgICAqL1xyXG4gICAgdG9nZ2xlQWN0aXZlKGFjdGl2ZTogYm9vbGVhbiwgdGltZVN0YW1wOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmlzQWN0aXZlID0gYWN0aXZlO1xyXG5cclxuICAgICAgICBpZihhY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lVXBkYXRlZCA9IHRpbWVTdGFtcDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Circle = void 0;\r\nconst body_1 = __webpack_require__(2);\r\nconst arcs_1 = __webpack_require__(6);\r\nclass Circle extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.circle);\r\n    }\r\n    getArea() {\r\n        return Math.PI * this.radius * this.radius;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.col();\r\n    }\r\n    getInertia(position) {\r\n        return 0.5 * this.mass * Math.pow(this.radius, 2);\r\n    }\r\n    getBound() {\r\n        return arcs_1.Arcs.getBound(this.position, this.radius);\r\n    }\r\n    translate(dx, dy) {\r\n        // 位移图形原点\r\n        this.origin.x += dx;\r\n        this.origin.y += dy;\r\n        // 位移包围盒\r\n        this.bound.translate(dx, dy);\r\n    }\r\n    rotate(radian, point) {\r\n        if (point === this.position)\r\n            return;\r\n        let ox = this.origin.x, oy = this.origin.y;\r\n        this.origin = this.origin.rot(radian, point, this.origin);\r\n        this.bound.translate(this.origin.x - ox, this.origin.y - oy);\r\n    }\r\n}\r\nexports.Circle = Circle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9jaXJjbGUudHM/NWFiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBaUQ7QUFFakQsc0NBQXNDO0FBYXRDLE1BQWEsTUFBTyxTQUFRLFdBQUk7SUFJNUIsWUFBWSxHQUFjO1FBQ3RCLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMzQyxDQUFDO0lBRUQsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQWlCO1FBQ3hCLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxXQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxTQUFTLENBQUMsRUFBVSxFQUFFLEVBQVU7UUFDNUIsU0FBUztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFcEIsUUFBUTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWMsRUFBRSxLQUFhO1FBQ2hDLElBQUcsS0FBSyxLQUFLLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUVuQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDbEIsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDSjtBQTFDRCx3QkEwQ0MiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHksIEJvZHlPcHQsIGJvZHlUeXBlIH0gZnJvbSBcIi4vYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgQXJjcyB9IGZyb20gXCIuLi9jb21tb24vYXJjc1wiO1xyXG5pbXBvcnQgeyBCb3VuZCB9IGZyb20gXCIuLi9jb21tb24vYm91bmRcIjtcclxuXHJcbi8qKlxyXG4gKiDlnIblvaLliJrkvZNcclxuICovXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaXJjbGVPcHQgZXh0ZW5kcyBCb2R5T3B0IHtcclxuICAgIHJhZGl1czogbnVtYmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENpcmNsZSBleHRlbmRzIEJvZHkge1xyXG4gICAgLy8g5Y2K5b6EXHJcbiAgICByYWRpdXM6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IENpcmNsZU9wdCkge1xyXG4gICAgICAgIHN1cGVyKG9wdCwgYm9keVR5cGUuY2lyY2xlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcmVhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguUEkqdGhpcy5yYWRpdXMqdGhpcy5yYWRpdXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2VudHJvaWQoKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY29sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5lcnRpYShwb3NpdGlvbj86IFZlY3Rvcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDAuNSAqIHRoaXMubWFzcyAqIE1hdGgucG93KHRoaXMucmFkaXVzLCAyKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCb3VuZCgpOiBCb3VuZCB7XHJcbiAgICAgICAgcmV0dXJuIEFyY3MuZ2V0Qm91bmQodGhpcy5wb3NpdGlvbiwgdGhpcy5yYWRpdXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zbGF0ZShkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8g5L2N56e75Zu+5b2i5Y6f54K5XHJcbiAgICAgICAgdGhpcy5vcmlnaW4ueCArPSBkeDtcclxuICAgICAgICB0aGlzLm9yaWdpbi55ICs9IGR5O1xyXG5cclxuICAgICAgICAvLyDkvY3np7vljIXlm7Tnm5JcclxuICAgICAgICB0aGlzLmJvdW5kLnRyYW5zbGF0ZShkeCwgZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJvdGF0ZShyYWRpYW46IG51bWJlciwgcG9pbnQ6IFZlY3Rvcikge1xyXG4gICAgICAgIGlmKHBvaW50ID09PSB0aGlzLnBvc2l0aW9uKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBveCA9IHRoaXMub3JpZ2luLngsXHJcbiAgICAgICAgICAgIG95ID0gdGhpcy5vcmlnaW4ueTtcclxuXHJcbiAgICAgICAgdGhpcy5vcmlnaW4gPSB0aGlzLm9yaWdpbi5yb3QocmFkaWFuLCBwb2ludCwgdGhpcy5vcmlnaW4pO1xyXG4gICAgICAgIHRoaXMuYm91bmQudHJhbnNsYXRlKHRoaXMub3JpZ2luLnggLSBveCwgdGhpcy5vcmlnaW4ueSAtIG95KTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 多边形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Polygon = void 0;\r\nconst body_1 = __webpack_require__(2);\r\nconst vertices_1 = __webpack_require__(3);\r\nconst vector_1 = __webpack_require__(0);\r\nclass Polygon extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.polygon);\r\n    }\r\n    beforeInitializeProperties(opt) {\r\n        // 将向量转化为顶点\r\n        if (opt.vertices) {\r\n            this.localVertexList = opt.vertices;\r\n        }\r\n        // 顶点数 > 3才构成多边形\r\n        if (this.localVertexList && this.localVertexList.length < 3)\r\n            return;\r\n        // 计算世界顶点坐标\r\n        this.vertexList = this.getVertexList();\r\n    }\r\n    /**\r\n     * 获取世界顶点坐标\r\n     */\r\n    getVertexList() {\r\n        return vertices_1.Vertices.transform2World(this.origin, this.localVertexList);\r\n    }\r\n    getArea() {\r\n        return Math.abs(vertices_1.Vertices.getArea(this.vertexList));\r\n    }\r\n    getCentroid() {\r\n        return vertices_1.Vertices.getCentroid(this.vertexList);\r\n    }\r\n    getInertia(position) {\r\n        position = position || this.position;\r\n        return vertices_1.Vertices.getInertia(this.vertexList, this.mass, position);\r\n    }\r\n    getAxes() {\r\n        return vertices_1.Vertices.getAxes(this.vertexList);\r\n    }\r\n    getBound() {\r\n        return vertices_1.Vertices.getBound(this.vertexList);\r\n    }\r\n    translate(dx, dy) {\r\n        // 位移图形原点\r\n        this.origin.x += dx;\r\n        this.origin.y += dy;\r\n        // 位移多边形顶点\r\n        vertices_1.Vertices.translate(this.vertexList, dx, dy);\r\n        // 位移包围盒\r\n        this.bound.translate(dx, dy);\r\n    }\r\n    rotate(radian, point) {\r\n        // 旋转顶点\r\n        vertices_1.Vertices.rotate(this.vertexList, radian, point);\r\n        vector_1._tempVector4.x = point.x - this.position.x;\r\n        vector_1._tempVector4.y = point.y - this.position.y;\r\n        vector_1._tempVector4.x = 0;\r\n        vector_1._tempVector4.y = 0;\r\n        // 转动轴\r\n        for (let i = 0; i < this.axes.length; i++) {\r\n            this.axes[i] && this.axes[i].value.rot(radian, vector_1._tempVector4, this.axes[i].value);\r\n        }\r\n        // 更新包围盒\r\n        this.bound.update(this.vertexList);\r\n    }\r\n}\r\nexports.Polygon = Polygon;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9wb2x5Z29uLnRzP2E2ZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCxzQ0FBaUQ7QUFDakQsMENBQWdFO0FBQ2hFLHdDQUFzRDtBQVl0RCxNQUFhLE9BQVEsU0FBUSxXQUFJO0lBTTdCLFlBQVksR0FBZTtRQUN2QixLQUFLLENBQUMsR0FBRyxFQUFFLGVBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsMEJBQTBCLENBQUMsR0FBZTtRQUN0QyxXQUFXO1FBQ1gsSUFBRyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2IsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1NBQ3ZDO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUcsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDO1lBQUUsT0FBTztRQUVuRSxXQUFXO1FBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsYUFBYTtRQUNULE9BQU8sbUJBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLG1CQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQWlCO1FBQ3hCLFFBQVEsR0FBRyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNyQyxPQUFPLG1CQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sbUJBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUFVLEVBQUUsRUFBVTtRQUM1QixTQUFTO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixVQUFVO1FBQ1YsbUJBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFNUMsUUFBUTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWMsRUFBRSxLQUFhO1FBQ2hDLE9BQU87UUFDUCxtQkFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVoRCxxQkFBWSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzNDLHFCQUFZLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFM0MscUJBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLHFCQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVuQixNQUFNO1FBQ04sS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxxQkFBWSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEY7UUFFRCxRQUFRO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjtBQWhGRCwwQkFnRkMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDlpJrovrnlvaLliJrkvZNcclxuICovXHJcblxyXG5pbXBvcnQgeyBCb2R5LCBCb2R5T3B0LCBib2R5VHlwZSB9IGZyb20gXCIuL2JvZHlcIjtcclxuaW1wb3J0IHsgVmVydGV4TGlzdCwgVmVydGljZXMsIEF4aXMgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcbmltcG9ydCB7IFZlY3RvciwgX3RlbXBWZWN0b3I0IH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IEJvdW5kIH0gZnJvbSBcIi4uL2NvbW1vbi9ib3VuZFwiO1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQb2x5Z29uT3B0IGV4dGVuZHMgQm9keU9wdCB7XHJcbiAgICB2ZXJ0aWNlcz86IFZlY3RvcltdO1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBQb2x5Z29uIGV4dGVuZHMgQm9keSB7XHJcbiAgICAvLyDlpJrovrnlvaLpobbngrnvvIjmnKzlnLDlnZDmoIfvvIlcclxuICAgIGxvY2FsVmVydGV4TGlzdDogVmVydGV4TGlzdDtcclxuICAgIC8vIOWkmui+ueW9oumhtueCue+8iOS4lueVjOWdkOagh++8iVxyXG4gICAgdmVydGV4TGlzdDogVmVydGV4TGlzdDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHQ6IFBvbHlnb25PcHQpIHtcclxuICAgICAgICBzdXBlcihvcHQsIGJvZHlUeXBlLnBvbHlnb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGJlZm9yZUluaXRpYWxpemVQcm9wZXJ0aWVzKG9wdDogUG9seWdvbk9wdCkge1xyXG4gICAgICAgIC8vIOWwhuWQkemHj+i9rOWMluS4uumhtueCuVxyXG4gICAgICAgIGlmKG9wdC52ZXJ0aWNlcykge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsVmVydGV4TGlzdCA9IG9wdC52ZXJ0aWNlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmhtueCueaVsCA+IDPmiY3mnoTmiJDlpJrovrnlvaJcclxuICAgICAgICBpZih0aGlzLmxvY2FsVmVydGV4TGlzdCAmJiB0aGlzLmxvY2FsVmVydGV4TGlzdC5sZW5ndGggPCAzKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIOiuoeeul+S4lueVjOmhtueCueWdkOagh1xyXG4gICAgICAgIHRoaXMudmVydGV4TGlzdCA9IHRoaXMuZ2V0VmVydGV4TGlzdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiW55WM6aG254K55Z2Q5qCHXHJcbiAgICAgKi9cclxuICAgIGdldFZlcnRleExpc3QoKTogVmVydGV4TGlzdCB7XHJcbiAgICAgICAgcmV0dXJuIFZlcnRpY2VzLnRyYW5zZm9ybTJXb3JsZCh0aGlzLm9yaWdpbiwgdGhpcy5sb2NhbFZlcnRleExpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFyZWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoVmVydGljZXMuZ2V0QXJlYSh0aGlzLnZlcnRleExpc3QpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZW50cm9pZCgpOiBWZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiBWZXJ0aWNlcy5nZXRDZW50cm9pZCh0aGlzLnZlcnRleExpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluZXJ0aWEocG9zaXRpb24/OiBWZWN0b3IpOiBudW1iZXIge1xyXG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gfHwgdGhpcy5wb3NpdGlvbjtcclxuICAgICAgICByZXR1cm4gVmVydGljZXMuZ2V0SW5lcnRpYSh0aGlzLnZlcnRleExpc3QsIHRoaXMubWFzcywgcG9zaXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF4ZXMoKTogQXhpc1tdIHtcclxuICAgICAgICByZXR1cm4gVmVydGljZXMuZ2V0QXhlcyh0aGlzLnZlcnRleExpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJvdW5kKCk6IEJvdW5kIHtcclxuICAgICAgICByZXR1cm4gVmVydGljZXMuZ2V0Qm91bmQodGhpcy52ZXJ0ZXhMaXN0KTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2xhdGUoZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOS9jeenu+WbvuW9ouWOn+eCuVxyXG4gICAgICAgIHRoaXMub3JpZ2luLnggKz0gZHg7XHJcbiAgICAgICAgdGhpcy5vcmlnaW4ueSArPSBkeTtcclxuICAgICAgICAvLyDkvY3np7vlpJrovrnlvaLpobbngrlcclxuICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUodGhpcy52ZXJ0ZXhMaXN0LCBkeCwgZHkpO1xyXG5cclxuICAgICAgICAvLyDkvY3np7vljIXlm7Tnm5JcclxuICAgICAgICB0aGlzLmJvdW5kLnRyYW5zbGF0ZShkeCwgZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJvdGF0ZShyYWRpYW46IG51bWJlciwgcG9pbnQ6IFZlY3Rvcikge1xyXG4gICAgICAgIC8vIOaXi+i9rOmhtueCuVxyXG4gICAgICAgIFZlcnRpY2VzLnJvdGF0ZSh0aGlzLnZlcnRleExpc3QsIHJhZGlhbiwgcG9pbnQpO1xyXG5cclxuICAgICAgICBfdGVtcFZlY3RvcjQueCA9IHBvaW50LnggLSB0aGlzLnBvc2l0aW9uLng7XHJcbiAgICAgICAgX3RlbXBWZWN0b3I0LnkgPSBwb2ludC55IC0gdGhpcy5wb3NpdGlvbi55O1xyXG5cclxuICAgICAgICBfdGVtcFZlY3RvcjQueCA9IDA7XHJcbiAgICAgICAgX3RlbXBWZWN0b3I0LnkgPSAwO1xyXG5cclxuICAgICAgICAvLyDovazliqjovbRcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5heGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXhlc1tpXSAmJiB0aGlzLmF4ZXNbaV0udmFsdWUucm90KHJhZGlhbiwgX3RlbXBWZWN0b3I0LCB0aGlzLmF4ZXNbaV0udmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5pu05paw5YyF5Zu055uSXHJcbiAgICAgICAgdGhpcy5ib3VuZC51cGRhdGUodGhpcy52ZXJ0ZXhMaXN0KTtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Torque = void 0;\r\nconst interface_1 = __webpack_require__(11);\r\nconst bodiesFactory_1 = __webpack_require__(21);\r\nconst vector_1 = __webpack_require__(0);\r\ninterface_1.TorqueWorld['body'] = new bodiesFactory_1.BodiesFactory();\r\ninterface_1.TorqueWorld['math'] = {\r\n    vector: (x, y) => new vector_1.Vector(x, y)\r\n};\r\nexports.Torque = interface_1.TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdG9ycXVlLnRzP2JhZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNENBQStDO0FBQy9DLGdEQUFxRDtBQUNyRCx3Q0FBdUM7QUFFdkMsdUJBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLDZCQUFhLEVBQUUsQ0FBQztBQUMxQyx1QkFBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHO0lBQ2xCLE1BQU0sRUFBRSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDckQsQ0FBQztBQUVXLGNBQU0sR0FBRyx1QkFBVyxDQUFDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9ycXVlV29ybGQgfSBmcm9tIFwiLi9jb3JlL2ludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBCb2RpZXNGYWN0b3J5IH0gZnJvbSBcIi4vY29yZS9ib2RpZXNGYWN0b3J5XCI7XHJcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gXCIuL21hdGgvdmVjdG9yXCI7XHJcblxyXG5Ub3JxdWVXb3JsZFsnYm9keSddID0gbmV3IEJvZGllc0ZhY3RvcnkoKTtcclxuVG9ycXVlV29ybGRbJ21hdGgnXSA9IHtcclxuICAgIHZlY3RvcjogKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiBuZXcgVmVjdG9yKHgsIHkpXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVG9ycXVlID0gVG9ycXVlV29ybGQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TorqueWorld = void 0;\r\nconst util_1 = __webpack_require__(1);\r\nconst engine_1 = __webpack_require__(12);\r\n// Torque主类\r\nclass TorqueWorld {\r\n    constructor(width, height, opt) {\r\n        this.engine = new engine_1.Engine(width, height, opt);\r\n    }\r\n    /**\r\n     * 增加刚体\r\n     * @param body\r\n     */\r\n    append(body) {\r\n        if (Array.isArray(body)) {\r\n            body.map(b => this.append(b));\r\n        }\r\n        else {\r\n            body.beforeAppend(this.engine);\r\n            this.engine.bodies.push(body);\r\n            body.afterAppend();\r\n        }\r\n    }\r\n    /**\r\n     * 移除刚体\r\n     * @param body\r\n     */\r\n    remove(body) {\r\n        if (body.parent) {\r\n            body = body.parent;\r\n        }\r\n        body.beforeRemove();\r\n        util_1.Util.remove(this.engine.bodies, body);\r\n        body.afterRemove();\r\n    }\r\n    /**\r\n     * 清空引擎\r\n     */\r\n    clear() {\r\n        this.engine.bodies.map(body => this.remove(body));\r\n        this.engine.manifoldTable.clear();\r\n    }\r\n    /**\r\n     * 克隆刚体\r\n     * @param body\r\n     */\r\n    clone(body) {\r\n        return null;\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setEngineOption(opt) {\r\n        this.engine.setOption(opt);\r\n    }\r\n    /**\r\n     * 绑定沟子事件\r\n     * @param eventName\r\n     * @param fn\r\n     */\r\n    on(eventName, fn) {\r\n        this.engine.methods[eventName] = fn;\r\n    }\r\n    /**\r\n     * 开始运行\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        this.engine.timeStepper.start(frameNumLimit);\r\n    }\r\n    /**\r\n     * 暂停运行\r\n     */\r\n    pause() {\r\n        this.engine.timeStepper.pause();\r\n    }\r\n    /**\r\n     * 获取帧率\r\n     */\r\n    getFPS() {\r\n        return this.engine.timeStepper.getFPS();\r\n    }\r\n}\r\nexports.TorqueWorld = TorqueWorld;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9pbnRlcmZhY2UudHM/MjY1ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBc0M7QUFDdEMseUNBQTZDO0FBSTdDLFdBQVc7QUFDWCxNQUFhLFdBQVc7SUFHcEIsWUFBWSxLQUFhLEVBQUUsTUFBYyxFQUFFLEdBQWU7UUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsSUFBbUI7UUFDdEIsSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7YUFDSTtZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLElBQVU7UUFDYixJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWixJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN0QjtRQUVELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixXQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsSUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxlQUFlLENBQUMsR0FBYztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEVBQUUsQ0FBQyxTQUFpQixFQUFFLEVBQTRCO1FBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGFBQXNCO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUMsQ0FBQztDQUNKO0FBMUZELGtDQTBGQyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvZHkgfSBmcm9tIFwiLi4vYm9keS9ib2R5XCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgRW5naW5lLCBFbmdpbmVPcHQgfSBmcm9tIFwiLi9lbmdpbmVcIjtcclxuXHJcblxyXG5cclxuLy8gVG9ycXVl5Li757G7XHJcbmV4cG9ydCBjbGFzcyBUb3JxdWVXb3JsZCB7XHJcbiAgICBwcml2YXRlIGVuZ2luZTogRW5naW5lO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBvcHQ/OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLmVuZ2luZSA9IG5ldyBFbmdpbmUod2lkdGgsIGhlaWdodCwgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWinuWKoOWImuS9k1xyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKi9cclxuICAgIGFwcGVuZChib2R5OiBCb2R5IHwgQm9keVtdKSB7XHJcbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShib2R5KSkge1xyXG4gICAgICAgICAgICBib2R5Lm1hcChiID0+IHRoaXMuYXBwZW5kKGIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGJvZHkuYmVmb3JlQXBwZW5kKHRoaXMuZW5naW5lKTtcclxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuYm9kaWVzLnB1c2goYm9keSk7XHJcbiAgICAgICAgICAgIGJvZHkuYWZ0ZXJBcHBlbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnp7vpmaTliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICByZW1vdmUoYm9keTogQm9keSkge1xyXG4gICAgICAgIGlmKGJvZHkucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGJvZHkgPSBib2R5LnBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJvZHkuYmVmb3JlUmVtb3ZlKCk7XHJcbiAgICAgICAgVXRpbC5yZW1vdmUodGhpcy5lbmdpbmUuYm9kaWVzLCBib2R5KTtcclxuICAgICAgICBib2R5LmFmdGVyUmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXnqbrlvJXmk45cclxuICAgICAqL1xyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUuYm9kaWVzLm1hcChib2R5ID0+IHRoaXMucmVtb3ZlKGJvZHkpKTtcclxuICAgICAgICB0aGlzLmVuZ2luZS5tYW5pZm9sZFRhYmxlLmNsZWFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhYvpmobliJrkvZNcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICovXHJcbiAgICBjbG9uZShib2R5OiBCb2R5KTogQm9keSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lvJXmk47lj4LmlbBcclxuICAgICAqIEBwYXJhbSBvcHQgXHJcbiAgICAgKi9cclxuICAgIHNldEVuZ2luZU9wdGlvbihvcHQ6IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnNldE9wdGlvbihvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uR5a6a5rKf5a2Q5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIFxyXG4gICAgICogQHBhcmFtIGZuIFxyXG4gICAgICovXHJcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgZm46IChlbmdpbmU6IEVuZ2luZSkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLm1ldGhvZHNbZXZlbnROYW1lXSA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byA5aeL6L+Q6KGMXHJcbiAgICAgKiBAcGFyYW0gZnJhbWVOdW1MaW1pdCDpmZDliLbov5DooYzlpJrlsJHluKflgZzkuItcclxuICAgICAqL1xyXG4gICAgc3RhcnQoZnJhbWVOdW1MaW1pdD86IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnRpbWVTdGVwcGVyLnN0YXJ0KGZyYW1lTnVtTGltaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pqC5YGc6L+Q6KGMXHJcbiAgICAgKi9cclxuICAgIHBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnRpbWVTdGVwcGVyLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bluKfnjodcclxuICAgICAqL1xyXG4gICAgZ2V0RlBTKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5naW5lLnRpbWVTdGVwcGVyLmdldEZQUygpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Engine = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\nconst timeStepper_1 = __webpack_require__(13);\r\nconst detector_1 = __webpack_require__(14);\r\nconst sleeping_1 = __webpack_require__(19);\r\nconst manifoldTable_1 = __webpack_require__(20);\r\nconst contact_1 = __webpack_require__(4);\r\n// 主引擎\r\nclass Engine {\r\n    constructor(width, height, opt) {\r\n        // 引力缩放因子\r\n        this.gravityScaler = 50;\r\n        this.width = width || 0;\r\n        this.height = height || 0;\r\n        this.gravity = new vector_1.Vector(0, 9);\r\n        this.enableSleeping = true;\r\n        this.enableCollisionDetection = true;\r\n        this.enableCollisionResolve = true;\r\n        this.methods = {\r\n            tickStart: () => { },\r\n            tickEnd: () => { },\r\n            beforeUpdate: () => { },\r\n            afterUpdate: () => { },\r\n            beforeRender: () => { },\r\n            afterRender: () => { },\r\n            start: () => { },\r\n            pause: () => { },\r\n            collisionStart: (manifolds) => { },\r\n            collisionActive: (manifolds) => { },\r\n            collisionEnd: (manifolds) => { }\r\n        };\r\n        util_1.Util.merge(this, opt);\r\n        this.bodies = [];\r\n        this.timeStepper = new timeStepper_1.TimeStepper(this, opt);\r\n        this.detector = new detector_1.Detector(this, opt);\r\n        this.manifoldTable = new manifoldTable_1.ManifoldTable(opt);\r\n        this.contactConstraint = new contact_1.ContactConstraint();\r\n        this.sleeping = new sleeping_1.Sleeping(opt);\r\n    }\r\n    /**\r\n     * 引擎更新\r\n     * @param dt 步长\r\n     * @param timeStamp 时间戳\r\n     */\r\n    update(dt, timeStamp) {\r\n        if (this.enableSleeping) {\r\n            // 更新刚体的休眠/唤醒状态\r\n            this.sleeping.update(this.bodies);\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            let body = this.bodies[i];\r\n            body.force.x += this.gravity.x * body.mass * this.gravityScaler;\r\n            body.force.y += this.gravity.y * body.mass * this.gravityScaler;\r\n            // 应用受力\r\n            body.applyForce(body.force);\r\n            // 积分受力\r\n            body.integrateForces(dt);\r\n        }\r\n        // 解决所有约束\r\n        // this.resolver.solveConstraint();\r\n        // 是否开启碰撞检测\r\n        if (this.enableCollisionDetection) {\r\n            // 进行碰撞检测\r\n            let collisions = this.detector.detect(this.bodies);\r\n            this.collision = collisions;\r\n            //根据得到的碰撞对更新碰撞流形\r\n            this.manifoldTable.update(collisions, timeStamp);\r\n            // 移除缓存表超时的碰撞对\r\n            this.manifoldTable.filter(timeStamp);\r\n            // 是否开启了碰撞求解\r\n            if (this.enableCollisionResolve) {\r\n                // 若发现有休眠的刚体发生碰撞，则唤醒\r\n                if (this.enableSleeping)\r\n                    this.sleeping.afterCollision(this.manifoldTable.list);\r\n                // 求解碰撞约束\r\n                this.contactConstraint.solve(this.manifoldTable.list, dt);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            // 积分速度\r\n            this.bodies[i].integrateVelocities(dt);\r\n        }\r\n        this.manifoldTable.collisionStart.length && this.collisionStart();\r\n        this.manifoldTable.collisionActive.length && this.collisionActive();\r\n        this.manifoldTable.collisionEnd.length && this.collisionEnd();\r\n    }\r\n    /**\r\n     * 渲染物理引擎\r\n     * @param dt\r\n     */\r\n    render(dt) {\r\n        let body, i, j;\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            body = this.bodies[i];\r\n            // 睡眠或者静态的刚体不用每一帧都渲染\r\n            if (body.sleeping || body.static) {\r\n                continue;\r\n            }\r\n            // 渲染刚体\r\n            body.render(body, dt);\r\n            if (body.parts[0] !== body) {\r\n                for (j = 0; j < body.parts.length; j++) {\r\n                    body.parts[j].render(body.parts[j], dt);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 设置引擎参数\r\n     * @param opt\r\n     */\r\n    setOption(opt) {\r\n        util_1.Util.merge(this, opt);\r\n        util_1.Util.merge(this.timeStepper, opt);\r\n    }\r\n    // ----------------------------------------------- hook --------------------------\r\n    tickStart() { this.methods.tickStart(); }\r\n    tickEnd() { this.methods.tickEnd(); }\r\n    beforeUpdate() { this.methods.beforeUpdate(); }\r\n    afterUpdate() { this.methods.afterUpdate(); }\r\n    beforeRender() { this.methods.beforeRender(); }\r\n    afterRender() { this.methods.afterRender(); }\r\n    start() { this.methods.start(); }\r\n    pause() { this.methods.pause(); }\r\n    collisionStart() { this.methods.collisionEnd(this.manifoldTable.collisionStart); }\r\n    collisionActive() { this.methods.collisionEnd(this.manifoldTable.collisionActive); }\r\n    collisionEnd() { this.methods.collisionEnd(this.manifoldTable.collisionEnd); }\r\n}\r\nexports.Engine = Engine;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9lbmdpbmUudHM/OTViYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFDeEMsc0NBQXNDO0FBQ3RDLDhDQUE0QztBQUM1QywyQ0FBaUU7QUFDakUsMkNBQXNDO0FBQ3RDLGdEQUEyRDtBQUUzRCx5Q0FBMEQ7QUFnRDFELE1BQU07QUFDTixNQUFhLE1BQU07SUFtQ2YsWUFBWSxLQUFhLEVBQUUsTUFBYyxFQUFFLEdBQWU7UUFQMUQsU0FBUztRQUNULGtCQUFhLEdBQVcsRUFBRSxDQUFDO1FBT3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGVBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFaEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQztRQUNyQyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1FBRW5DLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDWCxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUNuQixPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUNqQixZQUFZLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUN0QixXQUFXLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUNyQixZQUFZLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUN0QixXQUFXLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUNyQixLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztZQUNmLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO1lBQ2YsY0FBYyxFQUFFLENBQUMsU0FBcUIsRUFBRSxFQUFFLEdB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QUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRjtBQTFMRCx3QkEwTEMiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5pbXBvcnQgeyBUaW1lU3RlcHBlciB9IGZyb20gXCIuL3RpbWVTdGVwcGVyXCI7XHJcbmltcG9ydCB7IGJyb2FkUGhhc2VQYWlyLCBEZXRlY3RvciB9IGZyb20gXCIuLi9jb2xsaXNpb24vZGV0ZWN0b3JcIjtcclxuaW1wb3J0IHsgU2xlZXBpbmcgfSBmcm9tIFwiLi9zbGVlcGluZ1wiO1xyXG5pbXBvcnQgeyBNYW5pZm9sZFRhYmxlIH0gZnJvbSBcIi4uL2NvbGxpc2lvbi9tYW5pZm9sZFRhYmxlXCI7XHJcbmltcG9ydCB7IENvbGxpc2lvbiwgTWFuaWZvbGQgfSBmcm9tIFwiLi4vY29sbGlzaW9uL21hbmlmb2xkXCI7XHJcbmltcG9ydCB7IENvbnRhY3RDb25zdHJhaW50IH0gZnJvbSBcIi4uL2NvbnN0cmFpbnQvY29udGFjdFwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDkuLvlvJXmk45cclxuICovXHJcblxyXG5cclxuXHJcbi8vIOW8leaTjuebuOWFs+mFjee9rumhuVxyXG5leHBvcnQgaW50ZXJmYWNlIEVuZ2luZU9wdCB7XHJcbiAgICAvLyDluKfnjodcclxuICAgIGZwczogbnVtYmVyO1xyXG4gICAgLy8g5piv5ZCm5Zu65a6a5q2l6ZW/XHJcbiAgICBkZWx0YUZpeGVkOiBib29sZWFuO1xyXG5cclxuICAgIC8vIOaYr+WQpuW8gOWQr+eisOaSnuajgOa1i1xyXG4gICAgZW5hYmxlQ29sbGxpc2lvbkRldGVjdGlvbjogYm9vbGVhbjtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+eisOaSnuaxguino1xyXG4gICAgZW5hYmxlQ29sbGlzaW9uUmVzb2x2ZTogYm9vbGVhbjtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+S8keecoFxyXG4gICAgZW5hYmxlU2xlZXBpbmc6IGJvb2xlYW47XHJcbiAgICAvLyDmmK/lkKblvIDlkK/nvJPlrZhcclxuICAgIGVuYWJsZUNhY2hlOiBib29sZWFuO1xyXG5cclxuICAgIC8vIOmHjeWKm1xyXG4gICAgZ3Jhdml0eTogVmVjdG9yO1xyXG5cclxuICAgIC8vIOaWueazlVxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIHRpY2tTdGFydDogKCkgPT4gdm9pZDsgXHJcbiAgICAgICAgdGlja0VuZDogKCkgPT4gdm9pZDtcclxuICAgICAgICBiZWZvcmVVcGRhdGU6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgYWZ0ZXJVcGRhdGU6ICgpID0+IHZvaWQ7XHJcbiAgICAgICAgYmVmb3JlUmVuZGVyOiAoKSA9PiB2b2lkO1xyXG4gICAgICAgIGFmdGVyUmVuZGVyOiAoKSA9PiB2b2lkO1xyXG4gICAgICAgIHN0YXJ0OiAoKSA9PiB2b2lkO1xyXG4gICAgICAgIHBhdXNlOiAoKSA9PiB2b2lkO1xyXG4gICAgICAgIGNvbGxpc2lvblN0YXJ0OiAobWFuaWZvbGRzOiBNYW5pZm9sZFtdKSA9PiB2b2lkO1xyXG4gICAgICAgIGNvbGxpc2lvbkFjdGl2ZTogKG1hbmlmb2xkczogTWFuaWZvbGRbXSkgPT4gdm9pZDtcclxuICAgICAgICBjb2xsaXNpb25FbmQ6IChtYW5pZm9sZHM6IE1hbmlmb2xkW10pID0+IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyDkuLvlvJXmk45cclxuZXhwb3J0IGNsYXNzIEVuZ2luZSB7XHJcbiAgICAvLyDmqKHmi5/nqpflj6Plrr3luqZcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAvLyDmqKHmi5/nqpflj6Ppq5jluqZcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIC8vIOaYr+WQpuW8gOWQr+S8keecoOacuuWItlxyXG4gICAgZW5hYmxlU2xlZXBpbmc6IGJvb2xlYW47XHJcbiAgICAvLyDmmK/lkKblvIDlkK/norDmkp7mo4DmtYtcclxuICAgIGVuYWJsZUNvbGxpc2lvbkRldGVjdGlvbjogYm9vbGVhbjtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+eisOaSnuaxguino1xyXG4gICAgZW5hYmxlQ29sbGlzaW9uUmVzb2x2ZTogYm9vbGVhbjtcclxuXHJcbiAgICAvLyDph43liptcclxuICAgIGdyYXZpdHk6IFZlY3RvcjtcclxuXHJcbiAgICAvLyDliJrkvZPliJfooahcclxuICAgIGJvZGllczogQm9keVtdO1xyXG4gICAgLy8g5pe26Ze05q2l6L+t5Luj5ZmoXHJcbiAgICB0aW1lU3RlcHBlcjogVGltZVN0ZXBwZXI7XHJcbiAgICAvLyDnorDmkp7mo4DmtYvlmahcclxuICAgIGRldGVjdG9yOiBEZXRlY3RvcjtcclxuICAgIC8vIOa1geW9ouihqFxyXG4gICAgbWFuaWZvbGRUYWJsZTogTWFuaWZvbGRUYWJsZTtcclxuICAgIC8vIOaOpeinpue6puadn1xyXG4gICAgY29udGFjdENvbnN0cmFpbnQ6IENvbnRhY3RDb25zdHJhaW50O1xyXG4gICAgLy8g5LyR55yg566h55CG5ZmoXHJcbiAgICBzbGVlcGluZzogU2xlZXBpbmc7XHJcbiAgICAvLyDlvJXlipvnvKnmlL7lm6DlrZBcclxuICAgIGdyYXZpdHlTY2FsZXI6IG51bWJlciA9IDUwO1xyXG4gICAgLy8g5pa55rOVXHJcbiAgICBtZXRob2RzOiBFbmdpbmVPcHRbJ21ldGhvZHMnXTtcclxuXHJcbiAgICBjb2xsaXNpb247XHJcblxyXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdD86IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCAwO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ncmF2aXR5ID0gbmV3IFZlY3RvcigwLCA5KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmFibGVTbGVlcGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lbmFibGVDb2xsaXNpb25EZXRlY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlQ29sbGlzaW9uUmVzb2x2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHtcclxuICAgICAgICAgICAgdGlja1N0YXJ0OiAoKSA9PiB7fSxcclxuICAgICAgICAgICAgdGlja0VuZDogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIGJlZm9yZVVwZGF0ZTogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIGFmdGVyVXBkYXRlOiAoKSA9PiB7fSxcclxuICAgICAgICAgICAgYmVmb3JlUmVuZGVyOiAoKSA9PiB7fSxcclxuICAgICAgICAgICAgYWZ0ZXJSZW5kZXI6ICgpID0+IHt9LFxyXG4gICAgICAgICAgICBzdGFydDogKCkgPT4ge30sXHJcbiAgICAgICAgICAgIHBhdXNlOiAoKSA9PiB7fSxcclxuICAgICAgICAgICAgY29sbGlzaW9uU3RhcnQ6IChtYW5pZm9sZHM6IE1hbmlmb2xkW10pID0+IHt9LFxyXG4gICAgICAgICAgICBjb2xsaXNpb25BY3RpdmU6IChtYW5pZm9sZHM6IE1hbmlmb2xkW10pID0+IHt9LFxyXG4gICAgICAgICAgICBjb2xsaXNpb25FbmQ6IChtYW5pZm9sZHM6IE1hbmlmb2xkW10pID0+IHt9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBVdGlsLm1lcmdlKHRoaXMsIG9wdCk7XHJcblxyXG4gICAgICAgIHRoaXMuYm9kaWVzID0gW107XHJcbiAgICAgICAgdGhpcy50aW1lU3RlcHBlciA9IG5ldyBUaW1lU3RlcHBlcih0aGlzLCBvcHQpO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0b3IgPSBuZXcgRGV0ZWN0b3IodGhpcywgb3B0KTtcclxuICAgICAgICB0aGlzLm1hbmlmb2xkVGFibGUgPSBuZXcgTWFuaWZvbGRUYWJsZShvcHQpO1xyXG4gICAgICAgIHRoaXMuY29udGFjdENvbnN0cmFpbnQgPSBuZXcgQ29udGFjdENvbnN0cmFpbnQoKTtcclxuICAgICAgICB0aGlzLnNsZWVwaW5nID0gbmV3IFNsZWVwaW5nKG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOW8leaTjuabtOaWsFxyXG4gICAgICogQHBhcmFtIGR0IOatpemVv1xyXG4gICAgICogQHBhcmFtIHRpbWVTdGFtcCDml7bpl7TmiLNcclxuICAgICAqL1xyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIsIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYodGhpcy5lbmFibGVTbGVlcGluZykge1xyXG4gICAgICAgICAgICAvLyDmm7TmlrDliJrkvZPnmoTkvJHnnKAv5ZSk6YaS54q25oCBXHJcbiAgICAgICAgICAgIHRoaXMuc2xlZXBpbmcudXBkYXRlKHRoaXMuYm9kaWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmJvZGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgYm9keSA9IHRoaXMuYm9kaWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgYm9keS5mb3JjZS54ICs9IHRoaXMuZ3Jhdml0eS54ICogYm9keS5tYXNzICogdGhpcy5ncmF2aXR5U2NhbGVyO1xyXG4gICAgICAgICAgICBib2R5LmZvcmNlLnkgKz0gdGhpcy5ncmF2aXR5LnkgKiBib2R5Lm1hc3MgKiB0aGlzLmdyYXZpdHlTY2FsZXI7XHJcblxyXG4gICAgICAgICAgICAvLyDlupTnlKjlj5fliptcclxuICAgICAgICAgICAgYm9keS5hcHBseUZvcmNlKGJvZHkuZm9yY2UpO1xyXG4gICAgICAgICAgICAvLyDnp6/liIblj5fliptcclxuICAgICAgICAgICAgYm9keS5pbnRlZ3JhdGVGb3JjZXMoZHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6Kej5Yaz5omA5pyJ57qm5p2fXHJcbiAgICAgICAgLy8gdGhpcy5yZXNvbHZlci5zb2x2ZUNvbnN0cmFpbnQoKTtcclxuXHJcbiAgICAgICAgLy8g5piv5ZCm5byA5ZCv56Kw5pKe5qOA5rWLXHJcbiAgICAgICAgaWYodGhpcy5lbmFibGVDb2xsaXNpb25EZXRlY3Rpb24pIHtcclxuICAgICAgICAgICAgLy8g6L+b6KGM56Kw5pKe5qOA5rWLXHJcbiAgICAgICAgICAgIGxldCBjb2xsaXNpb25zOiBDb2xsaXNpb25bXSA9IHRoaXMuZGV0ZWN0b3IuZGV0ZWN0KHRoaXMuYm9kaWVzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uID0gY29sbGlzaW9ucztcclxuXHJcbiAgICAgICAgICAgIC8v5qC55o2u5b6X5Yiw55qE56Kw5pKe5a+55pu05paw56Kw5pKe5rWB5b2iXHJcbiAgICAgICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS51cGRhdGUoY29sbGlzaW9ucywgdGltZVN0YW1wKTtcclxuICAgICAgICAgICAgLy8g56e76Zmk57yT5a2Y6KGo6LaF5pe255qE56Kw5pKe5a+5XHJcbiAgICAgICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS5maWx0ZXIodGltZVN0YW1wKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOaYr+WQpuW8gOWQr+S6hueisOaSnuaxguino1xyXG4gICAgICAgICAgICBpZih0aGlzLmVuYWJsZUNvbGxpc2lvblJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgIC8vIOiLpeWPkeeOsOacieS8keecoOeahOWImuS9k+WPkeeUn+eisOaSnu+8jOWImeWUpOmGklxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlU2xlZXBpbmcpXHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLnNsZWVwaW5nLmFmdGVyQ29sbGlzaW9uKHRoaXMubWFuaWZvbGRUYWJsZS5saXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmsYLop6PnorDmkp7nuqbmnZ9cclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdENvbnN0cmFpbnQuc29sdmUodGhpcy5tYW5pZm9sZFRhYmxlLmxpc3QsIGR0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIOenr+WIhumAn+W6plxyXG4gICAgICAgICAgICB0aGlzLmJvZGllc1tpXS5pbnRlZ3JhdGVWZWxvY2l0aWVzKGR0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25TdGFydC5sZW5ndGggJiYgdGhpcy5jb2xsaXNpb25TdGFydCgpO1xyXG4gICAgICAgIHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25BY3RpdmUubGVuZ3RoICYmIHRoaXMuY29sbGlzaW9uQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5tYW5pZm9sZFRhYmxlLmNvbGxpc2lvbkVuZC5sZW5ndGggJiYgdGhpcy5jb2xsaXNpb25FbmQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4suafk+eJqeeQhuW8leaTjlxyXG4gICAgICogQHBhcmFtIGR0IFxyXG4gICAgICovXHJcbiAgICByZW5kZXIoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBib2R5OiBCb2R5LCBpLCBqO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2RpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYm9keSA9IHRoaXMuYm9kaWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgLy8g552h55yg5oiW6ICF6Z2Z5oCB55qE5Yia5L2T5LiN55So5q+P5LiA5bin6YO95riy5p+TXHJcbiAgICAgICAgICAgIGlmKGJvZHkuc2xlZXBpbmcgfHwgYm9keS5zdGF0aWMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDmuLLmn5PliJrkvZNcclxuICAgICAgICAgICAgYm9keS5yZW5kZXIoYm9keSwgZHQpO1xyXG4gICAgICAgICAgICBpZihib2R5LnBhcnRzWzBdICE9PSBib2R5KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IoaiA9IDA7IGogPCBib2R5LnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keS5wYXJ0c1tqXS5yZW5kZXIoYm9keS5wYXJ0c1tqXSwgZHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5byV5pOO5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gb3B0IFxyXG4gICAgICovXHJcbiAgICBzZXRPcHRpb24ob3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICBVdGlsLm1lcmdlKHRoaXMsIG9wdCk7XHJcbiAgICAgICAgVXRpbC5tZXJnZSh0aGlzLnRpbWVTdGVwcGVyLCBvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhvb2sgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICB0aWNrU3RhcnQoKSB7IHRoaXMubWV0aG9kcy50aWNrU3RhcnQoKTsgfSBcclxuXHJcbiAgICB0aWNrRW5kKCkgeyB0aGlzLm1ldGhvZHMudGlja0VuZCgpOyB9XHJcblxyXG4gICAgYmVmb3JlVXBkYXRlKCkgeyB0aGlzLm1ldGhvZHMuYmVmb3JlVXBkYXRlKCk7IH1cclxuXHJcbiAgICBhZnRlclVwZGF0ZSgpIHsgdGhpcy5tZXRob2RzLmFmdGVyVXBkYXRlKCk7IH1cclxuXHJcbiAgICBiZWZvcmVSZW5kZXIoKSB7IHRoaXMubWV0aG9kcy5iZWZvcmVSZW5kZXIoKTsgfVxyXG5cclxuICAgIGFmdGVyUmVuZGVyKCkgeyB0aGlzLm1ldGhvZHMuYWZ0ZXJSZW5kZXIoKTsgfVxyXG5cclxuICAgIHN0YXJ0KCkgeyB0aGlzLm1ldGhvZHMuc3RhcnQoKTsgfVxyXG5cclxuICAgIHBhdXNlKCkgeyB0aGlzLm1ldGhvZHMucGF1c2UoKTsgfVxyXG5cclxuICAgIGNvbGxpc2lvblN0YXJ0KCkgeyB0aGlzLm1ldGhvZHMuY29sbGlzaW9uRW5kKHRoaXMubWFuaWZvbGRUYWJsZS5jb2xsaXNpb25TdGFydCk7IH1cclxuXHJcbiAgICBjb2xsaXNpb25BY3RpdmUoKSB7IHRoaXMubWV0aG9kcy5jb2xsaXNpb25FbmQodGhpcy5tYW5pZm9sZFRhYmxlLmNvbGxpc2lvbkFjdGl2ZSk7IH1cclxuXHJcbiAgICBjb2xsaXNpb25FbmQoKSB7IHRoaXMubWV0aG9kcy5jb2xsaXNpb25FbmQodGhpcy5tYW5pZm9sZFRhYmxlLmNvbGxpc2lvbkVuZCk7IH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.TimeStepper = void 0;\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 时间步迭代器\r\n */\r\nclass TimeStepper {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.status = false;\r\n        this.fps = opt.fps || 60;\r\n        this.deltaFixed = opt.deltaFixed === undefined ? true : opt.deltaFixed;\r\n        this.deltaRecordLimit = 60;\r\n        util_1.Util.merge(this, opt);\r\n        this.dt = 1 / this.fps;\r\n        this.dtMin = this.dt;\r\n        this.dtMax = this.dt * 2;\r\n        this.frameCounter = 0;\r\n        this.frameStamp = 0;\r\n        this.prevTime = 0;\r\n        this.frameTotal = 0;\r\n        this.frameNumLimit = -1;\r\n        this.deltaRecorder = [];\r\n    }\r\n    /**\r\n     * 一次tick，也就是一次模拟\r\n     * @param timeStamp 当前时间戳\r\n     */\r\n    tick(timeStamp = 0) {\r\n        let dt;\r\n        // 固定dt\r\n        if (this.deltaFixed === false) {\r\n            // 动态计算dt\r\n            dt = (timeStamp - this.prevTime) / 1000 || this.dt;\r\n            this.prevTime = timeStamp;\r\n            // 根据过去的变化步长情况，优化当前步长，使引擎稳定\r\n            this.deltaRecorder.push(dt);\r\n            this.deltaRecorder = this.deltaRecorder.slice(-this.deltaRecordLimit);\r\n            dt = util_1.Util.clamp(Math.min.apply(Math, this.deltaRecorder), this.dtMin, this.dtMax);\r\n            // 更新dt\r\n            this.dt = dt;\r\n        }\r\n        // 动态计算fps\r\n        this.frameCounter += 1;\r\n        if (timeStamp - this.frameStamp >= 1000) {\r\n            this.fps = this.frameCounter / ((timeStamp - this.frameStamp) / 1000);\r\n            this.frameStamp = timeStamp;\r\n            this.frameCounter = 0;\r\n        }\r\n        this.engine.tickStart();\r\n        // 更新物理引擎\r\n        this.engine.beforeUpdate();\r\n        this.engine.update(this.dt, timeStamp);\r\n        this.engine.afterUpdate();\r\n        // 渲染物理引擎\r\n        this.engine.beforeRender();\r\n        this.engine.render(this.dt);\r\n        this.engine.afterRender();\r\n        this.engine.tickEnd();\r\n        this.frameTotal++;\r\n        if (this.frameNumLimit > 0 && this.frameTotal >= this.frameNumLimit) {\r\n            this.pause();\r\n            return;\r\n        }\r\n        this.raf = window.requestAnimationFrame(this.tick.bind(this));\r\n    }\r\n    /**\r\n     * 开始模拟\r\n     * @param frameNumLimit 限制运行多少帧停下\r\n     */\r\n    start(frameNumLimit) {\r\n        if (this.status)\r\n            return;\r\n        if (frameNumLimit && frameNumLimit > 0) {\r\n            this.frameNumLimit = frameNumLimit;\r\n        }\r\n        this.status = true;\r\n        this.engine.start();\r\n        this.tick();\r\n    }\r\n    /**\r\n     * 暂停模拟\r\n     */\r\n    pause() {\r\n        if (!this.status)\r\n            return;\r\n        this.status = false;\r\n        this.frameTotal = 0;\r\n        this.engine.pause();\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n    /**\r\n     * 获取帧率\r\n     */\r\n    getFPS() {\r\n        return this.fps;\r\n    }\r\n}\r\nexports.TimeStepper = TimeStepper;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Detector = void 0;\r\nconst util_1 = __webpack_require__(1);\r\nconst body_1 = __webpack_require__(2);\r\nconst sat_1 = __webpack_require__(15);\r\nlet TimeList = [], TestFlag = false;\r\nlet test = document.getElementById('test');\r\nif (test) {\r\n    test.addEventListener('click', () => {\r\n        TestFlag = true;\r\n    });\r\n}\r\nclass Detector {\r\n    constructor(engine, opt) {\r\n        this.engine = engine;\r\n        this.SAT = new sat_1.SAT(opt);\r\n    }\r\n    /**\r\n     * 碰撞检测函数\r\n     * @param bodies\r\n     */\r\n    detect(bodies) {\r\n        let broadPhasePairs, collisions;\r\n        // 粗阶段检测\r\n        broadPhasePairs = this.broadPhase(bodies);\r\n        let start = performance.now();\r\n        // 细阶段检测\r\n        collisions = this.narrowPhase(broadPhasePairs);\r\n        let end = performance.now(), range = 60;\r\n        if (TestFlag) {\r\n            if (TimeList.length < range) {\r\n                TimeList.push(end - start);\r\n            }\r\n            else {\r\n                let total = TimeList.reduce((t, cur) => {\r\n                    return t + cur;\r\n                });\r\n                console.log(total / range);\r\n                TestFlag = false;\r\n                TimeList.length = 0;\r\n            }\r\n        }\r\n        // console.log(collisions);\r\n        return collisions;\r\n    }\r\n    // --------------------------------------------- 粗阶段 --------------------------------\r\n    /**\r\n     * 粗检测阶段\r\n     * @param bodies 所有刚体\r\n     */\r\n    broadPhase(bodies) {\r\n        return this.sweepAndPrune(bodies);\r\n    }\r\n    /**\r\n     * 查看刚体是否出了可视区\r\n     * @param bound\r\n     */\r\n    isBodyOutWindow(bound) {\r\n        return bound.max.y < 0 || bound.min.x > this.engine.width || bound.min.y > this.engine.height || bound.max.x < 0;\r\n    }\r\n    /**\r\n     * 查看两个刚体是否允许发生碰撞\r\n     * @param bodyA\r\n     * @param bodyB\r\n     */\r\n    canCollide(bodyA, bodyB) {\r\n        // 若bodies[i]的碰撞过滤器过滤了bodies[i]，不进行检测\r\n        if (!bodyA.methods.filter(bodyA.mask, bodyB.mask) || !bodyB.methods.filter(bodyB.mask, bodyA.mask))\r\n            return false;\r\n        // 若刚体已经移出可视区了，跳过\r\n        if (this.isBodyOutWindow(bodyA.bound) || this.isBodyOutWindow(bodyB.bound))\r\n            return false;\r\n        // 两个静态刚体 ，跳过\r\n        if ((bodyA.static || bodyA.kinetic) && (bodyB.static || bodyB.kinetic))\r\n            return false;\r\n        // 两个睡眠刚体，跳过\r\n        if (bodyA.sleeping && bodyB.sleeping)\r\n            return false;\r\n        return true;\r\n    }\r\n    /**\r\n     * Sweep & Prune\r\n     * @param bodies\r\n     */\r\n    sweepAndPrune(bodies) {\r\n        let broadPhasePairList = [], i, j, len = bodies.length;\r\n        // 包围盒在x轴上排序 （直接插入排序）\r\n        // 第一次排序时包围盒趋向于无序，这时复杂度为O(n^2) \r\n        // 而因为时间相干性，在之后的每帧包围盒趋向有序，此时直接插入排序效率最高，为O(nlogn)\r\n        util_1.Util.insertSort(bodies, (bodyA, bodyB) => bodyA.bound.min.x - bodyB.bound.min.x);\r\n        for (i = 0; i < len; i++) {\r\n            for (j = i + 1; j < len; j++) {\r\n                let boundA = bodies[i].bound, boundB = bodies[j].bound;\r\n                // 已经不可能发生碰撞了，跳出循环\r\n                if (boundA.max.x < boundB.min.x)\r\n                    break;\r\n                // 若A，B不可以发生碰撞，返回\r\n                if (!this.canCollide(bodies[i], bodies[j]))\r\n                    continue;\r\n                // 一个个对比包围盒是否相交\r\n                if (boundA.min.y < boundB.max.y && boundB.min.y < boundA.max.y) {\r\n                    broadPhasePairList.push({\r\n                        bodyA: bodies[i],\r\n                        bodyB: bodies[j],\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return broadPhasePairList;\r\n    }\r\n    // --------------------------------------------- 细阶段 --------------------------------\r\n    /**\r\n     * 细检测阶段\r\n     * @param broadPhasePairList 粗检查生成的潜在碰撞对\r\n     */\r\n    narrowPhase(broadPhasePairList) {\r\n        let collisions = [], prevCollision = null, pair, partsA, partsB, partA, partB, i, j, k;\r\n        for (i = 0; i < broadPhasePairList.length; i++) {\r\n            pair = broadPhasePairList[i];\r\n            partsA = pair.bodyA.parts;\r\n            partsB = pair.bodyB.parts;\r\n            for (j = 0; j < partsA.length; j++) {\r\n                partA = partsA[j];\r\n                for (k = 0; k < partsB.length; k++) {\r\n                    partB = partsB[k];\r\n                    // 两个子图形包围盒不相交，跳过\r\n                    if (!partA.bound.isIntersect(partB.bound))\r\n                        continue;\r\n                    prevCollision = this.getPrevCollision(partA, partB, this.engine.manifoldTable);\r\n                    // A,B皆为圆形\r\n                    if (partA.type === body_1.bodyType.circle && partB.type === body_1.bodyType.circle) {\r\n                        collisions.push(this.SAT.circleCollideCircle(partA, partB, prevCollision));\r\n                    }\r\n                    // A为多边形，B为圆形\r\n                    else if (partA.type === body_1.bodyType.polygon && partB.type === body_1.bodyType.circle) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                    // A为圆形，B为多边形\r\n                    else if (partA.type === body_1.bodyType.circle && partB.type === body_1.bodyType.polygon) {\r\n                        collisions.push(this.SAT.polygonCollideBody(partB, partA, prevCollision));\r\n                    }\r\n                    // A,B皆为多边形\r\n                    else {\r\n                        collisions.push(this.SAT.polygonCollideBody(partA, partB, prevCollision));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return collisions;\r\n    }\r\n    /**\r\n     * 获取上一次碰撞\r\n     * @param partA\r\n     * @param partB\r\n     * @param manifoldTable\r\n     */\r\n    getPrevCollision(partA, partB, manifoldTable) {\r\n        let id = util_1.Util.compositeId(partA.id, partB.id), manifold = manifoldTable.table[id];\r\n        if (this.engine.manifoldTable.enableCache && manifold && manifold.isActive) {\r\n            return manifold.collision;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\nexports.Detector = Detector;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2RldGVjdG9yLnRzPzhiODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsc0NBQXNDO0FBQ3RDLHNDQUE4QztBQUs5QyxzQ0FBNEI7QUFHNUIsSUFBSSxRQUFRLEdBQUcsRUFBRSxFQUNiLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFFckIsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQyxJQUFHLElBQUksRUFBRTtJQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7Q0FDTjtBQWNELE1BQWEsUUFBUTtJQUtqQixZQUFZLE1BQWMsRUFBRSxHQUFjO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxNQUFjO1FBQ2pCLElBQUksZUFBaUMsRUFDakMsVUFBdUIsQ0FBQztRQUU1QixRQUFRO1FBQ1IsZUFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFMUMsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTlCLFFBQVE7UUFDUixVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUUvQyxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLEVBQ3ZCLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFZixJQUFHLFFBQVEsRUFBRTtZQUNULElBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUU7Z0JBQ3hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxH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dEY7b0JBQ0QsYUFBYTt5QkFDUixJQUFHLEtBQUssQ0FBQyxJQUFJLEtBQUssZUFBUSxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGVBQVEsQ0FBQyxPQUFPLEVBQUU7d0JBQ3ZFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBVSxLQUFLLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7cUJBQ3RGO29CQUNELFdBQVc7eUJBQ047d0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFVLEtBQUssRUFBVyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztxQkFDL0Y7aUJBQ0o7YUFDSjtTQUNKO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZ0JBQWdCLENBQUMsS0FBVyxFQUFFLEtBQVcsRUFBRSxhQUE0QjtRQUNuRSxJQUFJLEVBQUUsR0FBRyxXQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUN6QyxRQUFRLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV2QyxJQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUN2RSxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUM7U0FDN0I7YUFDSTtZQUNELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0NBQ0o7QUF0TUQsNEJBc01DIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW5naW5lLCBFbmdpbmVPcHQgfSBmcm9tIFwiLi4vY29yZS9lbmdpbmVcIjtcclxuaW1wb3J0IHsgQm91bmQgfSBmcm9tIFwiLi4vY29tbW9uL2JvdW5kXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQm9keSwgYm9keVR5cGUgfSBmcm9tIFwiLi4vYm9keS9ib2R5XCI7XHJcbmltcG9ydCB7IENvbGxpc2lvbiwgTWFuaWZvbGQgfSBmcm9tIFwiLi9tYW5pZm9sZFwiO1xyXG5pbXBvcnQgeyBNYW5pZm9sZFRhYmxlIH0gZnJvbSBcIi4vbWFuaWZvbGRUYWJsZVwiO1xyXG5pbXBvcnQgeyBDaXJjbGUgfSBmcm9tIFwiLi4vYm9keS9jaXJjbGVcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuLi9ib2R5L3BvbHlnb25cIjtcclxuaW1wb3J0IHsgU0FUIH0gZnJvbSBcIi4vc2F0XCI7XHJcblxyXG5cclxubGV0IFRpbWVMaXN0ID0gW10sXHJcbiAgICBUZXN0RmxhZyA9IGZhbHNlO1xyXG5cclxubGV0IHRlc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdCcpO1xyXG5cclxuaWYodGVzdCkge1xyXG4gICAgdGVzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBUZXN0RmxhZyA9IHRydWU7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDnorDmkp7mo4DmtYtcclxuICovXHJcblxyXG5cclxuLy8g57KX5qOA5rWL6Zi25q6155Sf5oiQ55qE57uT5p6c5a+557uT5p6EXHJcbmV4cG9ydCB0eXBlIGJyb2FkUGhhc2VQYWlyID0ge1xyXG4gICAgYm9keUE6IEJvZHk7XHJcbiAgICBib2R5QjogQm9keTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZXRlY3RvciB7XHJcbiAgICBwcml2YXRlIGVuZ2luZTogRW5naW5lO1xyXG4gICAgLy8g5YiG56a76L205rWL6K+VXHJcbiAgICBwcml2YXRlIFNBVDogU0FUO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVuZ2luZTogRW5naW5lLCBvcHQ6IEVuZ2luZU9wdCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lID0gZW5naW5lO1xyXG4gICAgICAgIHRoaXMuU0FUID0gbmV3IFNBVChvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56Kw5pKe5qOA5rWL5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gYm9kaWVzIFxyXG4gICAgICovXHJcbiAgICBkZXRlY3QoYm9kaWVzOiBCb2R5W10pOiBDb2xsaXNpb25bXSB7XHJcbiAgICAgICAgbGV0IGJyb2FkUGhhc2VQYWlyczogYnJvYWRQaGFzZVBhaXJbXSxcclxuICAgICAgICAgICAgY29sbGlzaW9uczogQ29sbGlzaW9uW107XHJcblxyXG4gICAgICAgIC8vIOeyl+mYtuauteajgOa1i1xyXG4gICAgICAgIGJyb2FkUGhhc2VQYWlycyA9IHRoaXMuYnJvYWRQaGFzZShib2RpZXMpO1xyXG5cclxuICAgICAgICBsZXQgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHJcbiAgICAgICAgLy8g57uG6Zi25q615qOA5rWLXHJcbiAgICAgICAgY29sbGlzaW9ucyA9IHRoaXMubmFycm93UGhhc2UoYnJvYWRQaGFzZVBhaXJzKTtcclxuXHJcbiAgICAgICAgbGV0IGVuZCA9IHBlcmZvcm1hbmNlLm5vdygpLFxyXG4gICAgICAgICAgICByYW5nZSA9IDYwO1xyXG5cclxuICAgICAgICBpZihUZXN0RmxhZykge1xyXG4gICAgICAgICAgICBpZihUaW1lTGlzdC5sZW5ndGggPCByYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgVGltZUxpc3QucHVzaChlbmQgLSBzdGFydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG90YWwgPSBUaW1lTGlzdC5yZWR1Y2UoKHQsIGN1cikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICsgY3VyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codG90YWwgLyByYW5nZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgVGVzdEZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFRpbWVMaXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbGxpc2lvbnMpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29sbGlzaW9ucztcclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0g57KX6Zi25q61IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnspfmo4DmtYvpmLbmrrVcclxuICAgICAqIEBwYXJhbSBib2RpZXMg5omA5pyJ5Yia5L2TXHJcbiAgICAgKi9cclxuICAgIGJyb2FkUGhhc2UoYm9kaWVzOiBCb2R5W10pOiBicm9hZFBoYXNlUGFpcltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zd2VlcEFuZFBydW5lKGJvZGllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvliJrkvZPmmK/lkKblh7rkuoblj6/op4bljLpcclxuICAgICAqIEBwYXJhbSBib3VuZCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0JvZHlPdXRXaW5kb3coYm91bmQ6IEJvdW5kKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGJvdW5kLm1heC55IDwgMCB8fCBib3VuZC5taW4ueCA+IHRoaXMuZW5naW5lLndpZHRoIHx8IGJvdW5kLm1pbi55ID4gdGhpcy5lbmdpbmUuaGVpZ2h0IHx8IGJvdW5kLm1heC54IDwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeeci+S4pOS4quWImuS9k+aYr+WQpuWFgeiuuOWPkeeUn+eisOaSnlxyXG4gICAgICogQHBhcmFtIGJvZHlBIFxyXG4gICAgICogQHBhcmFtIGJvZHlCIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbkNvbGxpZGUoYm9keUE6IEJvZHksIGJvZHlCOiBCb2R5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8g6IulYm9kaWVzW2ld55qE56Kw5pKe6L+H5ruk5Zmo6L+H5ruk5LqGYm9kaWVzW2ld77yM5LiN6L+b6KGM5qOA5rWLXHJcbiAgICAgICAgaWYoIWJvZHlBLm1ldGhvZHMuZmlsdGVyKGJvZHlBLm1hc2ssIGJvZHlCLm1hc2spIHx8ICFib2R5Qi5tZXRob2RzLmZpbHRlcihib2R5Qi5tYXNrLCBib2R5QS5tYXNrKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOiLpeWImuS9k+W3sue7j+enu+WHuuWPr+inhuWMuuS6hu+8jOi3s+i/h1xyXG4gICAgICAgIGlmKHRoaXMuaXNCb2R5T3V0V2luZG93KGJvZHlBLmJvdW5kKSB8fCB0aGlzLmlzQm9keU91dFdpbmRvdyhib2R5Qi5ib3VuZCkpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8g5Lik5Liq6Z2Z5oCB5Yia5L2TIO+8jOi3s+i/h1xyXG4gICAgICAgIGlmKChib2R5QS5zdGF0aWMgfHwgYm9keUEua2luZXRpYykgJiYgKGJvZHlCLnN0YXRpYyB8fCBib2R5Qi5raW5ldGljKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAvLyDkuKTkuKrnnaHnnKDliJrkvZPvvIzot7Pov4dcclxuICAgICAgICBpZihib2R5QS5zbGVlcGluZyAmJiBib2R5Qi5zbGVlcGluZykgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3ZWVwICYgUHJ1bmVcclxuICAgICAqIEBwYXJhbSBib2RpZXMgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3dlZXBBbmRQcnVuZShib2RpZXM6IEJvZHlbXSk6IGJyb2FkUGhhc2VQYWlyW10ge1xyXG4gICAgICAgIGxldCBicm9hZFBoYXNlUGFpckxpc3Q6IGJyb2FkUGhhc2VQYWlyW10gPSBbXSxcclxuICAgICAgICAgICAgaSwgaiwgbGVuID0gYm9kaWVzLmxlbmd0aDtcclxuICAgICAgICBcclxuICAgICAgICAvLyDljIXlm7Tnm5LlnKh46L205LiK5o6S5bqPIO+8iOebtOaOpeaPkuWFpeaOkuW6j++8iVxyXG4gICAgICAgIC8vIOesrOS4gOasoeaOkuW6j+aXtuWMheWbtOebkui2i+WQkeS6juaXoOW6j++8jOi/meaXtuWkjeadguW6puS4uk8obl4yKSBcclxuICAgICAgICAvLyDogIzlm6DkuLrml7bpl7Tnm7jlubLmgKfvvIzlnKjkuYvlkI7nmoTmr4/luKfljIXlm7Tnm5LotovlkJHmnInluo/vvIzmraTml7bnm7TmjqXmj5LlhaXmjpLluo/mlYjnjofmnIDpq5jvvIzkuLpPKG5sb2duKVxyXG4gICAgICAgIFV0aWwuaW5zZXJ0U29ydDxCb2R5Pihib2RpZXMsIChib2R5QSwgYm9keUIpID0+IGJvZHlBLmJvdW5kLm1pbi54IC0gYm9keUIuYm91bmQubWluLngpO1xyXG5cclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3IoaiA9IGkgKyAxOyBqIDwgbGVuOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBib3VuZEEgPSBib2RpZXNbaV0uYm91bmQsXHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRCID0gYm9kaWVzW2pdLmJvdW5kO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOW3sue7j+S4jeWPr+iDveWPkeeUn+eisOaSnuS6hu+8jOi3s+WHuuW+queOr1xyXG4gICAgICAgICAgICAgICAgaWYoYm91bmRBLm1heC54IDwgYm91bmRCLm1pbi54KSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoi6VB77yMQuS4jeWPr+S7peWPkeeUn+eisOaSnu+8jOi/lOWbnlxyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuY2FuQ29sbGlkZShib2RpZXNbaV0sIGJvZGllc1tqXSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOS4gOS4quS4quWvueavlOWMheWbtOebkuaYr+WQpuebuOS6pFxyXG4gICAgICAgICAgICAgICAgaWYoYm91bmRBLm1pbi55IDwgYm91bmRCLm1heC55ICYmIGJvdW5kQi5taW4ueSA8IGJvdW5kQS5tYXgueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyb2FkUGhhc2VQYWlyTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUE6IGJvZGllc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUI6IGJvZGllc1tqXSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJyb2FkUGhhc2VQYWlyTGlzdDtcclxuICAgIH0gXHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOe7humYtuautSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uG5qOA5rWL6Zi25q61XHJcbiAgICAgKiBAcGFyYW0gYnJvYWRQaGFzZVBhaXJMaXN0IOeyl+ajgOafpeeUn+aIkOeahOa9nOWcqOeisOaSnuWvuVxyXG4gICAgICovXHJcbiAgICBuYXJyb3dQaGFzZShicm9hZFBoYXNlUGFpckxpc3Q6IGJyb2FkUGhhc2VQYWlyW10pOiBDb2xsaXNpb25bXSB7XHJcbiAgICAgICAgbGV0IGNvbGxpc2lvbnMgPSBbXSxcclxuICAgICAgICAgICAgcHJldkNvbGxpc2lvbiA9IG51bGwsXHJcbiAgICAgICAgICAgIHBhaXI6IGJyb2FkUGhhc2VQYWlyLFxyXG4gICAgICAgICAgICBwYXJ0c0E6IEJvZHlbXSxcclxuICAgICAgICAgICAgcGFydHNCOiBCb2R5W10sXHJcbiAgICAgICAgICAgIHBhcnRBOiBCb2R5LFxyXG4gICAgICAgICAgICBwYXJ0QjogQm9keSxcclxuICAgICAgICAgICAgaSwgaiwgaztcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgYnJvYWRQaGFzZVBhaXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHBhaXIgPSBicm9hZFBoYXNlUGFpckxpc3RbaV07XHJcbiAgICAgICAgICAgIHBhcnRzQSA9IHBhaXIuYm9keUEucGFydHM7XHJcbiAgICAgICAgICAgIHBhcnRzQiA9IHBhaXIuYm9keUIucGFydHM7XHJcblxyXG4gICAgICAgICAgICBmb3IoaiA9IDA7IGogPCBwYXJ0c0EubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHBhcnRBID0gcGFydHNBW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihrID0gMDsgayA8IHBhcnRzQi5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRCID0gcGFydHNCW2tdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDkuKTkuKrlrZDlm77lvaLljIXlm7Tnm5LkuI3nm7jkuqTvvIzot7Pov4dcclxuICAgICAgICAgICAgICAgICAgICBpZighcGFydEEuYm91bmQuaXNJbnRlcnNlY3QocGFydEIuYm91bmQpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkNvbGxpc2lvbiA9IHRoaXMuZ2V0UHJldkNvbGxpc2lvbihwYXJ0QSwgcGFydEIsIHRoaXMuZW5naW5lLm1hbmlmb2xkVGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBLELnmobkuLrlnIblvaJcclxuICAgICAgICAgICAgICAgICAgICBpZihwYXJ0QS50eXBlID09PSBib2R5VHlwZS5jaXJjbGUgJiYgcGFydEIudHlwZSA9PT0gYm9keVR5cGUuY2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnMucHVzaCh0aGlzLlNBVC5jaXJjbGVDb2xsaWRlQ2lyY2xlKDxDaXJjbGU+cGFydEEsIDxDaXJjbGU+cGFydEIsIHByZXZDb2xsaXNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQeS4uuWkmui+ueW9ou+8jELkuLrlnIblvaJcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhcnRBLnR5cGUgPT09IGJvZHlUeXBlLnBvbHlnb24gJiYgcGFydEIudHlwZSA9PT0gYm9keVR5cGUuY2lyY2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnMucHVzaCh0aGlzLlNBVC5wb2x5Z29uQ29sbGlkZUJvZHkoPFBvbHlnb24+cGFydEEsIHBhcnRCLCBwcmV2Q29sbGlzaW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEHkuLrlnIblvaLvvIxC5Li65aSa6L655b2iXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwYXJ0QS50eXBlID09PSBib2R5VHlwZS5jaXJjbGUgJiYgcGFydEIudHlwZSA9PT0gYm9keVR5cGUucG9seWdvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25zLnB1c2godGhpcy5TQVQucG9seWdvbkNvbGxpZGVCb2R5KDxQb2x5Z29uPnBhcnRCLCBwYXJ0QSwgcHJldkNvbGxpc2lvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBBLELnmobkuLrlpJrovrnlvaJcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKHRoaXMuU0FULnBvbHlnb25Db2xsaWRlQm9keSg8UG9seWdvbj5wYXJ0QSwgPFBvbHlnb24+cGFydEIsIHByZXZDb2xsaXNpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb2xsaXNpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiK5LiA5qyh56Kw5pKeXHJcbiAgICAgKiBAcGFyYW0gcGFydEEgXHJcbiAgICAgKiBAcGFyYW0gcGFydEIgXHJcbiAgICAgKiBAcGFyYW0gbWFuaWZvbGRUYWJsZSBcclxuICAgICAqL1xyXG4gICAgZ2V0UHJldkNvbGxpc2lvbihwYXJ0QTogQm9keSwgcGFydEI6IEJvZHksIG1hbmlmb2xkVGFibGU6IE1hbmlmb2xkVGFibGUpOiBDb2xsaXNpb24ge1xyXG4gICAgICAgIGxldCBpZCA9IFV0aWwuY29tcG9zaXRlSWQocGFydEEuaWQsIHBhcnRCLmlkKSxcclxuICAgICAgICAgICAgbWFuaWZvbGQgPSBtYW5pZm9sZFRhYmxlLnRhYmxlW2lkXTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5lbmdpbmUubWFuaWZvbGRUYWJsZS5lbmFibGVDYWNoZSAmJiBtYW5pZm9sZCAmJiBtYW5pZm9sZC5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFuaWZvbGQuY29sbGlzaW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.SAT = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst vertices_1 = __webpack_require__(3);\r\nconst arcs_1 = __webpack_require__(6);\r\nconst manifold_1 = __webpack_require__(7);\r\nconst contact_1 = __webpack_require__(4);\r\nconst util_1 = __webpack_require__(1);\r\nconst axesFilter_1 = __webpack_require__(16);\r\nconst vClip_1 = __webpack_require__(17);\r\nconst vClosest_1 = __webpack_require__(18);\r\nconst circle_1 = __webpack_require__(8);\r\nconst body_1 = __webpack_require__(2);\r\n/**\r\n * 分离轴算法\r\n * 参考：https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\r\n */\r\nclass SAT {\r\n    constructor(opt) {\r\n        // 是否开启SAT加速\r\n        this.enableSATBoost = true;\r\n        this.reuseCollisionThreshold = 0.05;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 多边形 - 多边形或圆形（geometry）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param prevCollision\r\n     */\r\n    polygonCollideBody(poly, geometry, prevCollision) {\r\n        let canReuse = this.canReuseCollision(poly, geometry, prevCollision), collision = null, minOverlap, axes;\r\n        // 若能用缓存，使用缓存\r\n        if (canReuse) {\r\n            collision = prevCollision;\r\n            minOverlap = this.detect(poly, geometry, [collision.axis], collision.oppositeClosestIndex);\r\n            if (minOverlap === null) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            let prevContacts = collision.contacts;\r\n            for (let i = 0; i < prevContacts.length; i++) {\r\n                prevContacts[i].depth = minOverlap.value;\r\n            }\r\n        }\r\n        // 若不能用缓存，则进行完整的测试\r\n        else {\r\n            collision = new manifold_1.Collision();\r\n            axes = this.getTestAxes(poly, geometry);\r\n            minOverlap = this.detect(poly, geometry, axes);\r\n            // 若发现两个刚体投影的重叠部分是负的，即表示它们没相交\r\n            if (minOverlap === null) {\r\n                collision.collide = false;\r\n                return collision;\r\n            }\r\n            let axis = minOverlap.axis, normal = this.reviseNormal(minOverlap.axis.value, poly, geometry);\r\n            // 此处collision.axis与minOverlap.axis不能共享一个对象，因为collision.axis是根据不同碰撞而变化的，而minOverlap.axis不能变\r\n            collision.axis.value = axis.value;\r\n            collision.axis.supportVertexIndex = axis.supportVertexIndex;\r\n            collision.axis.oppositeVertexIndex = axis.oppositeVertexIndex;\r\n            collision.axis.opposite = axis.opposite;\r\n            collision.axis.origin = axis.origin;\r\n            collision.axis.edge = axis.edge;\r\n            collision.oppositeClosestIndex = minOverlap.oppositeClosestIndex;\r\n            collision.normal = normal;\r\n            collision.tangent = normal.nor();\r\n            collision.partA = poly;\r\n            collision.partB = geometry;\r\n            collision.bodyA = poly.parent || poly;\r\n            collision.bodyB = geometry.parent || geometry;\r\n            // 计算碰撞点\r\n            collision.contacts = this.findContacts(geometry, minOverlap);\r\n        }\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * 圆形 - 圆形\r\n     * @param circleA\r\n     * @param circleB\r\n     * @param prevCollision\r\n     */\r\n    circleCollideCircle(circleA, circleB, prevCollision) {\r\n        let axis = circleA.position.sub(circleB.position, vector_1._tempVector1), overlaps = (circleA.radius + circleB.radius) - axis.len(), collision = new manifold_1.Collision(), normal;\r\n        // 两圆心距离比两圆半径和要大，即没有发生碰撞\r\n        if (overlaps < 0) {\r\n            collision.collide = false;\r\n            return collision;\r\n        }\r\n        normal = this.reviseNormal(axis, circleA, circleB).nol();\r\n        collision.axis = null;\r\n        collision.partA = circleA;\r\n        collision.partB = circleB;\r\n        collision.bodyA = circleA.parent || circleA;\r\n        collision.bodyB = circleB.parent || circleB;\r\n        collision.normal = normal;\r\n        collision.tangent = normal.nor();\r\n        let position = circleA.position.loc(normal.inv(vector_1._tempVector1), circleA.radius - overlaps / 2);\r\n        collision.contacts = [new contact_1.Contact(position, overlaps)];\r\n        collision.collide = true;\r\n        return collision;\r\n    }\r\n    /**\r\n     * --------------------------------------------------------------------------------------------------\r\n     */\r\n    /**\r\n     * 进行分离轴检测\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axes\r\n     * @param prevOppositeClosestIndex\r\n     */\r\n    detect(poly, geometry, axes, prevOppositeClosestIndex) {\r\n        let minOverlap = Infinity, oppositeClosestIndex, getOverlaps = this.enableSATBoost ? this.selectiveProjectionMethod : this.fullProjectionMethod, overlaps, i, index;\r\n        // 将两个刚体投影到所有轴上\r\n        for (i = 0; i < axes.length; i++) {\r\n            if (axes[i] === null) {\r\n                continue;\r\n            }\r\n            overlaps = getOverlaps(poly, geometry, axes[i], prevOppositeClosestIndex);\r\n            if (overlaps.depth < 0) {\r\n                return null;\r\n            }\r\n            if (overlaps.depth < minOverlap) {\r\n                minOverlap = overlaps.depth;\r\n                oppositeClosestIndex = overlaps.oppositeClosestIndex;\r\n                index = i;\r\n            }\r\n        }\r\n        return {\r\n            value: minOverlap,\r\n            oppositeClosestIndex,\r\n            axis: axes[index],\r\n        };\r\n    }\r\n    /**\r\n     * 获取测试轴\r\n     * @param poly\r\n     * @param geometry\r\n     */\r\n    getTestAxes(poly, geometry) {\r\n        let axes, circleAxis;\r\n        // 若geometry是圆形，计算一条动态轴\r\n        if (geometry.type === body_1.bodyType.circle) {\r\n            circleAxis = arcs_1.Arcs.getAxes(geometry, poly);\r\n        }\r\n        // 如果开启了加速功能，首先进行轴过滤\r\n        if (this.enableSATBoost) {\r\n            axes = axesFilter_1.axesFilter(poly, geometry);\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n        }\r\n        else {\r\n            let opposite = geometry.type === body_1.bodyType.circle ? geometry : geometry.vertexList, oppositeAxes, i;\r\n            axes = [];\r\n            for (i = 0; i < poly.axes.length; i++) {\r\n                if (poly.axes[i]) {\r\n                    poly.axes[i].opposite = opposite;\r\n                    axes.push(poly.axes[i]);\r\n                }\r\n            }\r\n            if (circleAxis) {\r\n                axes.push(circleAxis);\r\n            }\r\n            else {\r\n                oppositeAxes = geometry.axes;\r\n                for (i = 0; i < oppositeAxes.length; i++) {\r\n                    if (oppositeAxes[i]) {\r\n                        oppositeAxes[i].opposite = poly.vertexList;\r\n                        axes.push(oppositeAxes[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return axes;\r\n    }\r\n    /**\r\n     * 全投影法（传统）\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     */\r\n    fullProjectionMethod(poly, geometry, axis, prevOppositeClosestIndex) {\r\n        let axisVector = axis.value, partA = poly.vertexList, partB = geometry.type === body_1.bodyType.polygon ? geometry.vertexList : geometry, projection1, projection2;\r\n        // 若geometry是多边形\r\n        if (Array.isArray(partB)) {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = vertices_1.Vertices.projection(partB, axisVector);\r\n        }\r\n        // 是圆形\r\n        else {\r\n            projection1 = vertices_1.Vertices.projection(partA, axisVector),\r\n                projection2 = arcs_1.Arcs.projection(partB, axisVector);\r\n        }\r\n        return {\r\n            depth: Math.min(projection1.max - projection2.min, projection2.max - projection1.min),\r\n            oppositeClosestIndex: -1\r\n        };\r\n    }\r\n    /**\r\n     * 选择投影法\r\n     * @param poly\r\n     * @param geometry\r\n     * @param axis\r\n     * @param oppositeClosestIndex\r\n     */\r\n    selectiveProjectionMethod(poly, geometry, axis, oppositeClosestIndex) {\r\n        let axisVector = axis.value, opposite = axis.opposite;\r\n        // 该轴是圆形和多边形的动态轴\r\n        if (opposite === null) {\r\n            let projection1 = vertices_1.Vertices.projection(poly.vertexList, axisVector), projection2 = arcs_1.Arcs.projection(geometry, axisVector);\r\n            return {\r\n                depth: Math.min(projection1.max - projection2.min, projection2.max - projection1.min),\r\n                oppositeClosestIndex\r\n            };\r\n        }\r\n        let supportVertex = axis.origin[axis.supportVertexIndex], supportProjection = supportVertex.dot(axisVector);\r\n        // 对面是圆形\r\n        if (opposite instanceof circle_1.Circle) {\r\n            let circleProjection = arcs_1.Arcs.projection(opposite, axisVector);\r\n            return {\r\n                depth: supportProjection - circleProjection.min,\r\n                oppositeClosestIndex\r\n            };\r\n        }\r\n        let maxOverlap = -Infinity;\r\n        // 若最近点没有缓存，执行爬山法重新计算最近点\r\n        if (oppositeClosestIndex === undefined) {\r\n            let oppositeIndex = axis.oppositeVertexIndex, prev, next, seekPrev = true, seekNext = true, lastPrevPro, lastNextPro, projection;\r\n            projection = opposite[oppositeIndex].dot(axisVector);\r\n            prev = next = oppositeIndex;\r\n            lastPrevPro = lastNextPro = projection;\r\n            oppositeClosestIndex = oppositeIndex;\r\n            do {\r\n                if (!seekPrev && !seekNext) {\r\n                    break;\r\n                }\r\n                if (seekPrev) {\r\n                    prev = prev > 0 ? prev - 1 : opposite.length - 1;\r\n                    projection = opposite[prev].dot(axisVector);\r\n                    if (projection > lastPrevPro) {\r\n                        seekPrev = false;\r\n                        prev = (prev + 1) % opposite.length;\r\n                    }\r\n                    else {\r\n                        oppositeClosestIndex = prev;\r\n                        lastPrevPro = projection;\r\n                    }\r\n                }\r\n                if (seekNext) {\r\n                    next = (next + 1) % opposite.length;\r\n                    projection = opposite[next].dot(axisVector);\r\n                    if (projection > lastNextPro) {\r\n                        seekNext = false;\r\n                        next = next > 0 ? next - 1 : opposite.length - 1;\r\n                    }\r\n                    else {\r\n                        oppositeClosestIndex = next;\r\n                        lastNextPro = projection;\r\n                    }\r\n                }\r\n            } while (prev !== next);\r\n        }\r\n        maxOverlap = supportProjection - opposite[oppositeClosestIndex].dot(axisVector);\r\n        return {\r\n            depth: maxOverlap,\r\n            oppositeClosestIndex\r\n        };\r\n    }\r\n    /**\r\n     * 修正碰撞法线方向，使其始终背向刚体A\r\n     * @param normal 要修正的法线\r\n     * @param bodyA 刚体A\r\n     * @param bodyB 刚体B\r\n     */\r\n    reviseNormal(normal, bodyA, bodyB) {\r\n        if (normal.dot(bodyB.position.sub(bodyA.position, vector_1._tempVector1)) > 0) {\r\n            return normal.inv();\r\n        }\r\n        return normal;\r\n    }\r\n    /**\r\n     * 查看碰撞缓存是否可以复用\r\n     * @param bodyA\r\n     * @param bodyB\r\n     * @param prevCollision 上一次的碰撞\r\n     */\r\n    canReuseCollision(bodyA, bodyB, prevCollision) {\r\n        // 若上次碰撞的缓存存在\r\n        if (prevCollision) {\r\n            let parentA = bodyA.parent || bodyA, parentB = bodyB.parent || bodyB, motion = Math.sqrt(parentA.motion + parentB.motion);\r\n            // 若上次碰撞判定为真，且当前碰撞对刚体趋于静止，可复用\r\n            return prevCollision.collide && motion < this.reuseCollisionThreshold;\r\n        }\r\n        // 碰撞缓存不存在，直接判定无法复用\r\n        return false;\r\n    }\r\n    /**\r\n     * 求解碰撞点\r\n     * @param geometry\r\n     * @param minOverlap\r\n     * @param prevContacts\r\n     */\r\n    findContacts(geometry, minOverlap) {\r\n        if (geometry.type === body_1.bodyType.polygon) {\r\n            if (this.enableSATBoost) {\r\n                return vClip_1.vClip(minOverlap);\r\n            }\r\n            else {\r\n                return vClosest_1.vClosest(minOverlap);\r\n            }\r\n        }\r\n        else {\r\n            let vertex = geometry.position.loc(minOverlap.axis.value, geometry.radius - minOverlap.value / 2);\r\n            return [new contact_1.Contact(vertex, minOverlap.value)];\r\n        }\r\n    }\r\n}\r\nexports.SAT = SAT;\r\n;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.axesFilter = void 0;\r\nconst body_1 = __webpack_require__(2);\r\nconst vector_1 = __webpack_require__(0);\r\nfunction axesFilter(poly, geometry) {\r\n    let centroidVector = geometry.position.sub(poly.position, vector_1._tempVector1), axesA, axesB, supportIndexA, supportIndexB, i, res = [];\r\n    axesA = findClosestAxes(poly, geometry, centroidVector);\r\n    supportIndexA = axesA[0].supportVertexIndex;\r\n    if (geometry.type === body_1.bodyType.polygon) {\r\n        axesB = findClosestAxes(geometry, poly, centroidVector.inv(centroidVector));\r\n        supportIndexB = axesB[0].supportVertexIndex;\r\n    }\r\n    for (i = 0; i < axesA.length; i++) {\r\n        axesA[i].oppositeVertexIndex = supportIndexB;\r\n        res.push(axesA[i]);\r\n    }\r\n    if (axesB) {\r\n        for (i = 0; i < axesB.length; i++) {\r\n            axesB[i].oppositeVertexIndex = supportIndexA;\r\n            res.push(axesB[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\nexports.axesFilter = axesFilter;\r\n/**\r\n * @param poly\r\n * @param geometry\r\n * @param centroidVector\r\n * @param oppositeCentroid\r\n */\r\nfunction findClosestAxes(poly, geometry, centroidVector) {\r\n    let v = poly.vertexList, axes = poly.axes, vertex, axis, distance, minDistance = Infinity, dot, lastDot = -1, index = 0, opposite = geometry.type === body_1.bodyType.polygon ? geometry.vertexList : geometry, oppositeCentroid = geometry.position, res = [];\r\n    if (axes[axes.length - 1]) {\r\n        lastDot = axes[axes.length - 1].value.dot(centroidVector);\r\n    }\r\n    for (let i = 0; i < v.length; i++) {\r\n        vertex = v[i];\r\n        axis = axes[i];\r\n        dot = axis ? axis.value.dot(centroidVector) : -1;\r\n        if (dot <= 0 && lastDot <= 0) {\r\n            continue;\r\n        }\r\n        distance = (vertex.x - oppositeCentroid.x) ** 2 + (vertex.y - oppositeCentroid.y) ** 2;\r\n        if (distance < minDistance) {\r\n            minDistance = distance;\r\n            index = i;\r\n        }\r\n        lastDot = dot;\r\n    }\r\n    let prev = index > 0 ? index - 1 : v.length - 1, prevAxis = axes[prev], indexAxis = axes[index];\r\n    if (prevAxis) {\r\n        res.push(prevAxis);\r\n    }\r\n    if (indexAxis) {\r\n        res.push(indexAxis);\r\n    }\r\n    for (let i = 0; i < res.length; i++) {\r\n        res[i].supportVertexIndex = index;\r\n        res[i].opposite = opposite;\r\n        res[i].origin = poly.vertexList;\r\n    }\r\n    return res;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL2F4ZXNGaWx0ZXIudHM/NGRkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBOEM7QUFJOUMsd0NBQWtGO0FBS2xGLFNBQWdCLFVBQVUsQ0FBQyxJQUFhLEVBQUUsUUFBYztJQUNwRCxJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLHFCQUFZLENBQUMsRUFDbkUsS0FBYSxFQUFFLEtBQWEsRUFDNUIsYUFBcUIsRUFBRSxhQUFxQixFQUM1QyxDQUFDLEVBQUUsR0FBRyxHQUFXLEVBQUUsQ0FBQztJQUV4QixLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEQsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztJQUU1QyxJQUFHLFFBQVEsQ0FBQyxJQUFJLEtBQUssZUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNuQyxLQUFLLEdBQUcsZUFBZSxDQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7S0FDL0M7SUFFRCxLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztRQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsSUFBRyxLQUFLLEVBQUU7UUFDTixLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztZQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RCO0tBQ0o7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUEzQkQsZ0NBMkJDO0FBR0Q7Ozs7O0dBS0c7QUFDSCxTQUFTLGVBQWUsQ0FBQyxJQUFhLEVBQUUsUUFBYyxFQUFFLGNBQXNCO0lBQzFFLElBQUksQ0FBQyxHQUFlLElBQUksQ0FBQyxVQUFVLEVBQy9CLElBQUksR0FBVyxJQUFJLENBQUMsSUFBSSxFQUN4QixNQUFjLEVBQ2QsSUFBVSxFQUNWLFFBQWdCLEVBQ2hCLFdBQVcsR0FBVyxRQUFRLEVBQzlCLEdBQVcsRUFDWCxPQUFPLEdBQVcsQ0FBQyxDQUFDLEVBQ3BCLEtBQUssR0FBVyxDQUFDLEVBQ2pCLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxLQUFLLGVBQVEsQ0FBQyxPQUFPLEVBQUMsQ0FBVyxRQUFTLENBQUMsVUFBVSxFQUFDLENBQVMsUUFBUSxFQUMvRixnQkFBZ0IsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUNwQyxHQUFHLEdBQVcsRUFBRSxDQUFDO0lBRXJCLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDN0Q7SUFFRCxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5QixNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVmLEdBQUcsR0FBRyxJQUFJLEVBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9DLElBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxFQUFFO1lBQ3pCLFNBQVM7U0FDWjtRQUVELFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkYsSUFBRyxRQUFRLEdBQUcsV0FBVyxFQUFFO1lBQ3ZCLFdBQVcsR0FBRyxRQUFRLENBQUM7WUFDdkIsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNiO1FBRUQsT0FBTyxHQUFHLEdBQUcsQ0FBQztLQUNqQjtJQUVELElBQUksSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3pDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3JCLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUIsSUFBRyxRQUFRLEVBQUU7UUFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsSUFBRyxTQUFTLEVBQUU7UUFDVixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDaEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNsQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDbkM7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5LCBib2R5VHlwZSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSBcIi4uL2JvZHkvY2lyY2xlXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi4vYm9keS9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IEF4aXMsIFZlcnRleExpc3QgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcbmltcG9ydCB7IFZlY3RvciwgX3RlbXBWZWN0b3IxLCBfdGVtcFZlY3RvcjIsIF90ZW1wVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL3ZlY3RvclwiO1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGF4ZXNGaWx0ZXIocG9seTogUG9seWdvbiwgZ2VvbWV0cnk6IEJvZHkpOiBBeGlzW10ge1xyXG4gICAgbGV0IGNlbnRyb2lkVmVjdG9yID0gZ2VvbWV0cnkucG9zaXRpb24uc3ViKHBvbHkucG9zaXRpb24sIF90ZW1wVmVjdG9yMSksXHJcbiAgICAgICAgYXhlc0E6IEF4aXNbXSwgYXhlc0I6IEF4aXNbXSxcclxuICAgICAgICBzdXBwb3J0SW5kZXhBOiBudW1iZXIsIHN1cHBvcnRJbmRleEI6IG51bWJlcixcclxuICAgICAgICBpLCByZXM6IEF4aXNbXSA9IFtdO1xyXG5cclxuICAgIGF4ZXNBID0gZmluZENsb3Nlc3RBeGVzKHBvbHksIGdlb21ldHJ5LCBjZW50cm9pZFZlY3Rvcik7XHJcbiAgICBzdXBwb3J0SW5kZXhBID0gYXhlc0FbMF0uc3VwcG9ydFZlcnRleEluZGV4O1xyXG5cclxuICAgIGlmKGdlb21ldHJ5LnR5cGUgPT09IGJvZHlUeXBlLnBvbHlnb24pIHtcclxuICAgICAgICBheGVzQiA9IGZpbmRDbG9zZXN0QXhlcyg8UG9seWdvbj5nZW9tZXRyeSwgcG9seSwgY2VudHJvaWRWZWN0b3IuaW52KGNlbnRyb2lkVmVjdG9yKSk7XHJcbiAgICAgICAgc3VwcG9ydEluZGV4QiA9IGF4ZXNCWzBdLnN1cHBvcnRWZXJ0ZXhJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IoaSA9IDA7IGkgPCBheGVzQS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGF4ZXNBW2ldLm9wcG9zaXRlVmVydGV4SW5kZXggPSBzdXBwb3J0SW5kZXhCO1xyXG4gICAgICAgIHJlcy5wdXNoKGF4ZXNBW2ldKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihheGVzQikge1xyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGF4ZXNCLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGF4ZXNCW2ldLm9wcG9zaXRlVmVydGV4SW5kZXggPSBzdXBwb3J0SW5kZXhBO1xyXG4gICAgICAgICAgICByZXMucHVzaChheGVzQltpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHBvbHkgXHJcbiAqIEBwYXJhbSBnZW9tZXRyeVxyXG4gKiBAcGFyYW0gY2VudHJvaWRWZWN0b3IgXHJcbiAqIEBwYXJhbSBvcHBvc2l0ZUNlbnRyb2lkXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdEF4ZXMocG9seTogUG9seWdvbiwgZ2VvbWV0cnk6IEJvZHksIGNlbnRyb2lkVmVjdG9yOiBWZWN0b3IpOiBBeGlzW10ge1xyXG4gICAgbGV0IHY6IFZlcnRleExpc3QgPSBwb2x5LnZlcnRleExpc3QsXHJcbiAgICAgICAgYXhlczogQXhpc1tdID0gcG9seS5heGVzLFxyXG4gICAgICAgIHZlcnRleDogVmVjdG9yLFxyXG4gICAgICAgIGF4aXM6IEF4aXMsXHJcbiAgICAgICAgZGlzdGFuY2U6IG51bWJlcixcclxuICAgICAgICBtaW5EaXN0YW5jZTogbnVtYmVyID0gSW5maW5pdHksXHJcbiAgICAgICAgZG90OiBudW1iZXIsXHJcbiAgICAgICAgbGFzdERvdDogbnVtYmVyID0gLTEsXHJcbiAgICAgICAgaW5kZXg6IG51bWJlciA9IDAsXHJcbiAgICAgICAgb3Bwb3NpdGUgPSBnZW9tZXRyeS50eXBlID09PSBib2R5VHlwZS5wb2x5Z29uPyAoPFBvbHlnb24+Z2VvbWV0cnkpLnZlcnRleExpc3Q6IDxDaXJjbGU+Z2VvbWV0cnksXHJcbiAgICAgICAgb3Bwb3NpdGVDZW50cm9pZCA9IGdlb21ldHJ5LnBvc2l0aW9uLFxyXG4gICAgICAgIHJlczogQXhpc1tdID0gW107XHJcblxyXG4gICAgaWYoYXhlc1theGVzLmxlbmd0aCAtIDFdKSB7XHJcbiAgICAgICAgbGFzdERvdCA9IGF4ZXNbYXhlcy5sZW5ndGggLSAxXS52YWx1ZS5kb3QoY2VudHJvaWRWZWN0b3IpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZlcnRleCA9IHZbaV07XHJcbiAgICAgICAgYXhpcyA9IGF4ZXNbaV07XHJcblxyXG4gICAgICAgIGRvdCA9IGF4aXM/IGF4aXMudmFsdWUuZG90KGNlbnRyb2lkVmVjdG9yKTogLTE7XHJcbiBcclxuICAgICAgICBpZihkb3QgPD0gMCAmJiBsYXN0RG90IDw9IDApIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXN0YW5jZSA9ICh2ZXJ0ZXgueCAtIG9wcG9zaXRlQ2VudHJvaWQueCkgKiogMiArICh2ZXJ0ZXgueSAtIG9wcG9zaXRlQ2VudHJvaWQueSkgKiogMjtcclxuXHJcbiAgICAgICAgaWYoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xyXG4gICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xyXG4gICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgbGFzdERvdCA9IGRvdDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcHJldiA9IGluZGV4ID4gMD8gaW5kZXggLSAxOiB2Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgcHJldkF4aXMgPSBheGVzW3ByZXZdLFxyXG4gICAgICAgIGluZGV4QXhpcyA9IGF4ZXNbaW5kZXhdO1xyXG5cclxuICAgIGlmKHByZXZBeGlzKSB7XHJcbiAgICAgICAgcmVzLnB1c2gocHJldkF4aXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGluZGV4QXhpcykge1xyXG4gICAgICAgIHJlcy5wdXNoKGluZGV4QXhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHJlc1tpXS5zdXBwb3J0VmVydGV4SW5kZXggPSBpbmRleDtcclxuICAgICAgICByZXNbaV0ub3Bwb3NpdGUgPSBvcHBvc2l0ZTtcclxuICAgICAgICByZXNbaV0ub3JpZ2luID0gcG9seS52ZXJ0ZXhMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.vClip = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nconst contact_1 = __webpack_require__(4);\r\n/**\r\n * 寻找 incident edge\r\n * @param oppositeVertexList\r\n * @param normal\r\n * @param oppositeClosestIndex\r\n */\r\nfunction findIncidentEdge(oppositeVertexList, normal, oppositeClosestIndex) {\r\n    let prev, cur, next, index = oppositeClosestIndex, edge = { start: null, end: null };\r\n    cur = oppositeVertexList[index];\r\n    prev = oppositeVertexList[index === 0 ? oppositeVertexList.length - 1 : index - 1];\r\n    next = oppositeVertexList[(index + 1) % oppositeVertexList.length];\r\n    cur.sub(prev, vector_1._tempVector1);\r\n    cur.sub(next, vector_1._tempVector2);\r\n    let d1 = Math.abs(vector_1._tempVector1.dot(normal)), d2 = Math.abs(vector_1._tempVector2.dot(normal));\r\n    if (d1 < d2) {\r\n        edge.start = prev;\r\n        edge.end = cur;\r\n    }\r\n    else {\r\n        edge.start = cur;\r\n        edge.end = next;\r\n    }\r\n    return edge;\r\n}\r\n/**\r\n * 筛选两边\r\n * @param incEdge\r\n * @param refV\r\n * @param d\r\n */\r\nfunction clipSide(incEdge, refV, d) {\r\n    let d1 = incEdge.start.dot(refV) - d, d2 = incEdge.end.dot(refV) - d;\r\n    if (d1 > 0) {\r\n        return 0;\r\n    }\r\n    if (d2 > 0) {\r\n        return 1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * V-Clip 算法寻找碰撞点\r\n * 详见：https://github.com/phenomLi/Blog/issues/42\r\n * @param poly1\r\n * @param poly2\r\n * @param normal\r\n * @param depth\r\n */\r\nfunction vClip(minOverlap) {\r\n    let axis = minOverlap.axis, normal = axis.value, depth = minOverlap.value, incEdge, refEdge, contacts = [];\r\n    incEdge = findIncidentEdge(axis.opposite, normal, minOverlap.oppositeClosestIndex);\r\n    refEdge = axis.edge;\r\n    // ------------------------------------- 首先向 refEdge 的内部进行筛选 -------------------\r\n    let refV = refEdge.end.sub(refEdge.start).nol(), refN = normal, d = refEdge.start.dot(refN), d1 = incEdge.start.dot(refN) - d, d2 = incEdge.end.dot(refN) - d, incVertex = [], removeIndex = -1;\r\n    if (d1 <= 0) {\r\n        incVertex[0] = incEdge.start;\r\n    }\r\n    if (d2 <= 0) {\r\n        incVertex[1] = incEdge.end;\r\n    }\r\n    // ------------------------------------- 接下来进行两边筛选 -------------------\r\n    removeIndex = clipSide(incEdge, refV, refEdge.end.dot(refV));\r\n    if (removeIndex !== -1 && incVertex[removeIndex]) {\r\n        incVertex[removeIndex] = refEdge.end;\r\n    }\r\n    removeIndex = clipSide(incEdge, refV.inv(refV), refEdge.start.dot(refV));\r\n    if (removeIndex !== -1 && incVertex[removeIndex]) {\r\n        incVertex[removeIndex] = refEdge.start;\r\n    }\r\n    if (incVertex[0]) {\r\n        contacts.push(new contact_1.Contact(incVertex[0], depth));\r\n    }\r\n    if (incVertex[1]) {\r\n        contacts.push(new contact_1.Contact(incVertex[1], depth));\r\n    }\r\n    return contacts;\r\n}\r\nexports.vClip = vClip;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.vClosest = void 0;\r\nconst vertices_1 = __webpack_require__(3);\r\nconst vector_1 = __webpack_require__(0);\r\nconst contact_1 = __webpack_require__(4);\r\n/**\r\n * 将顶点按照在法线上投影的大小顺序排序\r\n * @param vertexList\r\n * @param normal\r\n */\r\nfunction findClosestVertexIndex(vertexList, normal) {\r\n    let projection, index;\r\n    let maxProjection = -Infinity;\r\n    for (let i = 0; i < vertexList.length; i++) {\r\n        projection = vertexList[i].dot(normal);\r\n        if (projection > maxProjection) {\r\n            maxProjection = projection;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n/**\r\n * 最近内部顶点法寻找碰撞点\r\n * 详见：https://github.com/phenomLi/Blog/issues/41\r\n * @param vertexListA\r\n * @param vertexListB\r\n * @param normal\r\n * @param depth\r\n */\r\nfunction vClosest(minOverlap) {\r\n    let contacts = [], axis = minOverlap.axis, normal = axis.value, normalInv = axis.value.inv(vector_1._tempVector3), index, prev, next, depth = minOverlap.value, vertexListA = axis.origin, vertexListB = axis.opposite, testVertices = [], i;\r\n    // 寻找多边形A最接近多边形B的两个点\r\n    index = findClosestVertexIndex(vertexListA, normal);\r\n    prev = index > 0 ? index - 1 : vertexListA.length - 1;\r\n    next = index < vertexListA.length - 1 ? index + 1 : 0;\r\n    testVertices.push(vertexListA[prev]);\r\n    testVertices.push(vertexListA[index]);\r\n    testVertices.push(vertexListA[next]);\r\n    for (i = 0; i < testVertices.length; i++) {\r\n        // 查看这些点是否在多边形B内部\r\n        if (vertices_1.Vertices.isContains(vertexListB, testVertices[i])) {\r\n            // 如果是，则这个点记为一个碰撞点\r\n            contacts.push(new contact_1.Contact(testVertices[i], depth));\r\n        }\r\n    }\r\n    if (contacts.length >= 2) {\r\n        return contacts;\r\n    }\r\n    ;\r\n    testVertices.length = 0;\r\n    // 同理上面\r\n    index = findClosestVertexIndex(vertexListB, normalInv);\r\n    prev = index > 0 ? index - 1 : vertexListB.length - 1;\r\n    next = index < vertexListB.length - 1 ? index + 1 : 0;\r\n    testVertices.push(vertexListB[prev]);\r\n    testVertices.push(vertexListB[index]);\r\n    testVertices.push(vertexListB[next]);\r\n    for (i = 0; i < testVertices.length; i++) {\r\n        if (vertices_1.Vertices.isContains(vertexListA, testVertices[i])) {\r\n            contacts.push(new contact_1.Contact(testVertices[i], depth));\r\n        }\r\n    }\r\n    // 边界情况：即没有碰撞点的情况\r\n    if (contacts.length < 1) {\r\n        contacts.push(new contact_1.Contact(vertexListB[index], depth));\r\n    }\r\n    return contacts;\r\n}\r\nexports.vClosest = vClosest;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL3ZDbG9zZXN0LnRzPzAzZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMENBQWdFO0FBQ2hFLHdDQUFzRDtBQUN0RCx5Q0FBZ0Q7QUFJaEQ7Ozs7R0FJRztBQUNILFNBQVMsc0JBQXNCLENBQUMsVUFBc0IsRUFBRSxNQUFjO0lBQ2xFLElBQUksVUFBa0IsRUFDbEIsS0FBYSxDQUFDO0lBRWxCLElBQUksYUFBYSxHQUFHLENBQUMsUUFBUSxDQUFDO0lBRTlCLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZDLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLElBQUcsVUFBVSxHQUFHLGFBQWEsRUFBRTtZQUMzQixhQUFhLEdBQUcsVUFBVSxDQUFDO1lBQzNCLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDYjtLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUdEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixRQUFRLENBQUMsVUFBc0I7SUFDM0MsSUFBSSxRQUFRLEdBQWMsRUFBRSxFQUN4QixJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksRUFDdEIsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQ25CLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxxQkFBWSxDQUFDLEVBQ3hDLEtBQWEsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUN6QyxLQUFLLEdBQVcsVUFBVSxDQUFDLEtBQUssRUFDaEMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQ3pCLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBc0IsRUFDekMsWUFBWSxHQUFhLEVBQUUsRUFDM0IsQ0FBQyxDQUFDO0lBRU4sb0JBQW9CO0lBQ3BCLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEQsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEQsSUFBSSxHQUFHLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFckMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLGlCQUFpQjtRQUNqQixJQUFHLG1CQUFRLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRCxrQkFBa0I7WUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDdEQ7S0FDSjtJQUVELElBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDckIsT0FBTyxRQUFRLENBQUM7S0FDbkI7SUFBQSxDQUFDO0lBRUYsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFeEIsT0FBTztJQUNQLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEQsSUFBSSxHQUFHLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFckMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUcsbUJBQVEsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3REO0tBQ0o7SUFFRCxpQkFBaUI7SUFDakIsSUFBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNwQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUN6RDtJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUF4REQsNEJBd0RDIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpcywgVmVydGV4TGlzdCwgVmVydGljZXMgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcbmltcG9ydCB7IFZlY3RvciwgX3RlbXBWZWN0b3IzIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IENvbnRhY3QgfSBmcm9tIFwiLi4vY29uc3RyYWludC9jb250YWN0XCI7XHJcbmltcG9ydCB7IE1pbk92ZXJsYXAgfSBmcm9tIFwiLi9zYXRcIjtcclxuXHJcblxyXG4vKipcclxuICog5bCG6aG254K55oyJ54Wn5Zyo5rOV57q/5LiK5oqV5b2x55qE5aSn5bCP6aG65bqP5o6S5bqPXHJcbiAqIEBwYXJhbSB2ZXJ0ZXhMaXN0IFxyXG4gKiBAcGFyYW0gbm9ybWFsIFxyXG4gKi9cclxuZnVuY3Rpb24gZmluZENsb3Nlc3RWZXJ0ZXhJbmRleCh2ZXJ0ZXhMaXN0OiBWZXJ0ZXhMaXN0LCBub3JtYWw6IFZlY3Rvcik6IG51bWJlciB7XHJcbiAgICBsZXQgcHJvamVjdGlvbjogbnVtYmVyLFxyXG4gICAgICAgIGluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgbGV0IG1heFByb2plY3Rpb24gPSAtSW5maW5pdHk7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZlcnRleExpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBwcm9qZWN0aW9uID0gdmVydGV4TGlzdFtpXS5kb3Qobm9ybWFsKTtcclxuXHJcbiAgICAgICAgaWYocHJvamVjdGlvbiA+IG1heFByb2plY3Rpb24pIHtcclxuICAgICAgICAgICAgbWF4UHJvamVjdGlvbiA9IHByb2plY3Rpb247XHJcbiAgICAgICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluZGV4O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOacgOi/keWGhemDqOmhtueCueazleWvu+aJvueisOaSnueCuVxyXG4gKiDor6bop4HvvJpodHRwczovL2dpdGh1Yi5jb20vcGhlbm9tTGkvQmxvZy9pc3N1ZXMvNDFcclxuICogQHBhcmFtIHZlcnRleExpc3RBIFxyXG4gKiBAcGFyYW0gdmVydGV4TGlzdEIgXHJcbiAqIEBwYXJhbSBub3JtYWwgXHJcbiAqIEBwYXJhbSBkZXB0aFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZDbG9zZXN0KG1pbk92ZXJsYXA6IE1pbk92ZXJsYXApOiBDb250YWN0W10ge1xyXG4gICAgbGV0IGNvbnRhY3RzOiBDb250YWN0W10gPSBbXSxcclxuICAgICAgICBheGlzID0gbWluT3ZlcmxhcC5heGlzLFxyXG4gICAgICAgIG5vcm1hbCA9IGF4aXMudmFsdWUsXHJcbiAgICAgICAgbm9ybWFsSW52ID0gYXhpcy52YWx1ZS5pbnYoX3RlbXBWZWN0b3IzKSxcclxuICAgICAgICBpbmRleDogbnVtYmVyLCBwcmV2OiBudW1iZXIsIG5leHQ6IG51bWJlcixcclxuICAgICAgICBkZXB0aDogbnVtYmVyID0gbWluT3ZlcmxhcC52YWx1ZSxcclxuICAgICAgICB2ZXJ0ZXhMaXN0QSA9IGF4aXMub3JpZ2luLFxyXG4gICAgICAgIHZlcnRleExpc3RCID0gYXhpcy5vcHBvc2l0ZSBhcyBWZXJ0ZXhMaXN0LFxyXG4gICAgICAgIHRlc3RWZXJ0aWNlczogVmVjdG9yW10gPSBbXSxcclxuICAgICAgICBpO1xyXG5cclxuICAgIC8vIOWvu+aJvuWkmui+ueW9okHmnIDmjqXov5HlpJrovrnlvaJC55qE5Lik5Liq54K5XHJcbiAgICBpbmRleCA9IGZpbmRDbG9zZXN0VmVydGV4SW5kZXgodmVydGV4TGlzdEEsIG5vcm1hbCk7XHJcbiAgICBwcmV2ID0gaW5kZXggPiAwPyBpbmRleCAtIDE6IHZlcnRleExpc3RBLmxlbmd0aCAtIDE7XHJcbiAgICBuZXh0ID0gaW5kZXggPCB2ZXJ0ZXhMaXN0QS5sZW5ndGggLSAxPyBpbmRleCArIDE6IDA7XHJcblxyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEFbcHJldl0pO1xyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEFbaW5kZXhdKTtcclxuICAgIHRlc3RWZXJ0aWNlcy5wdXNoKHZlcnRleExpc3RBW25leHRdKTtcclxuXHJcbiAgICBmb3IoaSA9IDA7IGkgPCB0ZXN0VmVydGljZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyDmn6XnnIvov5nkupvngrnmmK/lkKblnKjlpJrovrnlvaJC5YaF6YOoXHJcbiAgICAgICAgaWYoVmVydGljZXMuaXNDb250YWlucyh2ZXJ0ZXhMaXN0QiwgdGVzdFZlcnRpY2VzW2ldKSkge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzmmK/vvIzliJnov5nkuKrngrnorrDkuLrkuIDkuKrnorDmkp7ngrlcclxuICAgICAgICAgICAgY29udGFjdHMucHVzaChuZXcgQ29udGFjdCh0ZXN0VmVydGljZXNbaV0sIGRlcHRoKSk7XHJcbiAgICAgICAgfSBcclxuICAgIH1cclxuXHJcbiAgICBpZihjb250YWN0cy5sZW5ndGggPj0gMikge1xyXG4gICAgICAgIHJldHVybiBjb250YWN0cztcclxuICAgIH07XHJcblxyXG4gICAgdGVzdFZlcnRpY2VzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgLy8g5ZCM55CG5LiK6Z2iXHJcbiAgICBpbmRleCA9IGZpbmRDbG9zZXN0VmVydGV4SW5kZXgodmVydGV4TGlzdEIsIG5vcm1hbEludik7XHJcbiAgICBwcmV2ID0gaW5kZXggPiAwPyBpbmRleCAtIDE6IHZlcnRleExpc3RCLmxlbmd0aCAtIDE7XHJcbiAgICBuZXh0ID0gaW5kZXggPCB2ZXJ0ZXhMaXN0Qi5sZW5ndGggLSAxPyBpbmRleCArIDE6IDA7XHJcblxyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEJbcHJldl0pO1xyXG4gICAgdGVzdFZlcnRpY2VzLnB1c2godmVydGV4TGlzdEJbaW5kZXhdKTtcclxuICAgIHRlc3RWZXJ0aWNlcy5wdXNoKHZlcnRleExpc3RCW25leHRdKTtcclxuXHJcbiAgICBmb3IoaSA9IDA7IGkgPCB0ZXN0VmVydGljZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZihWZXJ0aWNlcy5pc0NvbnRhaW5zKHZlcnRleExpc3RBLCB0ZXN0VmVydGljZXNbaV0pKSB7XHJcbiAgICAgICAgICAgIGNvbnRhY3RzLnB1c2gobmV3IENvbnRhY3QodGVzdFZlcnRpY2VzW2ldLCBkZXB0aCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDovrnnlYzmg4XlhrXvvJrljbPmsqHmnInnorDmkp7ngrnnmoTmg4XlhrVcclxuICAgIGlmKGNvbnRhY3RzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICBjb250YWN0cy5wdXNoKG5ldyBDb250YWN0KHZlcnRleExpc3RCW2luZGV4XSwgZGVwdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29udGFjdHM7XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Sleeping = void 0;\r\nconst util_1 = __webpack_require__(1);\r\n/**\r\n * 休眠管理器\r\n */\r\nclass Sleeping {\r\n    constructor(opt) {\r\n        this.sleepDelayThreshold = 60;\r\n        this.sleepMotionThreshold = 0.0008;\r\n        this.wakeMotionThreshold = 0.7;\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 使刚体睡眠\r\n     * @param body\r\n     */\r\n    sleep(body) {\r\n        if (body.kinetic)\r\n            return;\r\n        body.sleeping = true;\r\n        body.sleepCounter = this.sleepDelayThreshold;\r\n        body.velocity.x = 0;\r\n        body.velocity.y = 0;\r\n        body.angularVelocity = 0;\r\n        body.motion = 0;\r\n        body.sleepStart();\r\n        if (body.parts[0] !== body) {\r\n            for (let i = 0; i < body.parts.length; i++) {\r\n                this.sleep(body.parts[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 唤醒刚体\r\n     * @param body\r\n     */\r\n    wake(body) {\r\n        body.sleeping = false;\r\n        body.sleepCounter = 0;\r\n        body.sleepEnd();\r\n        if (body.parts[0] !== body) {\r\n            for (let i = 0; i < body.parts.length; i++) {\r\n                this.wake(body.parts[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 改变刚体的状态，使其唤醒或休眠\r\n     * @param bodies\r\n     */\r\n    update(bodies) {\r\n        let body, i;\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            let motion = body.motion;\r\n            // 若刚体合外力不为0，则唤醒\r\n            // if (body.force.x !== 0 || body.force.y !== 0) {\r\n            //     this.wake(body);\r\n            //     continue;\r\n            // }\r\n            // 若刚体已经休眠，则返回\r\n            if (body.sleeping)\r\n                continue;\r\n            // 若刚体动量 < 休眠阈值，则刚体休眠计算 + 1\r\n            if (motion < this.sleepMotionThreshold) {\r\n                body.sleepCounter += 1;\r\n                // 若刚体休眠计数器达到休眠阈值，则进行休眠\r\n                if (body.sleepCounter >= this.sleepDelayThreshold) {\r\n                    this.sleep(body);\r\n                }\r\n            }\r\n            else {\r\n                if (body.sleepCounter > 0) {\r\n                    body.sleepCounter -= 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 刚体碰撞后，判断是否需要唤醒\r\n     * @param manifolds\r\n     */\r\n    afterCollision(manifolds) {\r\n        let manifold, bodyA, bodyB;\r\n        // wake up bodies involved in collisions\r\n        for (var i = 0; i < manifolds.length; i++) {\r\n            manifold = manifolds[i];\r\n            bodyA = manifold.bodyA;\r\n            bodyB = manifold.bodyB;\r\n            // 若A为休眠状态且B的动量大于休眠阈值，唤醒A\r\n            if (bodyB.kinetic || !bodyA.static && bodyA.sleeping && bodyB.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyA);\r\n                continue;\r\n            }\r\n            // B同理上面\r\n            if (bodyA.kinetic || !bodyB.static && bodyB.sleeping && bodyA.motion > this.wakeMotionThreshold) {\r\n                this.wake(bodyB);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Sleeping = Sleeping;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.ManifoldTable = void 0;\r\nconst manifold_1 = __webpack_require__(7);\r\nconst util_1 = __webpack_require__(1);\r\nclass ManifoldTable {\r\n    constructor(opt) {\r\n        this.enableCache = false;\r\n        this.manifoldRemoveThreshold = 1000;\r\n        this.table = {};\r\n        this.list = [];\r\n        this.collisionStart = [];\r\n        this.collisionEnd = [];\r\n        this.collisionActive = [];\r\n        util_1.Util.merge(this, opt);\r\n    }\r\n    /**\r\n     * 更新所有流形\r\n     * @param collisions\r\n     * @param timeStamp\r\n     */\r\n    update(collisions, timeStamp) {\r\n        let manifold, id, collision, i;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n        // 清空确认激活状态\r\n        for (i = 0; i < this.list.length; i++) {\r\n            this.list[i].confirmedActive = false;\r\n        }\r\n        for (i = 0; i < collisions.length; i++) {\r\n            collision = collisions[i];\r\n            // 只有真实发生碰撞的碰撞对才会更新对应的流形\r\n            if (collision.collide) {\r\n                id = util_1.Util.compositeId(collision.partA.id, collision.partB.id);\r\n                manifold = this.table[id];\r\n                // 若对应流形存在\r\n                if (manifold) {\r\n                    // 若流形上一刻已经被激活\r\n                    if (manifold.isActive) {\r\n                        this.collisionActive.push(manifold);\r\n                    }\r\n                    // 否则表明该流形第一次发生碰撞\r\n                    else {\r\n                        this.collisionStart.push(manifold);\r\n                    }\r\n                    manifold.update(collision, timeStamp);\r\n                    manifold.confirmedActive = true;\r\n                }\r\n                // 若不存在，则创建对应流形\r\n                else {\r\n                    manifold = new manifold_1.Manifold(collision, timeStamp);\r\n                    this.table[id] = manifold;\r\n                    this.list.push(manifold);\r\n                    this.collisionStart.push(manifold);\r\n                }\r\n                collision.bodyA.onCollide(collision.bodyB);\r\n                collision.bodyB.onCollide(collision.bodyA);\r\n            }\r\n        }\r\n        // 遍历查找上一次发生碰撞且当前没有发生碰撞的流形\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            collision = manifold.collision;\r\n            // 将其激活状态取消\r\n            if (manifold.isActive && !manifold.confirmedActive) {\r\n                manifold.toggleActive(false, timeStamp);\r\n                // 标记为碰撞结束\r\n                this.collisionEnd.push(manifold);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 过滤超时的碰撞流形\r\n     * @param timeStamp\r\n     */\r\n    filter(timeStamp) {\r\n        let manifold, collision, i;\r\n        for (i = 0; i < this.list.length; i++) {\r\n            manifold = this.list[i];\r\n            collision = manifold.collision;\r\n            // 若流形的两刚体有其一处于休眠状态，更新时间，不清除\r\n            if (manifold.bodyA.sleeping || manifold.bodyB.sleeping) {\r\n                manifold.timeUpdated = timeStamp;\r\n                continue;\r\n            }\r\n            // 若流形上次更新的时间离现在已经大于设定阈值，则需要清除\r\n            if (timeStamp - manifold.timeUpdated > this.manifoldRemoveThreshold) {\r\n                let bodyA = collision.bodyA, bodyB = collision.bodyB;\r\n                delete bodyA.contactBodies[bodyB.stringId];\r\n                delete bodyB.contactBodies[bodyA.stringId];\r\n                delete this.table[manifold.id];\r\n                this.list.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 清空流形表和队列\r\n     */\r\n    clear() {\r\n        this.table = {};\r\n        this.list.length = 0;\r\n        this.collisionStart.length = 0;\r\n        this.collisionEnd.length = 0;\r\n        this.collisionActive.length = 0;\r\n    }\r\n}\r\nexports.ManifoldTable = ManifoldTable;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29sbGlzaW9uL21hbmlmb2xkVGFibGUudHM/MzVjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwQ0FBaUQ7QUFDakQsc0NBQXNDO0FBTXRDLE1BQWEsYUFBYTtJQWdCdEIsWUFBWSxHQUFjO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUUxQixXQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUF1QixFQUFFLFNBQWlCO1FBQzdDLElBQUksUUFBa0IsRUFDbEIsRUFBVSxFQUNWLFNBQW9CLEVBQ3BCLENBQUMsQ0FBQztRQUVOLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWhDLFdBQVc7UUFDWCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztTQUN4QztRQUVELEtBQUksQ0FBQyxHQUFHLENBQUMs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QUFDLHVCQUF1QixFQUFFO2dCQUNoRSxJQUFJLEtBQUssR0FBUyxTQUFTLENBQUMsS0FBSyxFQUM3QixLQUFLLEdBQVMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFFbEMsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixDQUFDLEVBQUUsQ0FBQzthQUNQO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQTlJRCxzQ0E4SUMiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbmdpbmVPcHQgfSBmcm9tIFwiLi4vY29yZS9lbmdpbmVcIjtcclxuaW1wb3J0IHsgTWFuaWZvbGQsIENvbGxpc2lvbiB9IGZyb20gXCIuL21hbmlmb2xkXCI7XHJcbmltcG9ydCB7IFV0aWwgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxcIjtcclxuaW1wb3J0IHsgQm9keSB9IGZyb20gXCIuLi9ib2R5L2JvZHlcIjtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNYW5pZm9sZFRhYmxlIHtcclxuICAgIC8vIOaYr+WQpuW8gOWQr+e8k+WtmFxyXG4gICAgZW5hYmxlQ2FjaGU6IGJvb2xlYW47XHJcbiAgICAvLyDnvJPlrZjnp7vpmaTml7bpl7TpmIjlgLxcclxuICAgIG1hbmlmb2xkUmVtb3ZlVGhyZXNob2xkOiBudW1iZXI7XHJcbiAgICAvLyDmtYHlvaLooahcclxuICAgIHRhYmxlOiB7W2tleTogc3RyaW5nXTogTWFuaWZvbGR9O1xyXG4gICAgLy8g5rWB5b2i6Zif5YiXXHJcbiAgICBsaXN0OiBNYW5pZm9sZFtdO1xyXG4gICAgLy8g5byA5aeL56Kw5pKe55qE56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25TdGFydDogTWFuaWZvbGRbXTtcclxuICAgIC8vIOa/gOa0u+eisOaSnueahOeisOaSnuWvuVxyXG4gICAgY29sbGlzaW9uQWN0aXZlOiBNYW5pZm9sZFtdO1xyXG4gICAgLy8g57uT5p2f56Kw5pKe55qE56Kw5pKe5a+5XHJcbiAgICBjb2xsaXNpb25FbmQ6IE1hbmlmb2xkW107XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBFbmdpbmVPcHQpIHtcclxuICAgICAgICB0aGlzLmVuYWJsZUNhY2hlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYW5pZm9sZFJlbW92ZVRocmVzaG9sZCA9IDEwMDA7XHJcbiAgICAgICAgdGhpcy50YWJsZSA9IHt9O1xyXG4gICAgICAgIHRoaXMubGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkVuZCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQWN0aXZlID0gW107XHJcblxyXG4gICAgICAgIFV0aWwubWVyZ2UodGhpcywgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOaJgOaciea1geW9olxyXG4gICAgICogQHBhcmFtIGNvbGxpc2lvbnMgXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIFxyXG4gICAgICovXHJcbiAgICB1cGRhdGUoY29sbGlzaW9uczogQ29sbGlzaW9uW10sIHRpbWVTdGFtcDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG1hbmlmb2xkOiBNYW5pZm9sZCxcclxuICAgICAgICAgICAgaWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgY29sbGlzaW9uOiBDb2xsaXNpb24sXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLmNvbGxpc2lvbkVuZC5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIC8vIOa4heepuuehruiupOa/gOa0u+eKtuaAgVxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0W2ldLmNvbmZpcm1lZEFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY29sbGlzaW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xyXG5cclxuICAgICAgICAgICAgLy8g5Y+q5pyJ55yf5a6e5Y+R55Sf56Kw5pKe55qE56Kw5pKe5a+55omN5Lya5pu05paw5a+55bqU55qE5rWB5b2iXHJcbiAgICAgICAgICAgIGlmKGNvbGxpc2lvbi5jb2xsaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZCA9IFV0aWwuY29tcG9zaXRlSWQoY29sbGlzaW9uLnBhcnRBLmlkLCBjb2xsaXNpb24ucGFydEIuaWQpO1xyXG4gICAgICAgICAgICAgICAgbWFuaWZvbGQgPSB0aGlzLnRhYmxlW2lkXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoi6Xlr7nlupTmtYHlvaLlrZjlnKhcclxuICAgICAgICAgICAgICAgIGlmKG1hbmlmb2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6Iul5rWB5b2i5LiK5LiA5Yi75bey57uP6KKr5r+A5rS7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobWFuaWZvbGQuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25BY3RpdmUucHVzaChtYW5pZm9sZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWQpuWImeihqOaYjuivpea1geW9ouesrOS4gOasoeWPkeeUn+eisOaSnlxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxpc2lvblN0YXJ0LnB1c2gobWFuaWZvbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFuaWZvbGQudXBkYXRlKGNvbGxpc2lvbiwgdGltZVN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZC5jb25maXJtZWRBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6Iul5LiN5a2Y5Zyo77yM5YiZ5Yib5bu65a+55bqU5rWB5b2iXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW5pZm9sZCA9IG5ldyBNYW5pZm9sZChjb2xsaXNpb24sIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YWJsZVtpZF0gPSBtYW5pZm9sZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChtYW5pZm9sZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uU3RhcnQucHVzaChtYW5pZm9sZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHlBLm9uQ29sbGlkZShjb2xsaXNpb24uYm9keUIpO1xyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmJvZHlCLm9uQ29sbGlkZShjb2xsaXNpb24uYm9keUEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDpgY3ljobmn6Xmib7kuIrkuIDmrKHlj5HnlJ/norDmkp7kuJTlvZPliY3msqHmnInlj5HnlJ/norDmkp7nmoTmtYHlvaJcclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWFuaWZvbGQgPSB0aGlzLmxpc3RbaV07XHJcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IG1hbmlmb2xkLmNvbGxpc2lvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIOWwhuWFtua/gOa0u+eKtuaAgeWPlua2iFxyXG4gICAgICAgICAgICBpZihtYW5pZm9sZC5pc0FjdGl2ZSAmJiAhbWFuaWZvbGQuY29uZmlybWVkQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBtYW5pZm9sZC50b2dnbGVBY3RpdmUoZmFsc2UsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAvLyDmoIforrDkuLrnorDmkp7nu5PmnZ9cclxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uRW5kLnB1c2gobWFuaWZvbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L+H5ruk6LaF5pe255qE56Kw5pKe5rWB5b2iXHJcbiAgICAgKiBAcGFyYW0gdGltZVN0YW1wIFxyXG4gICAgICovXHJcbiAgICBmaWx0ZXIodGltZVN0YW1wOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbWFuaWZvbGQ6IE1hbmlmb2xkLFxyXG4gICAgICAgICAgICBjb2xsaXNpb246IENvbGxpc2lvbixcclxuICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1hbmlmb2xkID0gdGhpcy5saXN0W2ldO1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBtYW5pZm9sZC5jb2xsaXNpb247XHJcblxyXG4gICAgICAgICAgICAvLyDoi6XmtYHlvaLnmoTkuKTliJrkvZPmnInlhbbkuIDlpITkuo7kvJHnnKDnirbmgIHvvIzmm7TmlrDml7bpl7TvvIzkuI3muIXpmaRcclxuICAgICAgICAgICAgaWYobWFuaWZvbGQuYm9keUEuc2xlZXBpbmcgfHwgbWFuaWZvbGQuYm9keUIuc2xlZXBpbmcpIHtcclxuICAgICAgICAgICAgICAgIG1hbmlmb2xkLnRpbWVVcGRhdGVkID0gdGltZVN0YW1wO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOiLpea1geW9ouS4iuasoeabtOaWsOeahOaXtumXtOemu+eOsOWcqOW3sue7j+Wkp+S6juiuvuWumumYiOWAvO+8jOWImemcgOimgea4hemZpFxyXG4gICAgICAgICAgICBpZih0aW1lU3RhbXAgLSBtYW5pZm9sZC50aW1lVXBkYXRlZCA+IHRoaXMubWFuaWZvbGRSZW1vdmVUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBib2R5QTogQm9keSA9IGNvbGxpc2lvbi5ib2R5QSxcclxuICAgICAgICAgICAgICAgICAgICBib2R5QjogQm9keSA9IGNvbGxpc2lvbi5ib2R5QjtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keUEuY29udGFjdEJvZGllc1tib2R5Qi5zdHJpbmdJZF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYm9keUIuY29udGFjdEJvZGllc1tib2R5QS5zdHJpbmdJZF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50YWJsZVttYW5pZm9sZC5pZF07XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4heepuua1geW9ouihqOWSjOmYn+WIl1xyXG4gICAgICovXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLnRhYmxlID0ge307XHJcbiAgICAgICAgdGhpcy5saXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25TdGFydC5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.BodiesFactory = void 0;\r\nconst circle_1 = __webpack_require__(8);\r\nconst polygon_1 = __webpack_require__(9);\r\nconst rect_1 = __webpack_require__(22);\r\nconst vector_1 = __webpack_require__(0);\r\nconst util_1 = __webpack_require__(1);\r\nconst composite_1 = __webpack_require__(23);\r\nconst vertices_1 = __webpack_require__(3);\r\nclass BodiesFactory {\r\n    /**\r\n     * 创造圆形\r\n     * @param x x\r\n     * @param y y\r\n     * @param radius 半径\r\n     * @param opt 配置项\r\n     */\r\n    Circle(x, y, radius, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            radius: radius\r\n        });\r\n        return new circle_1.Circle(opt);\r\n        ;\r\n    }\r\n    /**\r\n     * 创造多边形\r\n     * @param x x\r\n     * @param y y\r\n     * @param v 顶点集\r\n     * @param opt 配置项\r\n     */\r\n    Polygon(x, y, v, opt) {\r\n        let vertices = v.map(vertex => new vector_1.Vector(vertex[0], vertex[1])), options = opt || { origin: new vector_1.Vector(x, y) };\r\n        // 若输入的顶点列表是凹多边形，则将其拆分为由凸多边形组合成的组合图形\r\n        if (vertices_1.Vertices.isConcave(vertices)) {\r\n            let vertexLists = vertices_1.Vertices.split(vertices), polygons = [], composite;\r\n            for (let i = 0; i < vertexLists.length; i++) {\r\n                polygons.push(new polygon_1.Polygon({\r\n                    origin: new vector_1.Vector(x, y),\r\n                    vertices: vertices_1.Vertices.filterCollinearVertex(vertexLists[i])\r\n                }));\r\n            }\r\n            composite = new composite_1.Composite(Object.assign(Object.assign({}, options), { bodies: polygons, useParentProps: true }));\r\n            return composite;\r\n        }\r\n        else {\r\n            util_1.Util.extend(options, {\r\n                origin: new vector_1.Vector(x, y),\r\n                vertices\r\n            });\r\n            return new polygon_1.Polygon(options);\r\n        }\r\n    }\r\n    /**\r\n     * 创造矩形\r\n     * @param x x\r\n     * @param y y\r\n     * @param width 宽\r\n     * @param height 高\r\n     * @param opt 配置项\r\n     */\r\n    Rect(x, y, width, height, opt) {\r\n        opt = opt || {};\r\n        util_1.Util.extend(opt, {\r\n            origin: new vector_1.Vector(x, y),\r\n            width,\r\n            height\r\n        });\r\n        return new rect_1.Rect(opt);\r\n    }\r\n    /**\r\n     * 创造复合图形\r\n     * @param bodies\r\n     */\r\n    Composite(bodies, opt) {\r\n        opt = opt || {};\r\n        opt.bodies = bodies;\r\n        return new composite_1.Composite(opt);\r\n    }\r\n}\r\nexports.BodiesFactory = BodiesFactory;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9ib2RpZXNGYWN0b3J5LnRzPzE2ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQW1EO0FBQ25ELHlDQUFzRDtBQUN0RCx1Q0FBNkM7QUFDN0Msd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUN0Qyw0Q0FBNEQ7QUFFNUQsMENBQThDO0FBSTlDLE1BQWEsYUFBYTtJQUV0Qjs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjLEVBQUUsR0FBZTtRQUN4RCxHQUFHLEdBQUcsR0FBRyxJQUFlLEVBQUUsQ0FBQztRQUUzQixXQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNiLE1BQU0sRUFBRSxJQUFJLGVBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sRUFBRSxNQUFNO1NBQ2pCLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxlQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBQSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxPQUFPLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFrQixFQUFFLEdBQStCO1FBQzdFLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDNUQsT0FBTyxHQUFHLEdBQUcsSUFBK0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFN0Usb0NBQW9DO1FBQ3BDLElBQUcsbUJBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDN0IsSUFBSSxXQUFXLEdBQUcsbUJBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQ3RDLFFBQVEsR0FBYyxFQUFFLEVBQ3hCLFNBQW9CLENBQUM7WUFFekIsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBTyxDQUFDO29CQUN0QixNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDeEIsUUFBUSxFQUFFLG1CQUFRLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUMzRCxDQUFDLENBQUMsQ0FBQzthQUNQO1lBRUQsU0FBUyxHQUFHLElBQUkscUJBQVMsaUNBQ2xCLE9BQU8sS0FDVixNQUFNLEVBQUUsUUFBUSxFQUNoQixjQUFjLEVBQUUsSUFBSSxJQUN0QixDQUFDO1lBRUgsT0FBTyxTQUFTLENBQUM7U0FDcEI7YUFDSTtZQUNELFdBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUNqQixNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDeEIsUUFBUTthQUNYLENBQUMsQ0FBQztZQUVILE9BQU8sSUFBSSxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUFFLEdBQWE7UUFDbkUsR0FBRyxHQUFHLEdBQUcsSUFBYSxFQUFFLENBQUM7UUFFekIsV0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDYixNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4QixLQUFLO1lBQ0wsTUFBTTtTQUNULENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsQ0FBQyxNQUFjLEVBQUUsR0FBa0I7UUFDeEMsR0FBRyxHQUFHLEdBQUcsSUFBa0IsRUFBRSxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxxQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDSjtBQTNGRCxzQ0EyRkMiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaXJjbGUsIENpcmNsZU9wdCB9IGZyb20gXCIuLi9ib2R5L2NpcmNsZVwiO1xyXG5pbXBvcnQgeyBQb2x5Z29uLCBQb2x5Z29uT3B0IH0gZnJvbSBcIi4uL2JvZHkvcG9seWdvblwiO1xyXG5pbXBvcnQgeyBSZWN0LCBSZWN0T3B0IH0gZnJvbSBcIi4uL2JvZHkvcmVjdFwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gXCIuLi9jb21tb24vdXRpbFwiO1xyXG5pbXBvcnQgeyBDb21wb3NpdGUsIENvbXBvc2l0ZU9wdCB9IGZyb20gXCIuLi9ib2R5L2NvbXBvc2l0ZVwiO1xyXG5pbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBWZXJ0aWNlcyB9IGZyb20gXCIuLi9jb21tb24vdmVydGljZXNcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEJvZGllc0ZhY3Rvcnkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yib6YCg5ZyG5b2iXHJcbiAgICAgKiBAcGFyYW0geCB4XHJcbiAgICAgKiBAcGFyYW0geSB5XHJcbiAgICAgKiBAcGFyYW0gcmFkaXVzIOWNiuW+hCBcclxuICAgICAqIEBwYXJhbSBvcHQg6YWN572u6aG5XHJcbiAgICAgKi9cclxuICAgIENpcmNsZSh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIG9wdD86IENpcmNsZU9wdCk6IENpcmNsZSB7XHJcbiAgICAgICAgb3B0ID0gb3B0IHx8IDxDaXJjbGVPcHQ+e307XHJcblxyXG4gICAgICAgIFV0aWwuZXh0ZW5kKG9wdCwge1xyXG4gICAgICAgICAgICBvcmlnaW46IG5ldyBWZWN0b3IoeCwgeSksXHJcbiAgICAgICAgICAgIHJhZGl1czogcmFkaXVzXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgQ2lyY2xlKG9wdCk7O1xyXG4gICAgfSAgIFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yib6YCg5aSa6L655b2iXHJcbiAgICAgKiBAcGFyYW0geCB4XHJcbiAgICAgKiBAcGFyYW0geSB5XHJcbiAgICAgKiBAcGFyYW0gdiDpobbngrnpm4YgXHJcbiAgICAgKiBAcGFyYW0gb3B0IOmFjee9rumhuVxyXG4gICAgICovXHJcbiAgICBQb2x5Z29uKHg6IG51bWJlciwgeTogbnVtYmVyLCB2OiBBcnJheTxudW1iZXJbXT4sIG9wdD86IFBvbHlnb25PcHQgJiBDb21wb3NpdGVPcHQpOiBQb2x5Z29uIHwgQ29tcG9zaXRlIHtcclxuICAgICAgICBsZXQgdmVydGljZXMgPSB2Lm1hcCh2ZXJ0ZXggPT4gbmV3IFZlY3Rvcih2ZXJ0ZXhbMF0sIHZlcnRleFsxXSkpLFxyXG4gICAgICAgICAgICBvcHRpb25zID0gb3B0IHx8IDxQb2x5Z29uT3B0ICYgQ29tcG9zaXRlT3B0Pnsgb3JpZ2luOiBuZXcgVmVjdG9yKHgsIHkpIH07XHJcblxyXG4gICAgICAgIC8vIOiLpei+k+WFpeeahOmhtueCueWIl+ihqOaYr+WHueWkmui+ueW9ou+8jOWImeWwhuWFtuaLhuWIhuS4uueUseWHuOWkmui+ueW9oue7hOWQiOaIkOeahOe7hOWQiOWbvuW9olxyXG4gICAgICAgIGlmKFZlcnRpY2VzLmlzQ29uY2F2ZSh2ZXJ0aWNlcykpIHtcclxuICAgICAgICAgICAgbGV0IHZlcnRleExpc3RzID0gVmVydGljZXMuc3BsaXQodmVydGljZXMpLFxyXG4gICAgICAgICAgICAgICAgcG9seWdvbnM6IFBvbHlnb25bXSA9IFtdLFxyXG4gICAgICAgICAgICAgICAgY29tcG9zaXRlOiBDb21wb3NpdGU7XHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdmVydGV4TGlzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBvbHlnb25zLnB1c2gobmV3IFBvbHlnb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogbmV3IFZlY3Rvcih4LCB5KSxcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogVmVydGljZXMuZmlsdGVyQ29sbGluZWFyVmVydGV4KHZlcnRleExpc3RzW2ldKVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb21wb3NpdGUgPSBuZXcgQ29tcG9zaXRlKHtcclxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICBib2RpZXM6IHBvbHlnb25zLFxyXG4gICAgICAgICAgICAgICAgdXNlUGFyZW50UHJvcHM6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgVXRpbC5leHRlbmQob3B0aW9ucywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luOiBuZXcgVmVjdG9yKHgsIHkpLFxyXG4gICAgICAgICAgICAgICAgdmVydGljZXNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uKG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+mAoOefqeW9olxyXG4gICAgICogQHBhcmFtIHggeCBcclxuICAgICAqIEBwYXJhbSB5IHlcclxuICAgICAqIEBwYXJhbSB3aWR0aCDlrr0gXHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IOmrmFxyXG4gICAgICogQHBhcmFtIG9wdCDphY3nva7poblcclxuICAgICAqL1xyXG4gICAgUmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdD86IFJlY3RPcHQpOiBSZWN0IHtcclxuICAgICAgICBvcHQgPSBvcHQgfHwgPFJlY3RPcHQ+e307XHJcblxyXG4gICAgICAgIFV0aWwuZXh0ZW5kKG9wdCwge1xyXG4gICAgICAgICAgICBvcmlnaW46IG5ldyBWZWN0b3IoeCwgeSksXHJcbiAgICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHRcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0KG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvpgKDlpI3lkIjlm77lvaJcclxuICAgICAqIEBwYXJhbSBib2RpZXMgXHJcbiAgICAgKi9cclxuICAgIENvbXBvc2l0ZShib2RpZXM6IEJvZHlbXSwgb3B0PzogQ29tcG9zaXRlT3B0KTogQ29tcG9zaXRlIHtcclxuICAgICAgICBvcHQgPSBvcHQgfHwgPENvbXBvc2l0ZU9wdD57fTtcclxuICAgICAgICBvcHQuYm9kaWVzID0gYm9kaWVzO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29tcG9zaXRlKG9wdCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * 矩形刚体\r\n */\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Rect = void 0;\r\nconst polygon_1 = __webpack_require__(9);\r\nconst vector_1 = __webpack_require__(0);\r\nclass Rect extends polygon_1.Polygon {\r\n    constructor(opt) {\r\n        super(opt);\r\n    }\r\n    getVertexList() {\r\n        let leftTop = this.origin.col(), rightTop = leftTop.add(new vector_1.Vector(this.width, 0)), rightBottom = leftTop.add(new vector_1.Vector(this.width, this.height)), leftBottom = leftTop.add(new vector_1.Vector(0, this.height));\r\n        return [leftTop, rightTop, rightBottom, leftBottom];\r\n    }\r\n    getArea() {\r\n        return this.width * this.height;\r\n    }\r\n    getCentroid() {\r\n        return this.origin.add(new vector_1.Vector(this.width / 2, this.height / 2));\r\n    }\r\n    getInertia() {\r\n        return this.mass * (this.width * this.width + this.height * this.height) / 12;\r\n    }\r\n}\r\nexports.Rect = Rect;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYm9keS9yZWN0LnRzPzJkYWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCx5Q0FBZ0Q7QUFDaEQsd0NBQXdDO0FBV3hDLE1BQWEsSUFBSyxTQUFRLGlCQUFPO0lBTTdCLFlBQVksR0FBWTtRQUNwQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQzNCLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDakQsV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDOUQsVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXpELE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2xGLENBQUM7Q0FDSjtBQTlCRCxvQkE4QkMiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog55+p5b2i5Yia5L2TXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgUG9seWdvbiwgUG9seWdvbk9wdCB9IGZyb20gXCIuL3BvbHlnb25cIjtcclxuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSBcIi4uL21hdGgvdmVjdG9yXCI7XHJcbmltcG9ydCB7IFZlcnRleExpc3QgfSBmcm9tIFwiLi4vY29tbW9uL3ZlcnRpY2VzXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVjdE9wdCBleHRlbmRzIFBvbHlnb25PcHQge1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlY3QgZXh0ZW5kcyBQb2x5Z29uIHtcclxuICAgIC8vIOWuvVxyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIC8vIOmrmFxyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0OiBSZWN0T3B0KSB7XHJcbiAgICAgICAgc3VwZXIob3B0KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWZXJ0ZXhMaXN0KCk6IFZlcnRleExpc3Qge1xyXG4gICAgICAgIGxldCBsZWZ0VG9wID0gdGhpcy5vcmlnaW4uY29sKCksXHJcbiAgICAgICAgICAgIHJpZ2h0VG9wID0gbGVmdFRvcC5hZGQobmV3IFZlY3Rvcih0aGlzLndpZHRoLCAwKSksXHJcbiAgICAgICAgICAgIHJpZ2h0Qm90dG9tID0gbGVmdFRvcC5hZGQobmV3IFZlY3Rvcih0aGlzLndpZHRoLCB0aGlzLmhlaWdodCkpLFxyXG4gICAgICAgICAgICBsZWZ0Qm90dG9tID0gbGVmdFRvcC5hZGQobmV3IFZlY3RvcigwLCB0aGlzLmhlaWdodCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2xlZnRUb3AsIHJpZ2h0VG9wLCByaWdodEJvdHRvbSwgbGVmdEJvdHRvbV07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJlYSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2VudHJvaWQoKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uYWRkKG5ldyBWZWN0b3IodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMikpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEluZXJ0aWEoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXNzICogKHRoaXMud2lkdGggKiB0aGlzLndpZHRoICsgdGhpcy5oZWlnaHQgKiB0aGlzLmhlaWdodCkgLyAxMjtcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Composite = void 0;\r\nconst bound_1 = __webpack_require__(5);\r\nconst Compose_1 = __webpack_require__(24);\r\nconst body_1 = __webpack_require__(2);\r\nclass Composite extends body_1.Body {\r\n    constructor(opt) {\r\n        super(opt, body_1.bodyType.composite);\r\n    }\r\n    // -------------------------- 内部方法 ------------------------\r\n    beforeInitializeProperties(opt) {\r\n        this.parts.length = 0;\r\n        for (let i = 0; i < opt.bodies.length; i++) {\r\n            this.parts.push(...opt.bodies[i].parts);\r\n        }\r\n        if (this.useParentProps === undefined) {\r\n            this.useParentProps = false;\r\n        }\r\n        if (!this.useParentProps) {\r\n            this.mass = Compose_1.Compose.getMass(this.parts);\r\n        }\r\n    }\r\n    afterInitializeProperties(opt) {\r\n        if (this.useParentProps) {\r\n            this.density = this.mass / this.area;\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                this.parts[i].mass = this.parts[i].area * this.density;\r\n                this.parts[i].friction = this.friction;\r\n                this.parts[i].restitution = this.restitution;\r\n            }\r\n            this.position = this.getCentroid();\r\n            for (let i = 0; i < this.parts.length; i++) {\r\n                this.parts[i].inertia = this.parts[i].getInertia(this.position);\r\n            }\r\n            this.inertia = this.getInertia();\r\n            this.invInertia = this.getInvInertia();\r\n        }\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            this.parts[i].parent = this;\r\n            this.parts[i].static = this.static;\r\n            this.parts[i].kinetic = this.kinetic;\r\n            this.parts[i].mask = this.mask;\r\n        }\r\n    }\r\n    getArea() {\r\n        return Compose_1.Compose.getArea(this.parts);\r\n    }\r\n    getCentroid() {\r\n        return Compose_1.Compose.getCentroid(this.parts, this.mass);\r\n    }\r\n    getInertia() {\r\n        return Compose_1.Compose.getInertia(this.parts);\r\n    }\r\n    getBound() {\r\n        let firstChildBound = this.parts[0].bound, bound = new bound_1.Bound(firstChildBound.min, firstChildBound.max);\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            bound = this.parts[i].bound.union(bound);\r\n        }\r\n        return bound;\r\n    }\r\n    translate(dx, dy) {\r\n        let part;\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            part = this.parts[i];\r\n            part.position.x += dx;\r\n            part.position.y += dy;\r\n            part.translate(dx, dy);\r\n        }\r\n        this.bound.translate(dx, dy);\r\n    }\r\n    rotate(radian, point) {\r\n        let part;\r\n        for (let i = 0; i < this.parts.length; i++) {\r\n            part = this.parts[i];\r\n            part.rotation += radian;\r\n            part.position = part.position.rot(radian, this.position, part.position);\r\n            part.rotate(radian, point);\r\n        }\r\n        this.bound.updateByBounds(this.parts);\r\n    }\r\n}\r\nexports.Composite = Composite;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.Compose = void 0;\r\nconst vector_1 = __webpack_require__(0);\r\nexports.Compose = {\r\n    /**\r\n     * 获取质量\r\n     * @param bodies\r\n     */\r\n    getMass(bodies) {\r\n        let totalMass = 0, body;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            totalMass += body.mass;\r\n        }\r\n        return totalMass;\r\n    },\r\n    /**\r\n     * 计算复合刚体的质心\r\n     * 参考：https://zhuanlan.zhihu.com/p/26395651\r\n     * @param composite\r\n     */\r\n    getCentroid(bodies, mass) {\r\n        let centroid = new vector_1.Vector(0, 0), body, i;\r\n        for (i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            centroid.x += body.position.x * body.mass;\r\n            centroid.y += body.position.y * body.mass;\r\n        }\r\n        centroid.x /= mass;\r\n        centroid.y /= mass;\r\n        return centroid;\r\n    },\r\n    /**\r\n     * 计算复合刚体的质量\r\n     * @param composite\r\n     */\r\n    getArea(bodies) {\r\n        let totalArea = 0, body, i;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            totalArea += body.area;\r\n        }\r\n        return totalArea;\r\n    },\r\n    /**\r\n     * 获取转动惯量\r\n     * @param bodies\r\n     */\r\n    getInertia(bodies) {\r\n        let totalInertia = 0, body, i;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            body = bodies[i];\r\n            totalInertia += body.inertia;\r\n        }\r\n        return totalInertia;\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL0NvbXBvc2UudHM/NDcwMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx3Q0FBd0M7QUFPM0IsZUFBTyxHQUFHO0lBRW5COzs7T0FHRztJQUNILE9BQU8sQ0FBQyxNQUFjO1FBQ2xCLElBQUksU0FBUyxHQUFXLENBQUMsRUFDckIsSUFBVSxDQUFDO1FBRWYsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixTQUFTLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztTQUMxQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQ3BDLElBQUksUUFBUSxHQUFHLElBQUksZUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDM0IsSUFBVSxFQUFFLENBQVMsQ0FBQztRQUUxQixLQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQixRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDMUMsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzdDO1FBRUQsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDbkIsUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFFbkIsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxNQUFjO1FBQ2xCLElBQUksU0FBUyxHQUFXLENBQUMsRUFDckIsSUFBVSxFQUFFLENBQVMsQ0FBQztRQUUxQixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFNBQVMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQzFCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxNQUFjO1FBQ3JCLElBQUksWUFBWSxHQUFXLENBQUMsRUFDeEIsSUFBVSxFQUFFLENBQVMsQ0FBQztRQUUxQixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ2hDO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKLENBQUMiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5IH0gZnJvbSBcIi4uL2JvZHkvYm9keVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tIFwiLi4vbWF0aC92ZWN0b3JcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IENvbXBvc2UgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5botKjph49cclxuICAgICAqIEBwYXJhbSBib2RpZXMgXHJcbiAgICAgKi9cclxuICAgIGdldE1hc3MoYm9kaWVzOiBCb2R5W10pOiBudW1iZXIge1xyXG4gICAgICAgIGxldCB0b3RhbE1hc3M6IG51bWJlciA9IDAsXHJcbiAgICAgICAgICAgIGJvZHk6IEJvZHk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcclxuICAgICAgICAgICAgdG90YWxNYXNzICs9IGJvZHkubWFzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0b3RhbE1hc3M7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X5aSN5ZCI5Yia5L2T55qE6LSo5b+DXHJcbiAgICAgKiDlj4LogIPvvJpodHRwczovL3podWFubGFuLnpoaWh1LmNvbS9wLzI2Mzk1NjUxXHJcbiAgICAgKiBAcGFyYW0gY29tcG9zaXRlIFxyXG4gICAgICovXHJcbiAgICBnZXRDZW50cm9pZChib2RpZXM6IEJvZHlbXSwgbWFzczogbnVtYmVyKTogVmVjdG9yIHtcclxuICAgICAgICBsZXQgY2VudHJvaWQgPSBuZXcgVmVjdG9yKDAsIDApLFxyXG4gICAgICAgICAgICBib2R5OiBCb2R5LCBpOiBudW1iZXI7XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgY2VudHJvaWQueCArPSBib2R5LnBvc2l0aW9uLnggKiBib2R5Lm1hc3M7XHJcbiAgICAgICAgICAgIGNlbnRyb2lkLnkgKz0gYm9keS5wb3NpdGlvbi55ICogYm9keS5tYXNzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2VudHJvaWQueCAvPSBtYXNzO1xyXG4gICAgICAgIGNlbnRyb2lkLnkgLz0gbWFzcztcclxuXHJcbiAgICAgICAgcmV0dXJuIGNlbnRyb2lkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuoeeul+WkjeWQiOWImuS9k+eahOi0qOmHj1xyXG4gICAgICogQHBhcmFtIGNvbXBvc2l0ZSBcclxuICAgICAqL1xyXG4gICAgZ2V0QXJlYShib2RpZXM6IEJvZHlbXSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHRvdGFsQXJlYTogbnVtYmVyID0gMCxcclxuICAgICAgICAgICAgYm9keTogQm9keSwgaTogbnVtYmVyO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XHJcbiAgICAgICAgICAgIHRvdGFsQXJlYSArPSBib2R5LmFyZWE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG90YWxBcmVhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlui9rOWKqOaDr+mHj1xyXG4gICAgICogQHBhcmFtIGJvZGllcyBcclxuICAgICAqL1xyXG4gICAgZ2V0SW5lcnRpYShib2RpZXM6IEJvZHlbXSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHRvdGFsSW5lcnRpYTogbnVtYmVyID0gMCxcclxuICAgICAgICAgICAgYm9keTogQm9keSwgaTogbnVtYmVyO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XHJcbiAgICAgICAgICAgIHRvdGFsSW5lcnRpYSArPSBib2R5LmluZXJ0aWE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG90YWxJbmVydGlhO1xyXG4gICAgfVxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n')}])}));